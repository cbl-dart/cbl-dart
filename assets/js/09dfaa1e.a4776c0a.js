"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[700],{8211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"blobs","title":"Blobs","description":"Couchbase Lite Concepts \u2014 Data Model \u2014 Blobs","source":"@site/docs/blobs.mdx","sourceDirName":".","slug":"/blobs","permalink":"/blobs","draft":false,"unlisted":false,"editUrl":"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/blobs.mdx","tags":[],"version":"current","frontMatter":{"description":"Couchbase Lite Concepts \u2014 Data Model \u2014 Blobs","related_content":[{"name":"Databases","url":"/databases"},{"name":"Documents","url":"/documents"},{"name":"Indexing","url":"/indexing"}]},"sidebar":"sidebar","previous":{"title":"Documents","permalink":"/documents"},"next":{"title":"QueryBuilder","permalink":"/queries/query-builder"}}');var a=t(4848),o=t(8453);const i={description:"Couchbase Lite Concepts \u2014 Data Model \u2014 Blobs",related_content:[{name:"Databases",url:"/databases"},{name:"Documents",url:"/documents"},{name:"Indexing",url:"/indexing"}]},r="Blobs",l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Blob Objects",id:"blob-objects",level:2},{value:"Constraints",id:"constraints",level:3},{value:"Using Blobs",id:"using-blobs",level:2},{value:"Syncing",id:"syncing",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{CodeExample:t,Figure:s,MetaHeader:i}=n;return t||b("CodeExample",!0),s||b("Figure",!0),i||b("MetaHeader",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.header,{children:[(0,a.jsx)(n.h1,{id:"blobs",children:"Blobs"}),(0,a.jsx)(i,{})]}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.p,{children:"Couchbase Lite for Dart uses blobs to store the contents of images, other media\nfiles and similar format files as binary objects."}),"\n",(0,a.jsx)(n.p,{children:"The blob itself is not stored in the document. It is held in a separate\ncontent-addressable store indexed from the document and retrieved only\non-demand."}),"\n",(0,a.jsxs)(n.p,{children:["When a document is synchronized, the Couchbase Lite replicator adds an\n",(0,a.jsx)(n.code,{children:"_attachments"})," dictionary to the document's properties if it contains a blob\n\u2014\u2009see ",(0,a.jsx)(n.a,{href:"#figure-1",children:"Figure 1"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"blob-objects",children:"Blob Objects"}),"\n",(0,a.jsxs)(n.p,{children:["The blob as an object appears in a document as dictionary property \u2014\u2009see, for\nexample ",(0,a.jsx)(n.em,{children:"avatar"})," in ",(0,a.jsx)(n.a,{href:"#figure-1",children:"Figure 1"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Other properties include ",(0,a.jsx)(n.code,{children:"length"})," (the length in bytes), and optionally\n",(0,a.jsx)(n.code,{children:"content_type"})," (typically, its MIME type)."]}),"\n",(0,a.jsxs)(n.p,{children:["The blob's data (an image, audio or video content) is not stored in the\ndocument, but in a separate content-addressable store, indexed by the ",(0,a.jsx)(n.code,{children:"digest"}),"\nproperty \u2014\u2009see ",(0,a.jsx)(n.a,{href:"#using-blobs",children:"Using Blobs"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"constraints",children:"Constraints"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Couchbase Lite ",(0,a.jsx)("br",{})," Blobs can be arbitrarily large. They are only read on\ndemand, not when you load a the document."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Capella App Services/Sync Gateway ",(0,a.jsx)("br",{})," The maximum content size is 20 MB per\nblob. If a document's blob is over 20 MB, the document will be replicated but\nnot the blob."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"using-blobs",children:"Using Blobs"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Blob-class.html",children:(0,a.jsx)(n.code,{children:"Blob"})})," API lets you access the blob's data content as in-memory data\n(",(0,a.jsx)(n.a,{href:"https://api.dart.dev/dart-typed_data/Uint8List-class.html",children:(0,a.jsx)(n.code,{children:"Uint8List"})}),") or as a ",(0,a.jsx)(n.a,{href:"https://api.dart.dev/dart-async/Stream-class.html",children:(0,a.jsx)(n.code,{children:"Stream"})})," of\n",(0,a.jsx)(n.a,{href:"https://api.dart.dev/dart-typed_data/Uint8List-class.html",children:(0,a.jsx)(n.code,{children:"Uint8List"})}),"s."]}),"\n",(0,a.jsxs)(n.p,{children:["The code in ",(0,a.jsx)(n.a,{href:"#example-1",children:"Example 1"})," shows how you might add a blob to a document and save\nit to the database. Here we use avatar as the property key and a jpeg file as\nthe blob data."]}),"\n",(0,a.jsx)(t,{id:1,title:"Working with Blobs",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final data = getAsset('avatar.jpg');\nif (data == null) { return; }\n\nfinal blob = Blob.fromData('image/jpeg', data);\ndoc.setBlob(blob, key: 'avatar');\nawait collection.saveDocument(doc);\n\nfinal image = doc.blob('avatar');\n"})})}),"\n",(0,a.jsx)(n.h2,{id:"syncing",children:"Syncing"}),"\n",(0,a.jsxs)(n.p,{children:["When a document containing a blob object is synchronized, the Couchbase Lite\nreplicator generates an ",(0,a.jsx)(n.code,{children:"_attachments"})," dictionary with an auto-generated name\nfor each blob attachment. This is different to the ",(0,a.jsx)(n.code,{children:"avatar"})," key and is used\ninternally to access the blob content."]}),"\n",(0,a.jsxs)(n.p,{children:["If you view a sync'd blob document in either Capella's Admin Interface or\nCouchbase Server's Admin Console, you will see something similar to\n",(0,a.jsx)(n.a,{href:"#figure-1",children:"Figure 1"}),", which shows the document with its generated ",(0,a.jsx)(n.code,{children:"_attachments"}),"\ndictionary, including the digest."]}),"\n",(0,a.jsx)(s,{id:1,title:"Sample Blob Document",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "_attachments": {\n    "blob_1": {\n      "content_type": "image/jpeg",\n      "digest": "sha1-F1Tfe61RZP4zC9UYT6JFmLTh2s8=",\n      "length": 8112955,\n      "revpos": 2,\n      "stub": true\n    }\n  },\n  "avatar": {\n    "@type": "blob",\n    "content_type": "image/jpeg",\n    "digest": "sha1-F1Tfe61RZP4zC9UYT6JFmLTh2s8=",\n    "length": 8112955\n  }\n}\n'})})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}function b(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6540);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);