"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[923],{8453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>o});var n=t(6540);const i={},s=n.createContext(i);function r(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:a},e.children)}},8633:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"prebuilt-database","title":"Pre-built Database","description":"How to Handle Pre-Built Couchbase Lite Databases in Your App","source":"@site/docs/prebuilt-database.mdx","sourceDirName":".","slug":"/prebuilt-database","permalink":"/prebuilt-database","draft":false,"unlisted":false,"editUrl":"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/prebuilt-database.mdx","tags":[],"version":"current","frontMatter":{"description":"How to Handle Pre-Built Couchbase Lite Databases in Your App","abstract":"This content explains how to include a snapshot of a pre-built database in your package to shorten initial sync time and reduce bandwidth use."},"sidebar":"sidebar","previous":{"title":"Databases","permalink":"/databases"},"next":{"title":"Scopes and Collections","permalink":"/scopes-and-collections"}}');var i=t(4848),s=t(8453);const r={description:"How to Handle Pre-Built Couchbase Lite Databases in Your App",abstract:"This content explains how to include a snapshot of a pre-built database in your package to shorten initial sync time and reduce bandwidth use."},o="Pre-built Database",c={},l=[{value:"Overview",id:"overview",level:2},{value:"To use a Pre-built Database",id:"to-use-a-pre-built-database",level:2},{value:"Creating Pre-built Database",id:"creating-pre-built-database",level:2},{value:"Bundle a Database with an Application",id:"bundle-database-with-application",level:2},{value:"Database Encryption",id:"database-encryption",level:2},{value:"Using Pre-built Database on App Launch",id:"using-pre-built-database-on-app-launch",level:2}];function d(e){const a={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{CodeExample:t,EnterpriseFeatureCallout:n,MetaHeader:r}=a;return t||h("CodeExample",!0),n||h("EnterpriseFeatureCallout",!0),r||h("MetaHeader",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a.header,{children:[(0,i.jsx)(a.h1,{id:"pre-built-database",children:"Pre-built Database"}),(0,i.jsx)(r,{})]}),"\n",(0,i.jsx)(a.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(a.p,{children:"Couchbase Lite's support for pre-built databases means you can pre-load your app\nwith data instead of syncing it down from Sync Gateway during startup. This\nmight benefit, for example, a mobile application developer striving to minimize\nconsumer wait time (arising from data setup) on initial install and launch of\nthe application."}),"\n",(0,i.jsx)(a.p,{children:"Avoiding an initial bulk sync will help reduce startup time and network transfer\ncosts, leading to a better consumer experience. It is typically more efficient\nto download bulk data using the HTTP/FTP stream employed during the application\ninstallation than to install a smaller application bundle and then have to use a\nreplicator to pull-in the bulk data."}),"\n",(0,i.jsx)(a.p,{children:"This prepackaging of the data typically applies to public/shared, non-user\nspecific data that is mostly static. Even if the data is not static, you can\nstill benefit from preloading it and only syncing the changed documents on\nstartup."}),"\n",(0,i.jsx)(a.p,{children:"The initial sync of any pre-built database will pull-in any content changes on\nthe server that occurred after its incorporation into the app, quickly bringing\nthe database up to date."}),"\n",(0,i.jsx)(a.h2,{id:"to-use-a-pre-built-database",children:"To use a Pre-built Database"}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["Create a new Couchbase Lite database with the required data set - see\n",(0,i.jsx)(a.a,{href:"#creating-pre-built-database",children:"Creating Pre-built database"}),"."]}),"\n",(0,i.jsxs)(a.li,{children:["Incorporate the pre-built database with your app bundle as an\nasset/resource - see\n",(0,i.jsx)(a.a,{href:"#bundle-database-with-application",children:"Bundle a Database with an Application"}),".\nFor Flutter apps it's recommended you zip the prebuilt database and then\nextract it to keep the size of your mobile app down."]}),"\n",(0,i.jsxs)(a.li,{children:["Adjust the start-up logic of your app to check for the presence of the\nrequired database. If the database doesn't already exist, create one using\nthe bundled pre-built database. Then initiate a sync to update the data - see\n",(0,i.jsx)(a.a,{href:"#using-pre-built-database-on-app-launch",children:"Using Pre-built Database on App Launch"}),"."]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"creating-pre-built-database",children:"Creating Pre-built Database"}),"\n",(0,i.jsx)(a.p,{children:"These steps should form part of your build and release process:"}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)(a.p,{children:"Create a fresh Couchbase Lite database (every time)."}),"\n",(0,i.jsxs)(a.admonition,{title:"Important",type:"caution",children:[(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Always create a new pre-built database for each app version"}),". This ensures\nthat there will be no ",(0,i.jsx)(a.a,{href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint",children:(0,i.jsx)(a.strong,{children:"checkpoint"})})," missmatch between the\npre-built database and the replicator configuration that the app uses."]}),(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Otherwise"}),": The cached ",(0,i.jsx)(a.a,{href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint",children:(0,i.jsx)(a.strong,{children:"checkpoint"})})," in the packaged\ndatabase might be invalidated on the first synchronization and the app will\nattempt to pull the data down again."]})]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)(a.p,{children:"Pull the data from Capella App Services or Sync Gateway into the new\nCouchbase Lite database."}),"\n",(0,i.jsxs)(a.admonition,{title:"Important",type:"caution",children:[(0,i.jsxs)(a.p,{children:["Ensure the replication used to populate Couchbase Lite database ",(0,i.jsx)(a.strong,{children:"uses the\nexact same remote URL and replication config parameters (channels and\nfilters)"})," as those your app will use when it is running."]}),(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Otherwise"}),": There will be a ",(0,i.jsx)(a.a,{href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint",children:(0,i.jsx)(a.strong,{children:"checkpoint"})})," mismatch and the\napp will attempt to pull the data down again."]}),(0,i.jsx)(a.p,{children:"So don't, for instance, create a pre-built database against a staging Capella\nApp Services or Sync Gateway server and try to use that within a production\napp that syncs against a production Sync Gateway."})]}),"\n",(0,i.jsxs)(a.p,{children:["You can use the cblite tool (cblite cp) for this \u2014\u2009see:\n",(0,i.jsx)(a.a,{href:"https://github.com/couchbaselabs/couchbase-mobile-tools/blob/master/Documentation.md#cp-aka-export-import-push-pull",children:"cblite cp (export, import, push, pull)"}),"\non GitHub."]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:["Create the ",(0,i.jsx)(a.strong,{children:"same"})," indexes the app will use (wait for the replication to\nfinish before doing this)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"bundle-database-with-application",children:"Bundle a Database with an Application"}),"\n",(0,i.jsx)(a.p,{children:"Copy the database into your app package. It's recommended you compress the\ndatabase using zip to keep the size of your mobile app down."}),"\n",(0,i.jsx)(a.p,{children:"Put it in an appropriate place (for example, an assets or resource folder)."}),"\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Alternatively"}),": Rather than bundling the database within the app, the app\ncould pull the database down from a CDN server on launch, but this add to the\ntime it takes for your app to bootstrap."]}),"\n",(0,i.jsx)(a.h2,{id:"database-encryption",children:"Database Encryption"}),"\n",(0,i.jsx)(n,{}),"\n",(0,i.jsxs)(a.p,{children:["If you are using en encrypted database, note that ",(0,i.jsx)(a.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Database/copy.html",children:(0,i.jsx)(a.code,{children:"Database.copy"})})," does not\nchange the encryption key. The encryption key specified in the config when\nopening the database is the encryption key used for both the original database\nand copied database."]}),"\n",(0,i.jsx)(a.p,{children:"If you copied an un-encrypted database and want to apply encryption to the copy,\nor if you want to change (or remove) the encryption key applied to the copy:"}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:["Provide the original encryption-key (if any) in the database copy's\nconfiguration using DatabaseConfiguration\n",(0,i.jsx)(a.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/DatabaseConfiguration/encryptionKey.html",children:(0,i.jsx)(a.code,{children:"DatabaseConfiguration.encryptionKey"})}),"."]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)(a.p,{children:"Open the database copy."}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:["Use ",(0,i.jsx)(a.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Database/changeEncryptionKey.html",children:(0,i.jsx)(a.code,{children:"Database.changeEncryptionKey"})})," on the database copy to set the\nrequired encryption key."]}),"\n",(0,i.jsx)(a.admonition,{type:"tip",children:(0,i.jsxs)(a.p,{children:["To remove encryption on the copy, provide a ",(0,i.jsx)(a.code,{children:"null"})," encryption-key."]})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"using-pre-built-database-on-app-launch",children:"Using Pre-built Database on App Launch"}),"\n",(0,i.jsx)(a.p,{children:"During the application start-up logic, check if database exists in the required\nlocation, and if not:"}),"\n",(0,i.jsxs)(a.ol,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)(a.p,{children:"Locate the pre-packaged database (for example, in the assets or other\nresource folder)."}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)(a.p,{children:"Copy the pre-packaged database to the required location."}),"\n",(0,i.jsxs)(a.p,{children:["Use the API's ",(0,i.jsx)(a.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Database/copy.html",children:(0,i.jsx)(a.code,{children:"Database.copy"})})," method \u2014\u2009see: ",(0,i.jsx)(a.a,{href:"#example-1",children:"Example 1"}),". This ensures\nthat a unique UUID is generated for each copy."]}),"\n",(0,i.jsxs)(a.admonition,{title:"Important",type:"caution",children:[(0,i.jsx)(a.p,{children:"Do not copy the database using any other method."}),(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Otherwise"}),": Each copy of the app will invalidate the other apps'\n",(0,i.jsx)(a.a,{href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint",children:(0,i.jsx)(a.strong,{children:"checkpoints"})})," because a new UUID was not generated."]})]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)(a.p,{children:"Open the database; you can now start querying the data and using it."}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)(a.p,{children:"Start a pull replication, to sync any changes."}),"\n",(0,i.jsxs)(a.p,{children:["The replicator uses the pre-built database's ",(0,i.jsx)(a.a,{href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint",children:(0,i.jsx)(a.strong,{children:"checkpoint"})})," as\nthe timestamp to sync from; only documents changed since then are synced."]}),"\n",(0,i.jsx)(a.admonition,{type:"note",children:(0,i.jsx)(a.p,{children:"Start your normal application logic immediately, unless it is essential to\nhave the absolute up-to-date data set to begin. That way the user is not\nkept hanging around watching a progress indicator. They can begin\ninteracting with your app whilst any out-of-data data is being updated."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t,{id:1,title:"Decompress and Copy Database using API",children:(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-dart",children:"const databaseName = 'my-database';\nconst prebuiltDatabaseAssetFileName = 'asset/database/prebuiltDatabase.zip';\nfinal documentsDirectory = await getApplicationDocumentsDirectory();\nfinal databasesDirectory = '$documentsDirectory/databases';\nfinal prebuiltDatabaseFileName =\n    '$databasesDirectory/$databaseName-prebuilt.cblite2';\n\n// Create the database if it doesn't already exist.\nif (!Database.existsSync(databaseName, directory: databasesDirectory)) {\n  final prebuiltDatabaseZip =\n      await rootBundle.load(prebuiltDatabaseAssetFileName);\n\n  if (prebuiltDatabaseZip.lengthInBytes > 0) {\n    // Decompress the zip file into bytes and then convert them into a\n    // Uint8List, which is required by the Archive framework.\n    final archive =\n        ZipDecoder().decodeBytes(prebuiltDatabaseZip.buffer.asUint8List());\n\n    // Loop through directories and files in the zip file and create them.\n    for (final file in archive) {\n      final fileName = '$prebuiltDatabaseFileName/${file.name}';\n      if (file.isFile) {\n        final fileData = file.content as List<int>;\n        File(fileName)\n          ..createSync(recursive: true)\n          ..writeAsBytesSync(fileData);\n      } else {\n        Directory(fileName).createSync(recursive: true);\n      }\n    }\n\n    final config = DatabaseConfiguration(directory: databasesDirectory);\n    await Database.copy(\n      from: prebuiltDatabaseFileName,\n      name: databaseName,\n      config: config,\n    );\n  }\n}\n"})})})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function h(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);