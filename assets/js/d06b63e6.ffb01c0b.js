"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[983],{6575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"queries/query-result-sets","title":"Query Result Sets","description":"How to use Couchbase Lite Query Result Sets","source":"@site/docs/queries/query-result-sets.mdx","sourceDirName":"queries","slug":"/queries/query-result-sets","permalink":"/queries/query-result-sets","draft":false,"unlisted":false,"editUrl":"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/queries/query-result-sets.mdx","tags":[],"version":"current","frontMatter":{"description":"How to use Couchbase Lite Query Result Sets","related_content":[{"name":"SQL++ for Mobile","url":"/queries/sqlplusplus-mobile"},{"name":"QueryBuilder","url":"/queries/query-builder"},{"name":"Indexes","url":"/indexing"}]},"sidebar":"sidebar","previous":{"title":"SQL++ and QueryBuilder Differences","permalink":"/queries/sqlplusplus-query-builder-diff"},"next":{"title":"Live Queries","permalink":"/queries/live-queries"}}');var l=t(4848),r=t(8453);const i={description:"How to use Couchbase Lite Query Result Sets",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"QueryBuilder",url:"/queries/query-builder"},{name:"Indexes",url:"/indexing"}]},a="Query Result Sets",c={},o=[{value:"Select All Properties",id:"select-all-properties",level:2},{value:"Query",id:"query",level:3},{value:"Result Set Format",id:"result-set-format",level:3},{value:"Result Set Access",id:"result-set-access",level:3},{value:"Select Specific Properties",id:"select-specific-properties",level:2},{value:"Query",id:"query-1",level:3},{value:"Result Set Format",id:"result-set-format-1",level:3},{value:"Result Set Access",id:"result-set-access-1",level:3},{value:"Select Document ID Only",id:"select-document-id-only",level:2},{value:"Query",id:"query-2",level:3},{value:"Result Set Format",id:"result-set-format-2",level:3},{value:"Result Set Access",id:"result-set-access-2",level:3},{value:"Select Count Only",id:"select-count-only",level:2},{value:"Query",id:"query-3",level:3},{value:"Result Set Format",id:"result-set-format-3",level:3},{value:"Result Set Access",id:"result-set-access-3",level:3},{value:"Handling Pagination",id:"handling-pagination",level:2},{value:"JSON Result Sets",id:"json-result-sets",level:2},{value:"Convert Result to Model",id:"convert-result-to-model",level:3},{value:"JSON String Format",id:"json-string-format",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{CodeExample:t,MetaHeader:s}=n;return t||h("CodeExample",!0),s||h("MetaHeader",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.header,{children:[(0,l.jsx)(n.h1,{id:"query-result-sets",children:"Query Result Sets"}),(0,l.jsx)(s,{})]}),"\n",(0,l.jsx)(n.p,{children:"The execution of a Couchbase Lite database query returns an array of results, a\nresult set."}),"\n",(0,l.jsxs)(n.p,{children:["The result set format and its handling varies slightly depending on the type of\n",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html",children:(0,l.jsx)(n.code,{children:"SelectResult"})})," expressions used. The result set formats you may encounter\ninclude those generated by:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult/all.html",children:(0,l.jsx)(n.code,{children:"SelectResult.all"})})," \u2014\u2009see: ",(0,l.jsx)(n.a,{href:"#select-all-properties",children:"All Properties"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Expression/property.html",children:(0,l.jsx)(n.code,{children:"Expression.property"})})," \u2014\u2009see:\n",(0,l.jsx)(n.a,{href:"#select-specific-properties",children:"Specific Properties"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Meta/id.html",children:(0,l.jsx)(n.code,{children:"Meta.id"})})," \u2014 Metadata (such as the ",(0,l.jsx)(n.code,{children:"_id"}),") \u2014\u2009see:\n",(0,l.jsx)(n.a,{href:"#select-document-id-only",children:"Document ID Only"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/count.html",children:(0,l.jsx)(n.code,{children:"Function_.count"})})," \u2014\u2009 see: ",(0,l.jsx)(n.a,{href:"#select-count-only",children:"Select Count Only"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["To process the results of a query, you first need to execute it using\n",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Query/execute.html",children:(0,l.jsx)(n.code,{children:"Query.execute"})}),"."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The result set of an aggregate query contains one result per aggregation group\n\u2014\u2009see ",(0,l.jsx)(n.a,{href:"#select-count-only",children:"Select Count Only"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The result set of a query returning document properties contains zero or more\nresults. Each result represents the data from a document that matched your\nsearch criteria (the ",(0,l.jsx)(n.code,{children:"WHERE"})," clause). The composition of each result is\ndetermined by the combination of ",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html",children:(0,l.jsx)(n.code,{children:"SelectResult"})})," expressions provided in\nthe ",(0,l.jsx)(n.code,{children:"SELECT"})," clause."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"select-all-properties",children:"Select All Properties"}),"\n",(0,l.jsx)(n.h3,{id:"query",children:"Query"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"SELECT"})," clause for this type of query, which returns all document\nproperties for each document matching the query criteria, is fairly\nstraightforward \u2014\u2009see ",(0,l.jsx)(n.a,{href:"#example-1",children:"Example 1"}),"."]}),"\n",(0,l.jsx)(t,{id:1,title:"Query Selecting All Properties",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('travel-sample');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.collection(collection));\n"})})}),"\n",(0,l.jsx)(n.h3,{id:"result-set-format",children:"Result Set Format"}),"\n",(0,l.jsxs)(n.p,{children:["The result set returned by queries using ",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult/all.html",children:(0,l.jsx)(n.code,{children:"SelectResult.all"})})," contains\ndictionaries \u2014\u2009one for each document matching the query criteria."]}),"\n",(0,l.jsxs)(n.p,{children:["Each result contains a key-value pair, where the key is the database name and\nthe value is a dictionary representing each document's properties \u2014\u2009see:\n",(0,l.jsx)(n.a,{href:"#example-2",children:"Example 2"}),"."]}),"\n",(0,l.jsx)(t,{id:2,title:"Format of Result Set (All Properties)",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "travel-sample": {\n      "callsign": "MILE-AIR",\n      "country": "United States",\n      "iata": "Q5",\n      "icao": "MLA",\n      "id": 10,\n      "name": "40-Mile Air",\n      "type": "airline"\n    }\n  },\n  {\n    "travel-sample": {\n      "callsign": "ALASKAN-AIR",\n      "country": "United States",\n      "iata": "AA",\n      "icao": "AAA",\n      "id": 10,\n      "name": "Alaskan Airways",\n      "type": "airline"\n    }\n  }\n]\n'})})}),"\n",(0,l.jsx)(n.h3,{id:"result-set-access",children:"Result Set Access"}),"\n",(0,l.jsxs)(n.p,{children:["In this case, access the retrieved document properties by looking up a\ndictionary in each result \u2014\u2009as shown in ",(0,l.jsx)(n.a,{href:"#example-3",children:"Example 3"}),"."]}),"\n",(0,l.jsx)(t,{id:3,title:"Using Document Properties (All)",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final resultSet = await query.execute();\nawait for (final result in resultSet.asStream()) {\n  final docProps = result.dictionary(0)!;\n\n  final id = docProps.string('id');\n  final name = docProps.string('name');\n  final type = docProps.string('type');\n  final city = docProps.string('city');\n  print(\"$id $name $type $city\");\n}\n"})})}),"\n",(0,l.jsx)(n.h2,{id:"select-specific-properties",children:"Select Specific Properties"}),"\n",(0,l.jsx)(n.h3,{id:"query-1",children:"Query"}),"\n",(0,l.jsxs)(n.p,{children:["Here we use ",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Expression/property.html",children:(0,l.jsx)(n.code,{children:"Expression.property"})})," to specify the document properties we want\nour query to return \u2014\u2009see: ",(0,l.jsx)(n.a,{href:"#example-4",children:"Example 4"}),"."]}),"\n",(0,l.jsx)(t,{id:4,title:"Query Selecting Specific Properties",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id).as('docId'),\n    SelectResult.expression(Expression.property('id')),\n    SelectResult.expression(Expression.property('type')),\n    SelectResult.expression(Expression.property('name')),\n  )\n  .from(DataSource.collection(collection));\n"})})}),"\n",(0,l.jsx)(n.h3,{id:"result-set-format-1",children:"Result Set Format"}),"\n",(0,l.jsx)(n.p,{children:"The result set returned when selecting only specific document properties\ncontains dictionaries \u2014\u2009one for each document matching the query criteria."}),"\n",(0,l.jsxs)(n.p,{children:["Each result comprises a key-value pair for each selected document property \u2014\u2009see\n",(0,l.jsx)(n.a,{href:"#example-5",children:"Example 5"}),"."]}),"\n",(0,l.jsx)(t,{id:5,title:"Format of Result Set (Specific Properties)",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "docId": "XjO9Ohk96F",\n    "id": "hotel123",\n    "type": "hotel",\n    "name": "Hotel Ghia"\n  },\n  {\n    "docId": "w2DCGPJ-0m",\n    "id": "hotel456",\n    "type": "hotel",\n    "name": "Hotel Deluxe"\n  }\n]\n'})})}),"\n",(0,l.jsx)(n.h3,{id:"result-set-access-1",children:"Result Set Access"}),"\n",(0,l.jsxs)(n.p,{children:["Access the retrieved properties by looking them up in each result \u2014 as shown in\n",(0,l.jsx)(n.a,{href:"#example-6",children:"Example 6"}),"."]}),"\n",(0,l.jsx)(t,{id:6,title:"Using Returned Document Properties (Specific Properties)",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final resultSet = await query.execute();\nawait for (final result in await resultSet.asStream()) {\n  final docId = result.string('docId')!;\n  print('processing doc: $docId');\n\n  final id = result.string('id')!;\n  final hotel = Hotel(id);\n  hotel.type = result.string('type')!;\n  hotel.name = result.string('name')!;\n  Do something with the hotel...\n}\n"})})}),"\n",(0,l.jsx)(n.h2,{id:"select-document-id-only",children:"Select Document ID Only"}),"\n",(0,l.jsx)(n.h3,{id:"query-2",children:"Query"}),"\n",(0,l.jsxs)(n.p,{children:["You would typically use this type of query if retrieval of document properties\ndirectly would consume excessive amounts of memory and-or processing time \u2014\u2009see:\n",(0,l.jsx)(n.a,{href:"#example-7",children:"Example 7"}),"."]}),"\n",(0,l.jsx)(t,{id:7,title:"Query Selecting Only Document ID",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = QueryBuilder.createAsync()\n  .select(SelectResult.expression(Meta.id))\n  .from(DataSource.collection(collection));\n"})})}),"\n",(0,l.jsx)(n.h3,{id:"result-set-format-2",children:"Result Set Format"}),"\n",(0,l.jsxs)(n.p,{children:["The result set returned by queries using a ",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html",children:(0,l.jsx)(n.code,{children:"SelectResult"})})," expression of the\nform ",(0,l.jsx)(n.code,{children:"SelectResult.expression(Meta.id)"})," contains dictionaries \u2014\u2009one for each\ndocument matching the query criteria. Each result contains the ID under the ",(0,l.jsx)(n.code,{children:"id"}),"\nkey \u2014\u2009see ",(0,l.jsx)(n.a,{href:"#example-8",children:"Example 8"}),"."]}),"\n",(0,l.jsx)(t,{id:8,title:"Format of Result Set (Document ID Only)",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "id": "hotel123"\n  },\n  {\n    "id": "hotel456"\n  }\n]\n'})})}),"\n",(0,l.jsx)(n.h3,{id:"result-set-access-2",children:"Result Set Access"}),"\n",(0,l.jsxs)(n.p,{children:["In this case, access the properties of a document by unpacking the id and using\nit to get the document from the database \u2014\u2009see: ",(0,l.jsx)(n.a,{href:"#example-9",children:"Example 9"}),"."]}),"\n",(0,l.jsx)(t,{id:9,title:"Using Returned Document Properties (Document ID)",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final resultSet = await query.execute();\nawait for (final result in resultSet.asStream()) {\n  final docId = result.string('docId');\n  print('processing doc: $docId');\n\n  final doc = (await database.document(docId))!;\n  final hotelId = doc.string('id');\n  final name = doc.string('name');\n  final city = doc.string('city');\n  final type = doc.string('type');\n  Do something with the variables...\n}\n"})})}),"\n",(0,l.jsx)(n.h2,{id:"select-count-only",children:"Select Count Only"}),"\n",(0,l.jsx)(n.h3,{id:"query-3",children:"Query"}),"\n",(0,l.jsx)(t,{id:10,title:"Query Selecting a Count Only",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(SelectResult.expression(Function_.count(Expression.all())).as('count'))\n  .from(DataSource.collection(collection))\n  .groupBy(Expression.property('type'));\n"})})}),"\n",(0,l.jsx)(n.h3,{id:"result-set-format-3",children:"Result Set Format"}),"\n",(0,l.jsxs)(n.p,{children:["The result set returned by a count such as\n",(0,l.jsx)(n.code,{children:"SelectResult.expression(Function_.count(Expression.all())).as('count')"}),"\ncontains dictionaries with a key-value pair. The key is the count name, as\ndefined using ",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResultAs/as.html",children:(0,l.jsx)(n.code,{children:"SelectResultAs.as"})})," \u2014\u2009see: ",(0,l.jsx)(n.a,{href:"#example-11",children:"Example 11"})," for the format and\n",(0,l.jsx)(n.a,{href:"#example-10",children:"Example 10"})," for the query."]}),"\n",(0,l.jsx)(t,{id:11,title:"Format of Result Set (Count)",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "count": 6\n}\n'})})}),"\n",(0,l.jsx)(n.h3,{id:"result-set-access-3",children:"Result Set Access"}),"\n",(0,l.jsxs)(n.p,{children:['Access the count using its alias name ("count" in this example) \u2014\u2009see\n',(0,l.jsx)(n.a,{href:"#example-12",children:"Example 12"}),"."]}),"\n",(0,l.jsx)(t,{id:12,title:"Using Returned Aggregate Value (Count)",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final resultSet = await query.execute();\nfinal results = await resultSet.allResults();\nfinal result = results.first;\nfinal count = result.integer('count');\nprint(\"There are $count documents.\");\n"})})}),"\n",(0,l.jsx)(n.h2,{id:"handling-pagination",children:"Handling Pagination"}),"\n",(0,l.jsxs)(n.p,{children:["One way to handle pagination in high-volume queries is to retrieve the results\nin batches. Use the ",(0,l.jsx)(n.code,{children:"LIMIT"})," and ",(0,l.jsx)(n.code,{children:"OFFSET"})," clauses to return a defined number of\nresults starting from a given offset \u2014\u2009see: ",(0,l.jsx)(n.a,{href:"#example-13",children:"Example 13"}),"."]}),"\n",(0,l.jsx)(t,{id:13,title:"Query Pagination",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"const offset = 0;\nconst limit = 20;\n\nfinal database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n .select(SelectResult.all())\n .from(DataSource.collection(collection))\n .limit(\n    Expression.integer(limit),\n    offset: Expression.integer(offset),\n  );\n"})})}),"\n",(0,l.jsx)(n.h2,{id:"json-result-sets",children:"JSON Result Sets"}),"\n",(0,l.jsx)(n.p,{children:"Couchbase Lite for Dart provides a convenience API to convert query results to:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Plain Dart objects through ",(0,l.jsx)(n.code,{children:"toPlainMap"})," and ",(0,l.jsx)(n.code,{children:"toPlainList"})," on ",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Result-class.html",children:(0,l.jsx)(n.code,{children:"Result"})}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["JSON strings through ",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Result/toJson.html",children:(0,l.jsx)(n.code,{children:"Result.toJson"})}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"convert-result-to-model",children:"Convert Result to Model"}),"\n",(0,l.jsxs)(n.p,{children:["In Dart/Flutter you can use code generators to auto generate the code for\nhanding serialization. See\n",(0,l.jsx)(n.a,{href:"https://docs.flutter.dev/development/data-and-backend/json#serializing-json-using-code-generation-libraries",children:"Creating model classes the json serializable way"}),"\nfor more information. The example below shows how this can be done using the\nclass ",(0,l.jsx)(n.code,{children:"Hotel"})," with methods generated from the code generators. Also note when\nupdating your model classes you will be required to run this command from the\nterminal to update your code generated classes:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"flutter pub run build_runner build --delete-conflicting-outputs\n"})}),"\n",(0,l.jsxs)(t,{id:14,title:"Convert Result to Model",children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"// hotel.dart\n\npart 'hotel.g.dart';\n\n@JsonSerializable(explicitToJson: true)\nclass Hotel {\n  const Hotel({\n    required this.id,\n    required this.name,\n    required this.city,\n    required this.country,\n    this.description,\n  });\n\n  String id;\n  String type;\n  String name;\n  String city;\n  String country;\n  String? description;\n\n  factory Hotel.fromJson(Map<String, Object?> json) => _$HotelFromJson(json);\n\n  Map<String, Object?> toJson() => _$HotelToJson(this);\n}\n\n@JsonSerializable(explicitToJson: true)\nclass HotelDao {\n const HotelDao(this.hotel);\n\n final Hotel hotel;\n\n factory HotelDao.fromJson(Map<String, Object?> json) =>\n     _$HotelDaoFromJson(json);\n\n  Map<String, Object?> toJson() => _$HotelDaoToJson(this);\n}\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n .select(SelectResult.all().as('hotel'))\n .from(DataSource.collection(collection));\n\nfinal resultSet = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  final map = result.toPlainMap();\n  final hotelDao = HotelDao.fromJson(map);\n  final hotel = hotelDao.hotel;\n  // Do something with the hotel...\n}\n"})})]}),"\n",(0,l.jsx)(n.h3,{id:"json-string-format",children:"JSON String Format"}),"\n",(0,l.jsxs)(n.p,{children:["If your query selects all properties then the JSON format returned by\n",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Result/toJson.html",children:(0,l.jsx)(n.code,{children:"Result.toJson"})})," will be:"]}),"\n",(0,l.jsx)(t,{id:15,title:"JSON Format for Select All",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "collection-name": {\n    "key1": "value1",\n    "keyx": "valuex"\n  }\n}\n'})})}),"\n",(0,l.jsxs)(n.p,{children:["If your query selects a sub-set of available properties then the JSON format\nreturned by ",(0,l.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Result/toJson.html",children:(0,l.jsx)(n.code,{children:"Result.toJson"})})," will be:"]}),"\n",(0,l.jsx)(t,{id:16,title:"JSON Format for Select Specific Properties",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "key1": "value1",\n  "keyx": "valuex"\n}\n'})})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const l={},r=s.createContext(l);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);