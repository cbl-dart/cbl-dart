"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[473],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=u(n),d=a,m=h["".concat(o,".").concat(d)]||h[d]||p[d]||i;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[h]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6517:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={description:"Couchbase Lite Live Query Concepts",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"QueryBuilder",url:"/queries/query-builder"}]},s="Live Queries",l={unversionedId:"queries/live-queries",id:"queries/live-queries",title:"Live Queries",description:"Couchbase Lite Live Query Concepts",source:"@site/docs/queries/live-queries.mdx",sourceDirName:"queries",slug:"/queries/live-queries",permalink:"/queries/live-queries",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/queries/live-queries.mdx",tags:[],version:"current",frontMatter:{description:"Couchbase Lite Live Query Concepts",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"QueryBuilder",url:"/queries/query-builder"}]},sidebar:"sidebar",previous:{title:"Query Result Sets",permalink:"/queries/query-result-sets"},next:{title:"Query Troubleshooting",permalink:"/queries/query-troubleshooting"}},o={},u=[{value:"Activating a Live Query",id:"activating-a-live-query",level:2},{value:"Watching with Change Listeners",id:"watching-with-change-listeners",level:2},{value:"Watching with Streams",id:"watching-with-streams",level:2}],c=(h="CodeExample",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var h;const p={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"live-queries"},"Live Queries"),(0,a.kt)("metaheader",null),(0,a.kt)("h2",{id:"activating-a-live-query"},"Activating a Live Query"),(0,a.kt)("p",null,"A live query is a query that, once activated, remains active and monitors the\ndatabase for changes; refreshing the result set whenever a change occurs. As\nsuch, it is a great way to build reactive user interfaces \u2014\u2009especially\ntable/list views \u2014\u2009that keep themselves up to date."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"So, a simple use case may be"),": A replicator running and pulling new data from\na server, whilst a live-query-driven UI automatically updates to show the data\nwithout the user having to manually refresh. This helps your app feel quick and\nresponsive."),(0,a.kt)("p",null,"With Couchbase Lite for Dart, live queries can be watched through:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Listener callbacks: ",(0,a.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/addChangeListener.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Query.addChangeListener"))),(0,a.kt)("li",{parentName:"ul"},"Streams: ",(0,a.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/changes.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Query.changes")))),(0,a.kt)("p",null,"Each time you start watching a live query, the query is executed and an initial\nchange notification is dispatched. The query is then kept active and further\nchange notifications are dispatched whenever a change occurs."),(0,a.kt)("h2",{id:"watching-with-change-listeners"},"Watching with Change Listeners"),(0,a.kt)("p",null,"In the case of the synchronous API, all changes are delivered to the listeners\nas soon as they are registered."),(0,a.kt)("p",null,"With the asynchronous API, changes are only guaranteed to be delivered once the\n",(0,a.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-async/Future-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Future"))," returned from the registration call is completed:"),(0,a.kt)(c,{id:1,title:"Starting a Live Query - Change Listener",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"// Await the future returned from the registration call.\nawait query.addChangeListener((change) async {\n  final results = await change.results.allResults();\n    for (final result in results) {\n        // Do something with the result...\n    }\n});\n"))),(0,a.kt)("p",null,"To stop receiving notifications, call ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/removeChangeListener.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Query.removeChangeListener"))," with the\ntoken that was returned from the registration call. Regardless of the whether\nthe API is synchronous or asynchronous, listeners will stop receiving\nnotifications immediately:"),(0,a.kt)(c,{id:2,title:"Stopping a Live Query - Change Listener",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final token = await query.addChangeListener((change) async { ... });\n\n// Some time goes by...\n\nawait query.removeChangeListener(token);\n"))),(0,a.kt)("h2",{id:"watching-with-streams"},"Watching with Streams"),(0,a.kt)("p",null,"Streams are a convenient alternative to listen for changes. Similarly to change\nlisteners, change streams returned from the synchronous API are receiving\nchanges as soon as the stream is subscribed to."),(0,a.kt)("p",null,"Streams returned from the asynchronous API start to listen asynchronously.\nUnfortunately it's not possible to return a Future from Stream.listen to signal\nto subscribers the point in time after which the the stream will observe events.\nInstead, the asynchronous API returns a ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/AsyncListenStreams-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"AsyncListenStreams")),", which expose a\n",(0,a.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-async/Future-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Future"))," in ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/AsyncListenStream/listening.html"},(0,a.kt)("inlineCode",{parentName:"a"},"AsyncListenStream.listening"))," that completes when\nthe stream is fully listening:"),(0,a.kt)(c,{id:3,title:"Starting a Live Query - Stream",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final stream = query.changes();\n\nstream.listen((change) async {\n    final results = await change.results.allResults();\n    for (final result in results) {\n        // Do something with the result...\n    }\n});\n\n// Await the Future exposed by the stream.\nawait stream.listening;\n"))),(0,a.kt)("p",null,"To stop listening to changes just cancel the subscription, like with any other\nstream."))}m.isMDXComponent=!0}}]);