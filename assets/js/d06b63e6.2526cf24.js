"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[419],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=l,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[p]="string"==typeof e?e:l,s[1]=o;for(var u=2;u<r;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),l=(n(7294),n(3905));const r={description:"How to use Couchbase Lite Query Result Sets",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"QueryBuilder",url:"/queries/query-builder"},{name:"Indexes",url:"/indexing"}]},s="Query Result Sets",o={unversionedId:"queries/query-result-sets",id:"queries/query-result-sets",title:"Query Result Sets",description:"How to use Couchbase Lite Query Result Sets",source:"@site/docs/queries/query-result-sets.mdx",sourceDirName:"queries",slug:"/queries/query-result-sets",permalink:"/queries/query-result-sets",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/queries/query-result-sets.mdx",tags:[],version:"current",frontMatter:{description:"How to use Couchbase Lite Query Result Sets",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"QueryBuilder",url:"/queries/query-builder"},{name:"Indexes",url:"/indexing"}]},sidebar:"sidebar",previous:{title:"SQL++ and QueryBuilder Differences",permalink:"/queries/sqlplusplus-query-builder-diff"},next:{title:"Live Queries",permalink:"/queries/live-queries"}},i={},u=[{value:"Select All Properties",id:"select-all-properties",level:2},{value:"Query",id:"query",level:3},{value:"Result Set Format",id:"result-set-format",level:3},{value:"Result Set Access",id:"result-set-access",level:3},{value:"Select Specific Properties",id:"select-specific-properties",level:2},{value:"Query",id:"query-1",level:3},{value:"Result Set Format",id:"result-set-format-1",level:3},{value:"Result Set Access",id:"result-set-access-1",level:3},{value:"Select Document ID Only",id:"select-document-id-only",level:2},{value:"Query",id:"query-2",level:3},{value:"Result Set Format",id:"result-set-format-2",level:3},{value:"Result Set Access",id:"result-set-access-2",level:3},{value:"Select Count Only",id:"select-count-only",level:2},{value:"Query",id:"query-3",level:3},{value:"Result Set Format",id:"result-set-format-3",level:3},{value:"Result Set Access",id:"result-set-access-3",level:3},{value:"Handling Pagination",id:"handling-pagination",level:2},{value:"JSON Result Sets",id:"json-result-sets",level:2},{value:"Convert Result to Model",id:"convert-result-to-model",level:3},{value:"JSON String Format",id:"json-string-format",level:3}],c=(p="CodeExample",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var p;const d={toc:u},m="wrapper";function h(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"query-result-sets"},"Query Result Sets"),(0,l.kt)("metaheader",null),(0,l.kt)("p",null,"The execution of a Couchbase Lite database query returns an array of results, a\nresult set."),(0,l.kt)("p",null,"The result set format and its handling varies slightly depending on the type of\n",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,l.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expressions used. The result set formats you may encounter\ninclude those generated by:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult/all.html"},(0,l.kt)("inlineCode",{parentName:"a"},"SelectResult.all"))," \u2014\u2009see: ",(0,l.kt)("a",{parentName:"p",href:"#select-all-properties"},"All Properties"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Expression/property.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Expression.property"))," \u2014\u2009see:\n",(0,l.kt)("a",{parentName:"p",href:"#select-specific-properties"},"Specific Properties"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Meta/id.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Meta.id"))," \u2014 Metadata (such as the ",(0,l.kt)("inlineCode",{parentName:"p"},"_id"),") \u2014\u2009see:\n",(0,l.kt)("a",{parentName:"p",href:"#select-document-id-only"},"Document ID Only"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/count.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Function_.count"))," \u2014\u2009 see: ",(0,l.kt)("a",{parentName:"p",href:"#select-count-only"},"Select Count Only")))),(0,l.kt)("p",null,"To process the results of a query, you first need to execute it using\n",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/execute.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Query.execute")),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The result set of an aggregate query contains one result per aggregation group\n\u2014\u2009see ",(0,l.kt)("a",{parentName:"p",href:"#select-count-only"},"Select Count Only"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The result set of a query returning document properties contains zero or more\nresults. Each result represents the data from a document that matched your\nsearch criteria (the ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause). The composition of each result is\ndetermined by the combination of ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,l.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expressions provided in\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," clause."))),(0,l.kt)("h2",{id:"select-all-properties"},"Select All Properties"),(0,l.kt)("h3",{id:"query"},"Query"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," clause for this type of query, which returns all document\nproperties for each document matching the query criteria, is fairly\nstraightforward \u2014\u2009see ",(0,l.kt)("a",{parentName:"p",href:"#example-1"},"Example 1"),"."),(0,l.kt)(c,{id:1,title:"Query Selecting All Properties",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('travel-sample');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.collection(collection));\n"))),(0,l.kt)("h3",{id:"result-set-format"},"Result Set Format"),(0,l.kt)("p",null,"The result set returned by queries using ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult/all.html"},(0,l.kt)("inlineCode",{parentName:"a"},"SelectResult.all"))," contains\ndictionaries \u2014\u2009one for each document matching the query criteria."),(0,l.kt)("p",null,"Each result contains a key-value pair, where the key is the database name and\nthe value is a dictionary representing each document's properties \u2014\u2009see:\n",(0,l.kt)("a",{parentName:"p",href:"#example-2"},"Example 2"),"."),(0,l.kt)(c,{id:2,title:"Format of Result Set (All Properties)",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "travel-sample": {\n      "callsign": "MILE-AIR",\n      "country": "United States",\n      "iata": "Q5",\n      "icao": "MLA",\n      "id": 10,\n      "name": "40-Mile Air",\n      "type": "airline"\n    }\n  },\n  {\n    "travel-sample": {\n      "callsign": "ALASKAN-AIR",\n      "country": "United States",\n      "iata": "AA",\n      "icao": "AAA",\n      "id": 10,\n      "name": "Alaskan Airways",\n      "type": "airline"\n    }\n  }\n]\n'))),(0,l.kt)("h3",{id:"result-set-access"},"Result Set Access"),(0,l.kt)("p",null,"In this case, access the retrieved document properties by looking up a\ndictionary in each result \u2014\u2009as shown in ",(0,l.kt)("a",{parentName:"p",href:"#example-3"},"Example 3"),"."),(0,l.kt)(c,{id:3,title:"Using Document Properties (All)",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final resultSet = await query.execute();\nawait for (final result in resultSet.asStream()) {\n  final docProps = result.dictionary(0)!;\n\n  final id = docProps.string('id');\n  final name = docProps.string('name');\n  final type = docProps.string('type');\n  final city = docProps.string('city');\n  print(\"$id $name $type $city\");\n}\n"))),(0,l.kt)("h2",{id:"select-specific-properties"},"Select Specific Properties"),(0,l.kt)("h3",{id:"query-1"},"Query"),(0,l.kt)("p",null,"Here we use ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Expression/property.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Expression.property"))," to specify the document properties we want\nour query to return \u2014\u2009see: ",(0,l.kt)("a",{parentName:"p",href:"#example-4"},"Example 4"),"."),(0,l.kt)(c,{id:4,title:"Query Selecting Specific Properties",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id).as('docId'),\n    SelectResult.expression(Expression.property('id')),\n    SelectResult.expression(Expression.property('type')),\n    SelectResult.expression(Expression.property('name')),\n  )\n  .from(DataSource.collection(collection));\n"))),(0,l.kt)("h3",{id:"result-set-format-1"},"Result Set Format"),(0,l.kt)("p",null,"The result set returned when selecting only specific document properties\ncontains dictionaries \u2014\u2009one for each document matching the query criteria."),(0,l.kt)("p",null,"Each result comprises a key-value pair for each selected document property \u2014\u2009see\n",(0,l.kt)("a",{parentName:"p",href:"#example-5"},"Example 5"),"."),(0,l.kt)(c,{id:5,title:"Format of Result Set (Specific Properties)",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "docId": "XjO9Ohk96F",\n    "id": "hotel123",\n    "type": "hotel",\n    "name": "Hotel Ghia"\n  },\n  {\n    "docId": "w2DCGPJ-0m",\n    "id": "hotel456",\n    "type": "hotel",\n    "name": "Hotel Deluxe"\n  }\n]\n'))),(0,l.kt)("h3",{id:"result-set-access-1"},"Result Set Access"),(0,l.kt)("p",null,"Access the retrieved properties by looking them up in each result \u2014 as shown in\n",(0,l.kt)("a",{parentName:"p",href:"#example-6"},"Example 6"),"."),(0,l.kt)(c,{id:6,title:"Using Returned Document Properties (Specific Properties)",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final resultSet = await query.execute();\nawait for (final result in await resultSet.asStream()) {\n  final docId = result.string('docId')!;\n  print('processing doc: $docId');\n\n  final id = result.string('id')!;\n  final hotel = Hotel(id);\n  hotel.type = result.string('type')!;\n  hotel.name = result.string('name')!;\n  Do something with the hotel...\n}\n"))),(0,l.kt)("h2",{id:"select-document-id-only"},"Select Document ID Only"),(0,l.kt)("h3",{id:"query-2"},"Query"),(0,l.kt)("p",null,"You would typically use this type of query if retrieval of document properties\ndirectly would consume excessive amounts of memory and-or processing time \u2014\u2009see:\n",(0,l.kt)("a",{parentName:"p",href:"#example-7"},"Example 7"),"."),(0,l.kt)(c,{id:7,title:"Query Selecting Only Document ID",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = QueryBuilder.createAsync()\n  .select(SelectResult.expression(Meta.id))\n  .from(DataSource.collection(collection));\n"))),(0,l.kt)("h3",{id:"result-set-format-2"},"Result Set Format"),(0,l.kt)("p",null,"The result set returned by queries using a ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,l.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expression of the\nform ",(0,l.kt)("inlineCode",{parentName:"p"},"SelectResult.expression(Meta.id)")," contains dictionaries \u2014\u2009one for each\ndocument matching the query criteria. Each result contains the ID under the ",(0,l.kt)("inlineCode",{parentName:"p"},"id"),"\nkey \u2014\u2009see ",(0,l.kt)("a",{parentName:"p",href:"#example-8"},"Example 8"),"."),(0,l.kt)(c,{id:8,title:"Format of Result Set (Document ID Only)",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "hotel123"\n  },\n  {\n    "id": "hotel456"\n  }\n]\n'))),(0,l.kt)("h3",{id:"result-set-access-2"},"Result Set Access"),(0,l.kt)("p",null,"In this case, access the properties of a document by unpacking the id and using\nit to get the document from the database \u2014\u2009see: ",(0,l.kt)("a",{parentName:"p",href:"#example-9"},"Example 9"),"."),(0,l.kt)(c,{id:9,title:"Using Returned Document Properties (Document ID)",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final resultSet = await query.execute();\nawait for (final result in resultSet.asStream()) {\n  final docId = result.string('docId');\n  print('processing doc: $docId');\n\n  final doc = (await database.document(docId))!;\n  final hotelId = doc.string('id');\n  final name = doc.string('name');\n  final city = doc.string('city');\n  final type = doc.string('type');\n  Do something with the variables...\n}\n"))),(0,l.kt)("h2",{id:"select-count-only"},"Select Count Only"),(0,l.kt)("h3",{id:"query-3"},"Query"),(0,l.kt)(c,{id:10,title:"Query Selecting a Count Only",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(SelectResult.expression(Function_.count(Expression.all())).as('count'))\n  .from(DataSource.collection(collection))\n  .groupBy(Expression.property('type'));\n"))),(0,l.kt)("h3",{id:"result-set-format-3"},"Result Set Format"),(0,l.kt)("p",null,"The result set returned by a count such as\n",(0,l.kt)("inlineCode",{parentName:"p"},"SelectResult.expression(Function_.count(Expression.all())).as('count')"),"\ncontains dictionaries with a key-value pair. The key is the count name, as\ndefined using ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResultAs/as.html"},(0,l.kt)("inlineCode",{parentName:"a"},"SelectResultAs.as"))," \u2014\u2009see: ",(0,l.kt)("a",{parentName:"p",href:"#example-11"},"Example 11")," for the format and\n",(0,l.kt)("a",{parentName:"p",href:"#example-10"},"Example 10")," for the query."),(0,l.kt)(c,{id:11,title:"Format of Result Set (Count)",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "count": 6\n}\n'))),(0,l.kt)("h3",{id:"result-set-access-3"},"Result Set Access"),(0,l.kt)("p",null,'Access the count using its alias name ("count" in this example) \u2014\u2009see\n',(0,l.kt)("a",{parentName:"p",href:"#example-12"},"Example 12"),"."),(0,l.kt)(c,{id:12,title:"Using Returned Aggregate Value (Count)",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final resultSet = await query.execute();\nfinal results = await resultSet.allResults();\nfinal result = results.first;\nfinal count = result.integer('count');\nprint(\"There are $count documents.\");\n"))),(0,l.kt)("h2",{id:"handling-pagination"},"Handling Pagination"),(0,l.kt)("p",null,"One way to handle pagination in high-volume queries is to retrieve the results\nin batches. Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"LIMIT")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"OFFSET")," clauses to return a defined number of\nresults starting from a given offset \u2014\u2009see: ",(0,l.kt)("a",{parentName:"p",href:"#example-13"},"Example 13"),"."),(0,l.kt)(c,{id:13,title:"Query Pagination",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"const offset = 0;\nconst limit = 20;\n\nfinal database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n .select(SelectResult.all())\n .from(DataSource.collection(collection))\n .limit(\n    Expression.integer(limit),\n    offset: Expression.integer(offset),\n  );\n"))),(0,l.kt)("h2",{id:"json-result-sets"},"JSON Result Sets"),(0,l.kt)("p",null,"Couchbase Lite for Dart provides a convenience API to convert query results to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Plain Dart objects through ",(0,l.kt)("inlineCode",{parentName:"li"},"toPlainMap")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"toPlainList")," on ",(0,l.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Result-class.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Result")),"."),(0,l.kt)("li",{parentName:"ul"},"JSON strings through ",(0,l.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Result/toJson.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Result.toJson")),".")),(0,l.kt)("h3",{id:"convert-result-to-model"},"Convert Result to Model"),(0,l.kt)("p",null,"In Dart/Flutter you can use code generators to auto generate the code for\nhanding serialization. See\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/development/data-and-backend/json#serializing-json-using-code-generation-libraries"},"Creating model classes the json serializable way"),"\nfor more information. The example below shows how this can be done using the\nclass ",(0,l.kt)("inlineCode",{parentName:"p"},"Hotel")," with methods generated from the code generators. Also note when\nupdating your model classes you will be required to run this command from the\nterminal to update your code generated classes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"flutter pub run build_runner build --delete-conflicting-outputs\n")),(0,l.kt)(c,{id:14,title:"Convert Result to Model",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"// hotel.dart\n\npart 'hotel.g.dart';\n\n@JsonSerializable(explicitToJson: true)\nclass Hotel {\n  const Hotel({\n    required this.id,\n    required this.name,\n    required this.city,\n    required this.country,\n    this.description,\n  });\n\n  String id;\n  String type;\n  String name;\n  String city;\n  String country;\n  String? description;\n\n  factory Hotel.fromJson(Map<String, Object?> json) => _$HotelFromJson(json);\n\n  Map<String, Object?> toJson() => _$HotelToJson(this);\n}\n\n@JsonSerializable(explicitToJson: true)\nclass HotelDao {\n const HotelDao(this.hotel);\n\n final Hotel hotel;\n\n factory HotelDao.fromJson(Map<String, Object?> json) =>\n     _$HotelDaoFromJson(json);\n\n  Map<String, Object?> toJson() => _$HotelDaoToJson(this);\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n .select(SelectResult.all().as('hotel'))\n .from(DataSource.collection(collection));\n\nfinal resultSet = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  final map = result.toPlainMap();\n  final hotelDao = HotelDao.fromJson(map);\n  final hotel = hotelDao.hotel;\n  // Do something with the hotel...\n}\n"))),(0,l.kt)("h3",{id:"json-string-format"},"JSON String Format"),(0,l.kt)("p",null,"If your query selects all properties then the JSON format returned by\n",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Result/toJson.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Result.toJson"))," will be:"),(0,l.kt)(c,{id:15,title:"JSON Format for Select All",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "collection-name": {\n    "key1": "value1",\n    "keyx": "valuex"\n  }\n}\n'))),(0,l.kt)("p",null,"If your query selects a sub-set of available properties then the JSON format\nreturned by ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Result/toJson.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Result.toJson"))," will be:"),(0,l.kt)(c,{id:16,title:"JSON Format for Select Specific Properties",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key1": "value1",\n  "keyx": "valuex"\n}\n'))))}h.isMDXComponent=!0}}]);