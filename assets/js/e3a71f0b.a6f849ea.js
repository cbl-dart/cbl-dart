"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[176],{8286:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"typed-data","title":"Typed Data","description":"How to Access Strongly Typed Data in a Type Safe Manner","source":"@site/docs/typed-data.mdx","sourceDirName":".","slug":"/typed-data","permalink":"/typed-data","draft":false,"unlisted":false,"editUrl":"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/typed-data.mdx","tags":[],"version":"current","frontMatter":{"description":"How to Access Strongly Typed Data in a Type Safe Manner"},"sidebar":"sidebar","previous":{"title":"Indexes","permalink":"/indexing"},"next":{"title":"Usage Examples","permalink":"/usage-examples"}}');var s=n(4848),r=n(8453);const d={description:"How to Access Strongly Typed Data in a Type Safe Manner"},i="Typed Data",c={},l=[{value:"Getting started",id:"getting-started",level:2}];function o(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{MetaHeader:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("MetaHeader",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.header,{children:[(0,s.jsx)(t.h1,{id:"typed-data",children:"Typed Data"}),(0,s.jsx)(n,{})]}),"\n",(0,s.jsx)(t.admonition,{type:"caution",children:(0,s.jsxs)(t.p,{children:["The typed data API is ",(0,s.jsx)(t.strong,{children:"experimental"})," and might be missing some feature that\nyou need. Please file an ",(0,s.jsx)(t.a,{href:"https://github.com/cbl-dart/cbl-dart/issues",children:"issue"})," if you find a bug or have a feature\nrequest."]})}),"\n",(0,s.jsx)(t.p,{children:"Couchbase Lite allows dynamic access to data without a fixed data model, not\nrequiring any code generation. This is useful when the data is very dynamic or\ncode generation is undesirable."}),"\n",(0,s.jsx)(t.p,{children:"Often though, the data is known to have a regular structure, and accessing it\nthrough a typed Dart API makes working with it easier and safer."}),"\n",(0,s.jsxs)(t.p,{children:["With the help of the ",(0,s.jsx)(t.a,{href:"https://pub.dev/documentation/cbl_generator/latest/index.html",children:(0,s.jsx)(t.code,{children:"cbl_generator"})})," package you can quickly create\nDart classes that can be used to access data in a typed way. Theses classes can\nbe used with specialized APIs of ",(0,s.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Database-class.html",children:(0,s.jsx)(t.code,{children:"Database"})}),", ",(0,s.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Query-class.html",children:(0,s.jsx)(t.code,{children:"Query"})})," and\n",(0,s.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Replicator-class.html",children:(0,s.jsx)(t.code,{children:"Replicator"})}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Make sure your ",(0,s.jsx)(t.a,{href:"/install",children:"app is setup"})," for using Couchbase Lite."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Add ",(0,s.jsx)(t.a,{href:"https://pub.dev/documentation/cbl_generator/latest/index.html",children:(0,s.jsx)(t.code,{children:"cbl_generator"})})," and ",(0,s.jsx)(t.a,{href:"https://pub.dev/documentation/build_runner/latest/index.html",children:(0,s.jsx)(t.code,{children:"build_runner"})})," as development\ndependencies:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"flutter pub add --dev cbl_generator build_runner\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Create typed data classes and annotated them with ",(0,s.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/TypedDocument-class.html",children:(0,s.jsx)(t.code,{children:"TypedDocument"})})," and\n",(0,s.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/TypedDictionary-class.html",children:(0,s.jsx)(t.code,{children:"TypedDictionary"})}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-dart",children:"// user.dart\n\nimport 'package:cbl/cbl.dart';\n\n// Declare the part file into which the generated code will be written.\npart 'user.cbl.type.g.dart';\n\n// Per default the type of a document is encoded in the `type` property in\n// the underlying data. The value is a string that is the name of the annotated\n// class. This can be customized by setting `TypedDocument.typeMatcher`.\n@TypedDocument()\nabstract class User with _$User {\n  factory User({\n    @DocumentId() String? id,\n    required PersonalName name,\n    String? email,\n    required String username,\n    required DateTime createdAt,\n  }) = MutableUser;\n}\n\n@TypedDictionary()\nabstract class PersonalName with _$PersonalName {\n  factory PersonalName({\n    required String first,\n    required String last,\n  }) = MutablePersonalName;\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Create a typed database by annotating a class with ",(0,s.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/TypedDatabase-class.html",children:(0,s.jsx)(t.code,{children:"TypedDatabase"})}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-dart",children:"// app_database.dart\n\nimport 'package:cbl/cbl.dart';\n\nimport 'user.dart';\n\n@TypedDatabase(\n  // List all the typed data classes that will be used in the database.\n  types: {\n    User,\n    PersonalName,\n  },\n)\nabstract class $AppDatabase {}\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Run the build runner to invoke the generator:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"dart run build_runner build\n# or\nflutter run build_runner build\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Open an instance of the typed database and use it:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-dart",children:"import 'app_database.cbl.database.g.dart';\nimport 'user.dart';\n\nFuture<void> useTypedDatabase() {\n  // Use a static method on the generated typed database class to open an instance.\n  final db = await AppDatabase.openAsync('app');\n\n  // Every typed data class has a mutable and immutable variant. The mutable\n  // class has the same name as the immutable class, but with the `Mutable`\n  // suffix. A mutable instance can be created by constructing it, or from\n  // an immutable instance, through the `toMutable` method.\n  final user = MutableUser(\n    name: PersonalName(first: 'Alice', last: 'Green'),\n    email: 'alice@green.com',\n    username: 'ali',\n    createdAt: DateTime.now(),\n  );\n\n  // The API to save typed documents is slightly different than the API to\n  // save plain documents. `saveTypedDocument` returns an object that has methods\n  // for saving the document with conflict resolution through concurrency control or\n  // a custom conflict handler.\n  await database.saveTypedDocument(user).withConcurrencyControl();\n\n  // To retrieve a typed document, use the `typedDocument` method and pass it the\n  // type of the requested document through the type parameter.\n  final savedUser = await database.typedDocument<User>(user.id);\n}\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>i});var a=n(6540);const s={},r=a.createContext(s);function d(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);