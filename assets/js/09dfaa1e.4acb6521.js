"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[19],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),b=c(n),u=r,m=b["".concat(s,".").concat(u)]||b[u]||p[u]||o;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},8835:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={description:"Couchbase Lite Concepts \u2014 Data Model \u2014 Blobs",related_content:[{name:"Databases",url:"/databases"},{name:"Documents",url:"/documents"}]},i="Blobs",l={unversionedId:"blobs",id:"blobs",title:"Blobs",description:"Couchbase Lite Concepts \u2014 Data Model \u2014 Blobs",source:"@site/docs/blobs.mdx",sourceDirName:".",slug:"/blobs",permalink:"/blobs",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/blobs.mdx",tags:[],version:"current",frontMatter:{description:"Couchbase Lite Concepts \u2014 Data Model \u2014 Blobs",related_content:[{name:"Databases",url:"/databases"},{name:"Documents",url:"/documents"}]},sidebar:"sidebar",previous:{title:"Documents",permalink:"/documents"},next:{title:"Typed Data",permalink:"/typed-data"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Blob Objects",id:"blob-objects",level:2},{value:"Constraints",id:"constraints",level:3},{value:"Using Blobs",id:"using-blobs",level:2},{value:"Syncing",id:"syncing",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},p=d("CodeExample"),b=d("Figure"),u={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"blobs"},"Blobs"),(0,r.kt)("metaheader",null),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Couchbase Lite for Dart uses blobs to store the contents of images, other media\nfiles and similar format files as binary objects."),(0,r.kt)("p",null,"The blob itself is not stored in the document. It is held in a separate\ncontent-addressable store indexed from the document and retrieved only\non-demand."),(0,r.kt)("p",null,"When a document is synchronized, the Couchbase Lite replicator adds an\n",(0,r.kt)("inlineCode",{parentName:"p"},"_attachments")," dictionary to the document's properties if it contains a blob\n\u2014\u2009see ",(0,r.kt)("a",{parentName:"p",href:"#figure-1"},"Figure 1"),"."),(0,r.kt)("h2",{id:"blob-objects"},"Blob Objects"),(0,r.kt)("p",null,"The blob as an object appears in a document as dictionary property \u2014\u2009see, for\nexample ",(0,r.kt)("em",{parentName:"p"},"avatar")," in ",(0,r.kt)("a",{parentName:"p",href:"#figure-1"},"Figure 1"),"."),(0,r.kt)("p",null,"Other properties include ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," (the length in bytes), and optionally\n",(0,r.kt)("inlineCode",{parentName:"p"},"content_type")," (typically, its MIME type)."),(0,r.kt)("p",null,"The blob's data (an image, audio or video content) is not stored in the\ndocument, but in a separate content-addressable store, indexed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"digest"),"\nproperty \u2014\u2009see ",(0,r.kt)("a",{parentName:"p",href:"#using-blobs"},"Using Blobs"),"."),(0,r.kt)("h3",{id:"constraints"},"Constraints"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Couchbase Lite ",(0,r.kt)("br",null)," Blobs can be arbitrarily large. They are only read on\ndemand, not when you load a the document.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Capella App Services/Sync Gateway ",(0,r.kt)("br",null)," The maximum content size is 20 MB per\nblob. If a document's blob is over 20 MB, the document will be replicated but\nnot the blob."))),(0,r.kt)("h2",{id:"using-blobs"},"Using Blobs"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Blob-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Blob"))," API lets you access the blob's data content as in-memory data\n(",(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-typed_data/Uint8List-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Uint8List")),") or as a ",(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-async/Stream-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Stream"))," of\n",(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-typed_data/Uint8List-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Uint8List")),"s."),(0,r.kt)("p",null,"The code in ",(0,r.kt)("a",{parentName:"p",href:"#example-1"},"Example 1")," shows how you might add a blob to a document and save\nit to the database. Here we use avatar as the property key and a jpeg file as\nthe blob data."),(0,r.kt)(p,{id:1,title:"Working with Blobs",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final data = getAsset('avatar.jpg');\nif (data == null) { return; }\n\nfinal blob = Blob.fromData('image/jpeg', data);\ndoc.setBlob(blob, key: 'avatar');\nawait database.saveDocument(doc);\n\nfinal image = doc.blob('avatar');\n"))),(0,r.kt)("h2",{id:"syncing"},"Syncing"),(0,r.kt)("p",null,"When a document containing a blob object is synchronized, the Couchbase Lite\nreplicator generates an ",(0,r.kt)("inlineCode",{parentName:"p"},"_attachments")," dictionary with an auto-generated name\nfor each blob attachment. This is different to the ",(0,r.kt)("inlineCode",{parentName:"p"},"avatar")," key and is used\ninternally to access the blob content."),(0,r.kt)("p",null,"If you view a sync'd blob document in either Capella's Admin Interface or\nCouchbase Server's Admin Console, you will see something similar to\n",(0,r.kt)("a",{parentName:"p",href:"#figure-1"},"Figure 1"),", which shows the document with its generated ",(0,r.kt)("inlineCode",{parentName:"p"},"_attachments"),"\ndictionary, including the digest."),(0,r.kt)(b,{id:1,title:"Sample Blob Document",mdxType:"Figure"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_attachments": {\n    "blob_1": {\n      "content_type": "image/jpeg",\n      "digest": "sha1-F1Tfe61RZP4zC9UYT6JFmLTh2s8=",\n      "length": 8112955,\n      "revpos": 2,\n      "stub": true\n    }\n  },\n  "avatar": {\n    "@type": "blob",\n    "content_type": "image/jpeg",\n    "digest": "sha1-F1Tfe61RZP4zC9UYT6JFmLTh2s8=",\n    "length": 8112955\n  }\n}\n'))))}m.isMDXComponent=!0}}]);