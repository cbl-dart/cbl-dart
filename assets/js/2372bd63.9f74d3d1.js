"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[213],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>k,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={description:"How to use QueryBuilder to build effective queries with Couchbase Lite for Dart",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"Live Queries",url:"/queries/live-queries"},{name:"Indexes",url:"/indexing"},{name:"Result Sets",url:"/queries/query-result-sets"}]},l="QueryBuilder",o={unversionedId:"queries/query-builder",id:"queries/query-builder",title:"QueryBuilder",description:"How to use QueryBuilder to build effective queries with Couchbase Lite for Dart",source:"@site/docs/queries/query-builder.mdx",sourceDirName:"queries",slug:"/queries/query-builder",permalink:"/queries/query-builder",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/queries/query-builder.mdx",tags:[],version:"current",frontMatter:{description:"How to use QueryBuilder to build effective queries with Couchbase Lite for Dart",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"Live Queries",url:"/queries/live-queries"},{name:"Indexes",url:"/indexing"},{name:"Result Sets",url:"/queries/query-result-sets"}]},sidebar:"sidebar",previous:{title:"Blobs",permalink:"/blobs"},next:{title:"SQL++ for Mobile",permalink:"/queries/sqlplusplus-mobile"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Indexing",id:"indexing",level:2},{value:"SELECT Clause",id:"select-clause",level:2},{value:"Return All Properties",id:"return-all-properties",level:3},{value:"Return Selected Properties",id:"return-selected-properties",level:3},{value:"WHERE Clause",id:"where-clause",level:2},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Collection Operators",id:"collection-operators",level:3},{value:"CONTAINS Operator",id:"contains-operator",level:3},{value:"IN Operator",id:"in-operator",level:3},{value:"LIKE Operator",id:"like-operator",level:3},{value:"String matching",id:"string-matching",level:4},{value:"Wildcard Match",id:"wildcard-match",level:4},{value:"Wildcard Character Match",id:"wildcard-character-match",level:4},{value:"REGEX Operator",id:"regex-operator",level:3},{value:"Deleted Document",id:"deleted-document",level:3},{value:"JOIN Clause",id:"join-clause",level:2},{value:"GROUP BY Clause",id:"group-by-clause",level:2},{value:"ORDER BY Clause",id:"order-by-clause",level:2},{value:"Date/Time Functions",id:"datetime-functions",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=u("CodeExample"),d=u("Figure"),m={toc:p},h="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"querybuilder"},"QueryBuilder"),(0,a.kt)("metaheader",null),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Couchbase Lite for Dart provides two ways to build and run database queries; the\n",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/QueryBuilder-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"QueryBuilder"))," API described in this topic and\n",(0,a.kt)("a",{parentName:"p",href:"/queries/sqlplusplus-mobile"},"SQL++ for Mobile"),"."),(0,a.kt)("p",null,"Database queries defined with the ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/QueryBuilder-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"QueryBuilder"))," API use query statements of\nthe form shown in ",(0,a.kt)("a",{parentName:"p",href:"#example-1"},"Example 1"),". The structure and semantics of the query\nformat are based on that of Couchbase's SQL++ query language."),(0,a.kt)(c,{id:1,title:"Query Format",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ____\nFROM ____\nJOIN ____\nWHERE ____\nGROUP BY ____\nORDER BY ____\n"))),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("a",{parentName:"li",href:"#select-clause"},(0,a.kt)("inlineCode",{parentName:"a"},"SELECT")," clause")," specifies the data to be returned by\nthe query."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"FROM")," clause specifies the collection to query the documents from."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("a",{parentName:"li",href:"#join-clause"},(0,a.kt)("inlineCode",{parentName:"a"},"JOIN")," clause")," specifies the criteria for joining multiple\ndocuments."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("a",{parentName:"li",href:"#where-clause"},(0,a.kt)("inlineCode",{parentName:"a"},"WHERE")," clause")," specifies the query criteria. ",(0,a.kt)("br",null)," The\n",(0,a.kt)("inlineCode",{parentName:"li"},"SELECT"),"ed properties of documents matching this criteria will be returned in\nthe result set."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("a",{parentName:"li",href:"#group-by-clause"},(0,a.kt)("inlineCode",{parentName:"a"},"GROUP BY")," clause")," specifies the criteria used to\ngroup returned items in the result set."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("a",{parentName:"li",href:"#order-by-clause"},(0,a.kt)("inlineCode",{parentName:"a"},"ORDER BY")," clause")," specifies the criteria used to\norder the items in the result set.")),(0,a.kt)("h2",{id:"indexing"},"Indexing"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"See the ",(0,a.kt)("a",{parentName:"p",href:"/indexing"},"Indexing")," topic to learn more about indexing.")),(0,a.kt)("p",null,"Before we begin querying documents, let's briefly mention the importance of\nhaving a query index. A query can only be fast if there's a pre-existing\ndatabase index it can search to narrow down the set of documents to examine\n\u2014\u2009see: ",(0,a.kt)("a",{parentName:"p",href:"#example-2"},"Example 2"),", which shows how to create an index, and also the\n",(0,a.kt)("a",{parentName:"p",href:"/queries/query-troubleshooting"},"Query Troubleshooting")," topic."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Every index has to be updated whenever a document is updated. So many indexes\ncould hurt write performance."),(0,a.kt)("p",{parentName:"admonition"},"Good performance depends on designing and creating the ",(0,a.kt)("em",{parentName:"p"},"right")," indexes to go\nalong with your queries.")),(0,a.kt)(c,{id:2,title:"Creating a New Index",mdxType:"CodeExample"},(0,a.kt)("p",null,"This example creates a new index for the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," properties in the\nData Model."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final config = ValueIndexConfiguration(['type', 'name']);\nawait collection.createIndex('TypeNameIndex', config);\n")),(0,a.kt)(d,{id:1,title:"Data Model",mdxType:"Figure"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "hotel123",\n    "type": "hotel",\n    "name": "Hotel Ghia"\n  },\n  {\n    "id": "hotel456",\n    "type": "hotel",\n    "name": "Hotel Deluxe"\n  }\n]\n')))),(0,a.kt)("h2",{id:"select-clause"},"SELECT Clause"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"SELECT")," clause to specify which properties you want to return from the\nqueried documents. You can opt to retrieve entire documents, or just the\nspecific properties you need."),(0,a.kt)("h3",{id:"return-all-properties"},"Return All Properties"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult/all.html"},(0,a.kt)("inlineCode",{parentName:"a"},"SelectResult.all()"))," method to return the properties of selected\ndocuments - see ",(0,a.kt)("a",{parentName:"p",href:"#example-3"},"Example 3"),"."),(0,a.kt)(c,{id:3,title:"Using SELECT to Retrieve All Properties",mdxType:"CodeExample"},(0,a.kt)("p",null,"This query shows how to retrieve all properties from all documents in your\ndatabase."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n    .select(SelectResult.all())\n    .from(DataSource.collection(collection).as('airline'));\n"))),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/execute.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Query.execute()"))," method returns each result as dictionary where they\nkey is the collection name, or the alias provided to the as function."),(0,a.kt)(c,{id:4,title:"ResultSet fFrmat From SelectResult.all()",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "airline": {\n      "callsign": "MILE-AIR",\n      "country": "United States",\n      "iata": "Q5",\n      "icao": "MLA",\n      "id": 10,\n      "name": "40-Mile Air",\n      "type": "airline"\n    }\n  },\n  {\n    "airline": {\n      "callsign": "ALASKAN-AIR",\n      "country": "United States",\n      "iata": "AA",\n      "icao": "AAA",\n      "id": 10,\n      "name": "Alaskan Airways",\n      "type": "airline"\n    }\n  }\n]\n'))),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/queries/query-result-sets"},"Result Sets")," for more on processing query results."),(0,a.kt)("h3",{id:"return-selected-properties"},"Return Selected Properties"),(0,a.kt)("p",null,"To access only specific properties, specify a comma separated list of\n",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expressions, one for each property, in the ",(0,a.kt)("inlineCode",{parentName:"p"},"SELECT")," clause of\nyour query \u2014\u2009see: ",(0,a.kt)("a",{parentName:"p",href:"#example-5"},"Example 5"),"."),(0,a.kt)(c,{id:5,title:"Using SELECT to Retrieve Specific Properties",mdxType:"CodeExample"},(0,a.kt)("p",null,"In this query we retrieve and then print the ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),"and",(0,a.kt)("inlineCode",{parentName:"p"},"name")," properties of\neach document."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('type'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.collection(collection));\n\nfinal resultSet = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  print('id: ${result.string('id')}');\n  print('name: ${result.string('name')}');\n}\n"))),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/execute.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Query.execute()"))," method returns each result as a dictionary with one or\nmore key-value pairs, one for each ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expression, with the\nproperty-name as the key \u2014\u2009see ",(0,a.kt)("a",{parentName:"p",href:"#example-6"},"Example 6"),"."),(0,a.kt)(c,{id:6,title:"Select Result Format",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "hotel123",\n    "type": "hotel",\n    "name": "Hotel Ghia"\n  },\n  {\n    "id": "hotel456",\n    "type": "hotel",\n    "name": "Hotel Deluxe"\n  }\n]\n'))),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/queries/query-result-sets"},"Result Sets")," for more on processing query results."),(0,a.kt)("h2",{id:"where-clause"},"WHERE Clause"),(0,a.kt)("p",null,"Like in SQL, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to choose which documents are\nincluded by your query. The ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause takes an ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Expression-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Expression")),". You can\nchain any number of ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Expression-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Expression")),"s in order to implement sophisticated\nfiltering capabilities."),(0,a.kt)("h3",{id:"comparison-operators"},"Comparison Operators"),(0,a.kt)("p",null,"The expression comparators (see ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/ExpressionInterface-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"ExpressionInterface")),") can be used in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to specify on which property to match documents. In the example\nbelow, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"equalTo"),' operator to query documents where the type property\nequals "hotel".'),(0,a.kt)(c,{id:7,title:"Using WHERE",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.collection(collection))\n  .where(Expression.property('type').equalTo(Expression.string('hotel')))\n  .limit(Expression.integer(10));\n\nfinal resultSet = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  print('name: ${result.string('name')}');\n}\n"))),(0,a.kt)("h3",{id:"collection-operators"},"Collection Operators"),(0,a.kt)("p",null,"Array collection operators (see ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/ArrayExpression-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"ArrayExpression")),") are useful to check if a\ngiven value is present in an array through the ",(0,a.kt)("inlineCode",{parentName:"p"},"any"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"every")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"anyAndEvery"),"\noperators."),(0,a.kt)("h3",{id:"contains-operator"},"CONTAINS Operator"),(0,a.kt)("p",null,"The following example uses the ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/ArrayFunction-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"ArrayFunction"))," to find documents where the\n",(0,a.kt)("inlineCode",{parentName:"p"},"public_likes"),' array property contains a value equal to "Armani Langworth".'),(0,a.kt)(c,{id:8,title:"Using ArrayFunction.contains()",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": "hotel123",\n  "name": "Apple Droid",\n  "public_likes": ["Armani Langworth", "Elfrieda Gutkowski", "Maureen Ruecker"]\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('name'),\n    SelectResult.property('public_likes'),\n  )\n  .from(DataSource.collection(collection))\n  .where(\n    Expression.property('type').equalTo(Expression.string('hotel'))\n      .and(\n        ArrayFunction.contains(\n          Expression.property('public_likes'),\n          value: Expression.string('Armani Langworth'),\n        ),\n      ),\n  )\n  .limit(Expression.integer(10));\n\nfinal result = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  print('name: ${result.string('name')}');\n}\n"))),(0,a.kt)("h3",{id:"in-operator"},"IN Operator"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"IN"),' operator is useful when you need to explicitly list out the values to\ntest against. The following example looks for documents whose first, last or\nusername property value equals "Armani".'),(0,a.kt)(c,{id:9,title:"IN Operator",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.collection(collection))\n  .where(Expression.string('Armani').in_([\n    Expression.property('first'),\n    Expression.property('last'),\n    Expression.property('username'),\n  ]));\n"))),(0,a.kt)("h3",{id:"like-operator"},"LIKE Operator"),(0,a.kt)("h4",{id:"string-matching"},"String matching"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"LIKE")," operator can be used for string matching \u2014\u2009see ",(0,a.kt)("a",{parentName:"p",href:"#example-10"},"Example 10"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"LIKE")," operator performs ",(0,a.kt)("strong",{parentName:"p"},"case sensitive")," matches. ",(0,a.kt)("br",null)," To perform case\ninsensitive matching, use ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.lower"))," or ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/upper.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.upper"))," to\nensure all comparators have the same case, thereby removing the case issue.")),(0,a.kt)("p",null,"This query returns ",(0,a.kt)("inlineCode",{parentName:"p"},"landmark"),' type documents where the name matches the string\n"Royal Engineers Museum", regardless of how it is capitalized (so, it selects\n"royal engineers museum", "ROYAL ENGINEERS MUSEUM" and so on).'),(0,a.kt)(c,{id:10,title:"Like with Case-Insensitive Matching",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('country'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.collection(collection))\n  .where(\n    Expression.property('type').equalTo(Expression.string('landmark'))\n      .and(\n        Function_.lower(Expression.property('name'))\n          .like(Expression.string('royal engineers museum')),\n      ),\n  )\n  .limit(Expression.integer(10));\n"))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Note the use of ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.lower"))," to transform name values to the same case\nas the literal comparator.")),(0,a.kt)("h4",{id:"wildcard-match"},"Wildcard Match"),(0,a.kt)("p",null,"We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"%")," sign within a ",(0,a.kt)("inlineCode",{parentName:"p"},"LIKE")," expression to do a wildcard match against\nzero or more characters. Using wildcards allows you to have some fuzziness in\nyour search string."),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"#example-11"},"Example 11")," below, we are looking for documents of ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),' "landmark"\nwhere the ',(0,a.kt)("inlineCode",{parentName:"p"},"name"),' property matches any string that begins with "eng" followed by\nzero or more characters, the letter "e", followed by zero or more characters.\nOnce again, we are using ',(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.lower"))," to make the search case\ninsensitive."),(0,a.kt)("p",null,'So, "landmark" documents with names such as "Engineers", "engine", "english egg"\nand "England Eagle" will match. Notice that the matches may span word\nboundaries.'),(0,a.kt)(c,{id:11,title:"Wildcard Matches",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('country'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.collection(collection))\n  .where(\n    Expression.property('type').equalTo(Expression.string('landmark'))\n      .and(\n        Function_.lower(Expression.property('name'))\n          .like(Expression.string('eng%e%')),\n      ),\n  )\n  .limit(Expression.integer(10));\n"))),(0,a.kt)("h4",{id:"wildcard-character-match"},"Wildcard Character Match"),(0,a.kt)("p",null,"We can use an ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," sign within a ",(0,a.kt)("inlineCode",{parentName:"p"},"LIKE")," expression to do a wildcard match against\na single character."),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"#example-12"},"Example 12")," below, we are looking for documents of ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),' "landmark"\nwhere the ',(0,a.kt)("inlineCode",{parentName:"p"},"name"),' property matches any string that begins with "eng" followed by\nexactly 4 wildcard characters and ending in the letter "r". The query returns\n"landmark" type documents with names such as "Engineer", "engineer" and so on.'),(0,a.kt)(c,{id:12,title:"Wildcard Character Matching",mdxType:"CodeExample"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('country'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.collection(collection))\n  .where(\n    Expression.property('type').equalTo(Expression.string('landmark'))\n      .and(\n        Function_.lower(Expression.property('name'))\n          .like(Expression.string('eng___r')),\n      ),\n  )\n  .limit(Expression.integer(10));\n"))),(0,a.kt)("h3",{id:"regex-operator"},"REGEX Operator"),(0,a.kt)("p",null,"Similar to the wildcards in ",(0,a.kt)("inlineCode",{parentName:"p"},"LIKE")," expressions, ",(0,a.kt)("inlineCode",{parentName:"p"},"REGEX")," based pattern matching\nallows you to introduce an element of fuzziness in your search string \u2014\u2009see the\ncode shown in ",(0,a.kt)("a",{parentName:"p",href:"#example-13"},"Example 13"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"REGEX")," operator is case sensitive, use ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/upper.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.upper"))," or\n",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.lower"))," functions to mitigate this if required.")),(0,a.kt)(c,{id:13,title:"Using Regular Expressions",mdxType:"CodeExample"},(0,a.kt)("p",null,"This example returns documents with a ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),' of "landmark" and a ',(0,a.kt)("inlineCode",{parentName:"p"},"name"),' property\nthat matches any string that begins with "eng" and ends in the letter "e".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('country'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.collection(collection))\n  .where(\n    Expression.property('type').equalTo(Expression.string('landmark'))\n      .and(\n        Function_.lower(Expression.property('name'))\n          .regex(Expression.string('\\\\bEng.*e\\\\b')),\n      ),\n  )\n  .limit(Expression.integer(10));\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"\\b")," specifies that the match must occur on word boundaries."))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"For more on the regex spec used by Couchbase Lite see\n",(0,a.kt)("a",{parentName:"p",href:"https://cplusplus.com/reference/regex/ECMAScript/"},"cplusplus regex reference page"),".")),(0,a.kt)("h3",{id:"deleted-document"},"Deleted Document"),(0,a.kt)("p",null,"You can query documents that have been deleted (tombstones) as shown in\n",(0,a.kt)("a",{parentName:"p",href:"#example-14"},"Example 14"),"."),(0,a.kt)(c,{id:14,title:"Query to Select Deleted Documents",mdxType:"CodeExample"},(0,a.kt)("p",null,"This example shows how to query deleted documents in the database. It returns is\nan array of key-value pairs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(SelectResult.expression(Meta.id))\n  .from(DataSource.collection(collection))\n  .where(Meta.isDeleted);\n"))),(0,a.kt)("h2",{id:"join-clause"},"JOIN Clause"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"JOIN")," clause enables you to select data from multiple documents that have\nbeen linked by criteria specified in the ",(0,a.kt)("inlineCode",{parentName:"p"},"JOIN")," clause. For example to combine\nairline details with route details, linked by the airline ID \u2014\u2009see\n",(0,a.kt)("a",{parentName:"p",href:"#example-15"},"Example 15"),"."),(0,a.kt)(c,{id:15,title:"Using JOIN to Combine Document Details",mdxType:"CodeExample"},(0,a.kt)("p",null,"This example JOINS documents from collection ",(0,a.kt)("inlineCode",{parentName:"p"},"routes")," with documents from\ncollection ",(0,a.kt)("inlineCode",{parentName:"p"},"airlines")," using the document ID (",(0,a.kt)("inlineCode",{parentName:"p"},"id"),") on the ",(0,a.kt)("em",{parentName:"p"},"airline")," document and\n",(0,a.kt)("inlineCode",{parentName:"p"},"airlineid")," on the ",(0,a.kt)("em",{parentName:"p"},"route")," document."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final airlines = (await database.collection('airlines'))!;\nfinal routes = (await database.collection('routes'))!;\n\nfinal query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Expression.property('name').from('airline')),\n    SelectResult.expression(Expression.property('callsign').from('airline')),\n    SelectResult.expression(Expression.property('destinationairport').from('route')),\n    SelectResult.expression(Expression.property('stops').from('route')),\n    SelectResult.expression(Expression.property('airline').from('route')),\n  )\n  .from(DataSource.collection(airlines).as('airline'))\n  .join(\n    Join.join(DataSource.collection(routes).as('route')).on(\n      Meta.id.from('airline')\n        .equalTo(Expression.property('airlineid').from('route')),\n    ),\n  )\n  .where(\n    Expression.property('sourceairport').from('route').equalTo(Expression.string('RIX')),\n  );\n"))),(0,a.kt)("h2",{id:"group-by-clause"},"GROUP BY Clause"),(0,a.kt)("p",null,"You can perform further processing on the data in your result set before the\nfinal projection is generated."),(0,a.kt)("p",null,"The following example looks for the number of airports at an altitude of 300 ft\nor higher and groups the results by country and timezone."),(0,a.kt)(d,{id:2,title:"Data Model for Example",mdxType:"Figure"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": "airport123",\n  "type": "airport",\n  "country": "United States",\n  "geo": { "alt": 456 },\n  "tz": "America/Anchorage"\n}\n'))),(0,a.kt)(c,{id:16,title:"Using GROUP BY",mdxType:"CodeExample"},(0,a.kt)("p",null,"This example shows a query that selects all airports with an altitude above\n300ft. The output (a count, $1) is grouped by country, within timezone."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Function_.count(Expression.all())),\n    SelectResult.expression(Expression.property('country')),\n    SelectResult.expression(Expression.property('tz')),\n  )\n  .from(DataSource.collection(collection))\n  .where(Expression.property('type').equalTo(Expression.string('airport')))\n  .groupBy(\n     Expression.property('country'),\n     Expression.property('tz'),\n  );\n\nfinal resultSet = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  print(\n    'There are ${result.integer(r'$1')} airports on '\n    'the ${result.string('tz')} timezone located '\n    'in ${result.string('country')} and above 300 ft.',\n  );\n}\n"))),(0,a.kt)("h2",{id:"order-by-clause"},"ORDER BY Clause"),(0,a.kt)("p",null,"It is possible to sort the results of a query based on a given expression result\n\u2014\u2009see ",(0,a.kt)("a",{parentName:"p",href:"#example-17"},"Example 17"),"."),(0,a.kt)(c,{id:17,title:"Using ORDER BY",mdxType:"CodeExample"},(0,a.kt)("p",null,"This example shows a query that returns documents of ",(0,a.kt)("inlineCode",{parentName:"p"},"type"),' equal to "hotel"\nsorted in ascending order by the value of the ',(0,a.kt)("inlineCode",{parentName:"p"},"title")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.expression(Expression.property('title')),\n  )\n  .from(DataSource.collection(collection))\n  .where(Expression.property('type').equalTo(Expression.string('hotel')))\n  .orderBy(Ordering.property('title').ascending())\n  .limit(Expression.integer(10));\n"))),(0,a.kt)("h2",{id:"datetime-functions"},"Date/Time Functions"),(0,a.kt)("p",null,"Couchbase Lite documents support a date type that internally stores dates in ISO\n8601 with the GMT/UTC timezone."),(0,a.kt)("p",null,"Couchbase Lite's ",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/QueryBuilder-class.html"},(0,a.kt)("inlineCode",{parentName:"a"},"QueryBuilder"))," API includes four functions for date\ncomparisons."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/stringToMillis.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.stringToMillis"))),(0,a.kt)("p",{parentName:"li"},"The input to this must be a validly formatted ISO 8601 date string. Valid date\nstrings must start with a date in the form YYYY-MM-DD (time only string are\nnot supported). The end result will be an expression (with a numeric content)\nthat can be further input into the query builder.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/stringToUTC.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.stringToUTC"))),(0,a.kt)("p",{parentName:"li"},"The input to this must be a validly formatted ISO 8601 date string. Valid date\nstrings must start with a date in the form YYYY-MM-DD (time only string are\nnot supported). The end result will be an expression (with string content)\nthat can be further input into the query builder.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/millisToString.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.millisToString"))),(0,a.kt)("p",{parentName:"li"},"The input for this must be a numeric value representing milliseconds since the\nUnix epoch. The end result will be an expression (with string content\nrepresenting the date and time as an ISO 8601 string in the device's timezone)\nthat can be further input into the query builder.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/millisToUTC.html"},(0,a.kt)("inlineCode",{parentName:"a"},"Function_.millisToUTC"))),(0,a.kt)("p",{parentName:"li"},"The input for this must be a numeric value representing milliseconds since the\nUnix epoch. The end result will be an expression (with string content\nrepresenting the date and time as a UTC ISO 8601 string) that can be further\ninput into the query builder."))))}k.isMDXComponent=!0}}]);