"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[105],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>N});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),s=o(n),k=l,N=s["".concat(p,".").concat(k)]||s[k]||u[k]||r;return n?a.createElement(N,i(i({ref:t},m),{},{components:n})):a.createElement(N,i({ref:t},m))}));function N(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=k;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d[s]="string"==typeof e?e:l,i[1]=d;for(var o=2;o<r;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},2711:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>o});var a=n(7462),l=(n(7294),n(3905));const r={description:"How to use SQL++ Query Strings to build effective queries with Couchbase Lite for Dart",related_content:[{name:"QueryBuilder",url:"/queries/query-builder"},{name:"Live Queries",url:"/queries/live-queries"},{name:"Indexes",url:"/indexing"},{name:"Result Sets",url:"/queries/query-result-sets"}]},i="SQL++ for Mobile",d={unversionedId:"queries/sqlplusplus-mobile",id:"queries/sqlplusplus-mobile",title:"SQL++ for Mobile",description:"How to use SQL++ Query Strings to build effective queries with Couchbase Lite for Dart",source:"@site/docs/queries/sqlplusplus-mobile.mdx",sourceDirName:"queries",slug:"/queries/sqlplusplus-mobile",permalink:"/queries/sqlplusplus-mobile",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/queries/sqlplusplus-mobile.mdx",tags:[],version:"current",frontMatter:{description:"How to use SQL++ Query Strings to build effective queries with Couchbase Lite for Dart",related_content:[{name:"QueryBuilder",url:"/queries/query-builder"},{name:"Live Queries",url:"/queries/live-queries"},{name:"Indexes",url:"/indexing"},{name:"Result Sets",url:"/queries/query-result-sets"}]},sidebar:"sidebar",previous:{title:"QueryBuilder",permalink:"/queries/query-builder"},next:{title:"SQL++ for Mobile and Server Differences",permalink:"/queries/sqlplusplus-server-diff"}},p={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Running",id:"running",level:2},{value:"Query Format",id:"query-format",level:2},{value:"Query Components",id:"query-components",level:3},{value:"SELECT Clause",id:"select-clause",level:2},{value:"Purpose",id:"purpose",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Arguments",id:"arguments",level:3},{value:"SELECT Wildcard",id:"select-wildcard",level:4},{value:"Example",id:"example",level:3},{value:"FROM Clause",id:"from-clause",level:2},{value:"Purpose",id:"purpose-1",level:3},{value:"Syntax",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"JOIN Clause",id:"join-clause",level:2},{value:"Purpose",id:"purpose-2",level:3},{value:"Syntax",id:"syntax-2",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Example",id:"example-2",level:3},{value:"WHERE Clause",id:"where-clause",level:2},{value:"Purpose",id:"purpose-3",level:3},{value:"Syntax",id:"syntax-3",level:3},{value:"Arguments",id:"arguments-2",level:3},{value:"Example",id:"example-3",level:3},{value:"GROUP BY Clause",id:"group-by-clause",level:2},{value:"Purpose",id:"purpose-4",level:3},{value:"Syntax",id:"syntax-4",level:3},{value:"Arguments",id:"arguments-3",level:3},{value:"Example",id:"example-4",level:3},{value:"ORDER BY Clause",id:"order-by-clause",level:2},{value:"Purpose",id:"purpose-5",level:3},{value:"Syntax",id:"syntax-5",level:3},{value:"Arguments",id:"arguments-4",level:3},{value:"Example",id:"example-5",level:3},{value:"LIMIT Clause",id:"limit-clause",level:2},{value:"Purpose",id:"purpose-6",level:3},{value:"Syntax",id:"syntax-6",level:3},{value:"Arguments",id:"arguments-5",level:3},{value:"Example",id:"example-6",level:3},{value:"OFFSET Clause",id:"offset-clause",level:2},{value:"Purpose",id:"purpose-7",level:3},{value:"Syntax",id:"syntax-7",level:3},{value:"Arguments",id:"arguments-6",level:3},{value:"Example",id:"example-7",level:3},{value:"Expressions",id:"expressions",level:2},{value:"Literals",id:"literals",level:3},{value:"Boolean",id:"boolean",level:4},{value:"Purpose",id:"purpose-8",level:5},{value:"Syntax",id:"syntax-8",level:5},{value:"Example",id:"example-8",level:5},{value:"Numeric",id:"numeric",level:4},{value:"Purpose",id:"purpose-9",level:5},{value:"Syntax",id:"syntax-9",level:5},{value:"Example",id:"example-9",level:5},{value:"String",id:"string",level:4},{value:"Purpose",id:"purpose-10",level:5},{value:"Syntax",id:"syntax-10",level:5},{value:"Example",id:"example-10",level:5},{value:"NULL",id:"null",level:4},{value:"Purpose",id:"purpose-11",level:5},{value:"Syntax",id:"syntax-11",level:5},{value:"Example",id:"example-11",level:5},{value:"MISSING",id:"missing",level:4},{value:"Purpose",id:"purpose-12",level:5},{value:"Syntax",id:"syntax-12",level:5},{value:"Example",id:"example-12",level:5},{value:"Array",id:"array",level:4},{value:"Purpose",id:"purpose-13",level:5},{value:"Syntax",id:"syntax-13",level:5},{value:"Example",id:"example-13",level:5},{value:"Dictionary",id:"dictionary",level:4},{value:"Purpose",id:"purpose-14",level:5},{value:"Syntax",id:"syntax-14",level:5},{value:"Example",id:"example-14",level:5},{value:"Identifier",id:"identifier",level:3},{value:"Purpose",id:"purpose-15",level:4},{value:"Syntax",id:"syntax-15",level:4},{value:"Example",id:"example-15",level:4},{value:"Property Expression",id:"property-expression",level:3},{value:"Purpose",id:"purpose-16",level:4},{value:"Syntax",id:"syntax-16",level:4},{value:"Example",id:"example-16",level:4},{value:"Any and Every Expression",id:"any-and-every-expression",level:3},{value:"Purpose",id:"purpose-17",level:4},{value:"Syntax",id:"syntax-17",level:4},{value:"Example",id:"example-17",level:4},{value:"Parameter Expression",id:"parameter-expression",level:3},{value:"Purpose",id:"purpose-18",level:4},{value:"Syntax",id:"syntax-18",level:4},{value:"Example",id:"example-18",level:4},{value:"Parenthesis Expression",id:"parenthesis-expression",level:3},{value:"Purpose",id:"purpose-19",level:4},{value:"Example",id:"example-19",level:4},{value:"Operators",id:"operators",level:2},{value:"Binary Operators",id:"binary-operators",level:3},{value:"Maths",id:"maths",level:4},{value:"Comparison Operators",id:"comparison-operators",level:4},{value:"Purpose",id:"purpose-20",level:5},{value:"Logical Operators",id:"logical-operators",level:4},{value:"Purpose",id:"purpose-21",level:5},{value:"String Operators",id:"string-operators",level:4},{value:"Purpose",id:"purpose-22",level:5},{value:"Unary Operators",id:"unary-operators",level:3},{value:"Purpose",id:"purpose-23",level:4},{value:"Syntax",id:"syntax-19",level:4},{value:"<code>COLLATE</code> Operator",id:"collate-operator",level:3},{value:"Purpose",id:"purpose-24",level:4},{value:"Usage",id:"usage",level:4},{value:"Syntax",id:"syntax-20",level:4},{value:"Arguments",id:"arguments-7",level:4},{value:"Example",id:"example-20",level:4},{value:"Conditional Operator",id:"conditional-operator",level:3},{value:"Purpose",id:"purpose-25",level:4},{value:"Syntax",id:"syntax-21",level:4},{value:"Examples",id:"examples",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Functions",id:"functions",level:2},{value:"Purpose",id:"purpose-26",level:3},{value:"Syntax",id:"syntax-22",level:3},{value:"Aggregation Functions",id:"aggregation-functions",level:3},{value:"Array Functions",id:"array-functions",level:3},{value:"Conditional Functions",id:"conditional-functions",level:3},{value:"Date and Time Functions",id:"date-and-time-functions",level:3},{value:"Full Text Search Functions",id:"full-text-search-functions",level:3},{value:"Maths Functions",id:"maths-functions",level:3},{value:"Pattern Searching Functions",id:"pattern-searching-functions",level:3},{value:"String Functions",id:"string-functions",level:3},{value:"Type Checking Functions",id:"type-checking-functions",level:3},{value:"Type Conversion Functionsunctions",id:"type-conversion-functionsunctions",level:3},{value:"QueryBuilder Differences",id:"querybuilder-differences",level:2},{value:"Query Parameters",id:"query-parameters",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",t)},s=m("CodeExample"),u=m("Table"),k={toc:o},N="wrapper";function h(e){let{components:t,...n}=e;return(0,l.kt)(N,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"sql-for-mobile"},"SQL++ for Mobile"),(0,l.kt)("metaheader",null),(0,l.kt)("admonition",{type:"important"},(0,l.kt)("p",{parentName:"admonition"},"N1QL is Couchbase's implementation of the developing SQL++ standard. As such the\nterms N1QL and SQL++ are used interchangeably in all Couchbase documentation\nunless explicitly stated otherwise.")),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"Developers using Couchbase Lite for Dart can provide SQL++ query strings using\nthe SQL++ Query API. This API uses query statements of the form shown in\n",(0,l.kt)("a",{parentName:"p",href:"#example-1"},"Example 1"),". The structure and semantics of the query format are based on\nthat of Couchbase Server's SQL++ query language \u2014 see\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/index.html"},"SQL++ Reference Guide"),"\nand\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/server/current/learn/data/n1ql-versus-sql.html"},"SQL++ Data Model"),"."),(0,l.kt)("h2",{id:"running"},"Running"),(0,l.kt)("p",null,"Use ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Database/createQuery.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Database.createQuery"))," to define a query through an SQL++ string. Then\nrun the query using the ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/execute.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Query.execute()"))," method."),(0,l.kt)(s,{id:1,title:"Running an SQL++ Query",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('hotels');\nfinal query = await database.createQuery(\n  'SELECT META().id AS docId FROM _ WHERE type = \"hotel\"',\n);\nfinal resultSet = await query.execute();\n")),(0,l.kt)("p",null,"Here we are accessing the default collection using the shorthand notation (",(0,l.kt)("inlineCode",{parentName:"p"},"_"),")\n\u2014 see the ",(0,l.kt)("a",{parentName:"p",href:"#from-clause"},"FROM clause")," for more on data source selection and\n",(0,l.kt)("a",{parentName:"p",href:"#query-parameters"},"Query Parameters")," for more on parameterized queries.")),(0,l.kt)("h2",{id:"query-format"},"Query Format"),(0,l.kt)("p",null,"The API uses query statements of the form shown in ",(0,l.kt)("a",{parentName:"p",href:"#example-2"},"Example 2"),"."),(0,l.kt)(s,{id:2,title:"Query Format",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ____\nFROM ____\nJOIN ____\nWHERE ____\nGROUP BY ____\nORDER BY ____\nLIMIT ____\nOFFSET ____\n")),(0,l.kt)("h3",{id:"query-components"},"Query Components"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"SELECT")," clause specifies the data to be returned in the result set."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"FROM")," clause specifies the collection to query the documents from."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"JOIN")," clause specifies the criteria for joining multiple documents."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"WHERE")," clause specifies the query criteria. The ",(0,l.kt)("inlineCode",{parentName:"li"},"SELECT"),"ed properties of\ndocuments matching this criteria will be returned in the result set."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"GROUP BY")," clause specifies the criteria used to group returned items in\nthe result set."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"ORDER BY")," clause specifies the criteria used to order the items in the\nresult set."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"LIMIT")," clause specifies the maximum number of results to be returned."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"OFFSET")," clause specifies the number of results to be skipped before\nstarting to return results."))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"We recommend working through the\n",(0,l.kt)("a",{parentName:"p",href:"https://query-tutorial.couchbase.com/tutorial/#1"},"SQL++ Tutorials")," as a good\nway to build your SQL++ skills.")),(0,l.kt)("h2",{id:"select-clause"},"SELECT Clause"),(0,l.kt)("h3",{id:"purpose"},"Purpose"),(0,l.kt)("p",null,"Projects the result returned by the query, identifying the columns it will\ncontain."),(0,l.kt)("h3",{id:"syntax"},"Syntax"),(0,l.kt)(s,{id:3,title:"SQL++ Select Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"select        = SELECT _ ( ( DISTINCT | ALL ) _ )? selectResults\nselectResults = selectResult ( _? ',' _? selectResult )*\nselectResult  = expression ( ( _ AS )? _ columnAlias )?\ncolumnAlias   = IDENTIFIER\n"))),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The select clause begins with the ",(0,l.kt)("inlineCode",{parentName:"li"},"SELECT")," keyword.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The optional ",(0,l.kt)("inlineCode",{parentName:"li"},"ALL")," argument is used to specify that the query should return\n",(0,l.kt)("inlineCode",{parentName:"li"},"ALL")," results (the default)."),(0,l.kt)("li",{parentName:"ul"},"The optional ",(0,l.kt)("inlineCode",{parentName:"li"},"DISTINCT")," argument is used to specify that the query should\nreturn distinct results."))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"selectResults")," is a list of columns projected in the query result. Each\ncolumn is an expression which could be a property expression or any\nexpression or function. You can use the ",(0,l.kt)("inlineCode",{parentName:"li"},"*")," expression, to select all\ncolumns."),(0,l.kt)("li",{parentName:"ol"},"Use the optional ",(0,l.kt)("inlineCode",{parentName:"li"},"AS")," argument to provides an alias for a column. Each column\ncan be aliased by putting the alias name after the column name.")),(0,l.kt)("h4",{id:"select-wildcard"},"SELECT Wildcard"),(0,l.kt)("p",null,"When using the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," expression, the column name is one of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The alias name, if one was specified."),(0,l.kt)("li",{parentName:"ul"},"The data source name (or its alias if provided) as specified in the\n",(0,l.kt)("a",{parentName:"li",href:"#from-clause"},"FROM clause"),".")),(0,l.kt)("p",null,"This behavior is inline with that of SQL++ for Server \u2014 see example in\n",(0,l.kt)("a",{parentName:"p",href:"#table-1"},"Table 1"),"."),(0,l.kt)(u,{id:1,title:"Example Column Names for SELECT *",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Query"),(0,l.kt)("th",{parentName:"tr",align:null},"Column Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SELECT * AS data FROM _")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"data"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SELECT * FROM _")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SELECT * FROM _default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_default"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SELECT * FROM users")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"users"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SELECT * FROM users AS user")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"user")))))),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)(s,{id:4,title:"SELECT Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * ...;\nSELECT user.* AS data ...;\nSELECT name fullName ...;\nSELECT user.name ...;\nSELECT DISTINCT address.city ...;\n")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Use the ",(0,l.kt)("inlineCode",{parentName:"li"},"*")," expression to select all columns."),(0,l.kt)("li",{parentName:"ol"},"Select all properties from the ",(0,l.kt)("inlineCode",{parentName:"li"},"user")," data source. Give the object an alias\nof ",(0,l.kt)("inlineCode",{parentName:"li"},"data"),"."),(0,l.kt)("li",{parentName:"ol"},"Select a pair of properties."),(0,l.kt)("li",{parentName:"ol"},"Select a specific property from the ",(0,l.kt)("inlineCode",{parentName:"li"},"user")," data source."),(0,l.kt)("li",{parentName:"ol"},"Select the property ",(0,l.kt)("inlineCode",{parentName:"li"},"city")," from the ",(0,l.kt)("inlineCode",{parentName:"li"},"address")," data source."))),(0,l.kt)("h2",{id:"from-clause"},"FROM Clause"),(0,l.kt)("h3",{id:"purpose-1"},"Purpose"),(0,l.kt)("p",null,"Specifies the data source and optionally applies an alias (",(0,l.kt)("inlineCode",{parentName:"p"},"AS"),"). It is\nmandatory."),(0,l.kt)("h3",{id:"syntax-1"},"Syntax"),(0,l.kt)(s,{id:5,title:"FROM Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"from             = FROM _ dataSource\ndataSource       = collectionName ( ( _ AS )? _ collectionAlias )?\ncollectionName   = IDENTIFIER\ncollectionAlias  = IDENTIFIER\n")),(0,l.kt)("p",null,"Here ",(0,l.kt)("inlineCode",{parentName:"p"},"dataSource")," is the collection name against which the query is to run. Use\n",(0,l.kt)("inlineCode",{parentName:"p"},"AS")," to give the collection an alias you can use within the query. To use the\ndefault collection, without specifying a name, use ",(0,l.kt)("inlineCode",{parentName:"p"},"_")," as the data source.")),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)(s,{id:6,title:"FROM Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM user;\nSELECT user.name FROM users AS user;\nSELECT user.name FROM users user;\nSELECT name FROM _;\nSELECT user.name FROM _ AS user;\nSELECT user.name FROM _ user;\n"))),(0,l.kt)("h2",{id:"join-clause"},"JOIN Clause"),(0,l.kt)("h3",{id:"purpose-2"},"Purpose"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"JOIN")," clause enables you to select data from multiple data sources linked\nby criteria specified in the ",(0,l.kt)("inlineCode",{parentName:"p"},"ON")," constraint. Currently only self-joins are\nsupported. For example to combine airline details with route details, linked by\nthe airline id \u2014 see ",(0,l.kt)("a",{parentName:"p",href:"#example-7"},"Example 7"),"."),(0,l.kt)("h3",{id:"syntax-2"},"Syntax"),(0,l.kt)(s,{id:7,title:"JOIN Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"join            = joinOperator _ dataSource ( _ constraint )?\njoinOperator    = ( ( LEFT ( _ OUTER )? | INNER | CROSS ) _ )? JOIN\ndataSource      = collectionName ( ( _ AS )? _ collectionAlias )?\nconstraint      = ON _ expression\ncollectionName  = IDENTIFIER\ncollectionAlias = IDENTIFIER\n"))),(0,l.kt)("h3",{id:"arguments-1"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"JOIN")," clause starts with a ",(0,l.kt)("inlineCode",{parentName:"li"},"JOIN")," operator followed by the data source."),(0,l.kt)("li",{parentName:"ol"},"Five ",(0,l.kt)("inlineCode",{parentName:"li"},"JOIN")," operators are supported:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"JOIN"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"LEFT JOIN"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"LEFT OUTER JOIN"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"INNER JOIN"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"CROSS JOIN"),"."),(0,l.kt)("li",{parentName:"ul"},"Note: ",(0,l.kt)("inlineCode",{parentName:"li"},"JOIN")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"INNER JOIN")," are the same, and ",(0,l.kt)("inlineCode",{parentName:"li"},"LEFT JOIN")," and\n",(0,l.kt)("inlineCode",{parentName:"li"},"LEFT OUTER JOIN")," are the same."))),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"JOIN")," constraint starts with the ",(0,l.kt)("inlineCode",{parentName:"li"},"ON")," keyword followed by the expression\nthat defines the joining constraints.")),(0,l.kt)("h3",{id:"example-2"},"Example"),(0,l.kt)(s,{id:8,title:"JOIN Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT users.prop1, other.prop2\nFROM users\nJOIN users AS other ON users.key = other.key;\n\nSELECT users.prop1, other.prop2\nFROM users\nLEFT JOIN users AS other ON users.key = other.key;\n"))),(0,l.kt)(s,{id:9,title:"Using JOIN to Combine Document Details",mdxType:"CodeExample"},(0,l.kt)("p",null,"This example joins the documents from the ",(0,l.kt)("inlineCode",{parentName:"p"},"routes")," collections with documents\nfrom the ",(0,l.kt)("inlineCode",{parentName:"p"},"airlines")," collection using the document ID (",(0,l.kt)("inlineCode",{parentName:"p"},"id"),") of the ",(0,l.kt)("em",{parentName:"p"},"airline"),"\ndocument and the ",(0,l.kt)("inlineCode",{parentName:"p"},"airlineId")," property of the ",(0,l.kt)("em",{parentName:"p"},"route")," document."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT *\nFROM routes r\nJOIN airlines a ON r.airlineId = META(a).id\nWHERE a.country = "France";\n'))),(0,l.kt)("h2",{id:"where-clause"},"WHERE Clause"),(0,l.kt)("h3",{id:"purpose-3"},"Purpose"),(0,l.kt)("p",null,"Specifies the selection criteria used to filter results. As with SQL, use the\n",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to choose which results are returned by your query."),(0,l.kt)("h3",{id:"syntax-3"},"Syntax"),(0,l.kt)(s,{id:10,title:"WHERE Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"where = WHERE _ expression\n"))),(0,l.kt)("h3",{id:"arguments-2"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"WHERE")," evalates the expression to a ",(0,l.kt)("inlineCode",{parentName:"li"},"BOOLEAN")," value. You can combine any\nnumber of expressions through logical operators, in order to implement\nsophisticated filtering capabilities.")),(0,l.kt)("h3",{id:"example-3"},"Example"),(0,l.kt)(s,{id:11,title:"WHERE Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT name\nFROM employees\nWHERE department = "engineer" AND group = "mobile";\n'))),(0,l.kt)("h2",{id:"group-by-clause"},"GROUP BY Clause"),(0,l.kt)("h3",{id:"purpose-4"},"Purpose"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY")," to group results for aggreation, based on one or more\nexpressions."),(0,l.kt)("h3",{id:"syntax-4"},"Syntax"),(0,l.kt)(s,{id:12,title:"GROUP BY Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"groupBy  = grouping ( _ having )?\ngrouping = GROUP BY _ expression ( _? ',' _? expression )*\nhaving   = HAVING _ expression\n"))),(0,l.kt)("h3",{id:"arguments-3"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"GROUP BY")," clause starts with the ",(0,l.kt)("inlineCode",{parentName:"li"},"GROUP BY")," keyword followed by one or\nmore expressions."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"GROUP BY")," clause is normally used together with aggregate functions\n(e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"COUNT"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"MAX"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"MIN"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"SUM"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"AVG"),")."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"HAVING")," clause allows you to filter the results based on aggregate\nfunctions \u2014 for example, ",(0,l.kt)("inlineCode",{parentName:"li"},"HAVING COUNT(airlineId) > 100"),".")),(0,l.kt)("h3",{id:"example-4"},"Example"),(0,l.kt)(s,{id:13,title:"GROUP BY Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT COUNT(airlineId), destination\nFROM routes\nGROUP BY destination;\n\nSELECT COUNT(airlineId), destination\nFROM routes\nGROUP BY destination\nHAVING COUNT(airlineId) > 100;\n\nSELECT COUNT(airlineId), destination\nFROM routes\nWHERE destinationState = "CA"\nGROUP BY destination\nHAVING COUNT(airlineId) > 100;\n'))),(0,l.kt)("h2",{id:"order-by-clause"},"ORDER BY Clause"),(0,l.kt)("h3",{id:"purpose-5"},"Purpose"),(0,l.kt)("p",null,"Sort query results based on a expression."),(0,l.kt)("h3",{id:"syntax-5"},"Syntax"),(0,l.kt)(s,{id:14,title:"ORDER BY Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"orderBy  = ORDER BY _ ordering ( _? ',' _? ordering )*\nordering = expression ( _ order )?\norder    = ( ASC | DESC )\n"))),(0,l.kt)("h3",{id:"arguments-4"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"ORDER BY")," clause starts with the ",(0,l.kt)("inlineCode",{parentName:"li"},"ORDER BY")," keyword followed by one or\nmore ordering expressions."),(0,l.kt)("li",{parentName:"ol"},"An ordering expression specifies an expressions to use for ordering the\nresults."),(0,l.kt)("li",{parentName:"ol"},"For each ordering expression, the sorting direction can be specified using\nthe optional ",(0,l.kt)("inlineCode",{parentName:"li"},"ASC")," (ascending) or ",(0,l.kt)("inlineCode",{parentName:"li"},"DESC")," (descending) directives. Default is\n",(0,l.kt)("inlineCode",{parentName:"li"},"ASC"),".")),(0,l.kt)("h3",{id:"example-5"},"Example"),(0,l.kt)(s,{id:15,title:"ORDER BY Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM users\nORDER BY name;\n\nSELECT name\nFROM users\nORDER BY name DESC;\n\nSELECT name, score\nFROM users\nORDER BY name ASC, score DESC;\n"))),(0,l.kt)("h2",{id:"limit-clause"},"LIMIT Clause"),(0,l.kt)("h3",{id:"purpose-6"},"Purpose"),(0,l.kt)("p",null,"Specifies the maximum number of results to be returned by the query."),(0,l.kt)("h3",{id:"syntax-6"},"Syntax"),(0,l.kt)(s,{id:16,title:"LIMIT Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"limit = LIMIT _ expression\n"))),(0,l.kt)("h3",{id:"arguments-5"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"LIMIT")," clause starts with the ",(0,l.kt)("inlineCode",{parentName:"li"},"LIMIT")," keyword followed by an expression\nthat will be evaluated as a number.")),(0,l.kt)("h3",{id:"example-6"},"Example"),(0,l.kt)(s,{id:17,title:"LIMIT Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM users\nLIMIT 10;\n"))),(0,l.kt)("h2",{id:"offset-clause"},"OFFSET Clause"),(0,l.kt)("h3",{id:"purpose-7"},"Purpose"),(0,l.kt)("p",null,"Specifies the number of results to be skipped by the query."),(0,l.kt)("h3",{id:"syntax-7"},"Syntax"),(0,l.kt)(s,{id:18,title:"OFFSET syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"offset = OFFSET _ expression\n"))),(0,l.kt)("h3",{id:"arguments-6"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The offset clause starts with the ",(0,l.kt)("inlineCode",{parentName:"li"},"OFFSET")," keyword followed by an expression\nthat will be evaluated as a number that represents the number of results to\nbe skipped before the query begins returning results.")),(0,l.kt)("h3",{id:"example-7"},"Example"),(0,l.kt)(s,{id:19,title:"OFFSET Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM users\nOFFSET 10;\n\nSELECT name\nFROM users\nLIMIT 10\nOFFSET 10;\n"))),(0,l.kt)("h2",{id:"expressions"},"Expressions"),(0,l.kt)("p",null,"An expression is a specification for a value that is resolved when executing a\nquery. This section, together with ",(0,l.kt)("a",{parentName:"p",href:"#operators"},"Operators")," and\n",(0,l.kt)("a",{parentName:"p",href:"#functions"},"Functions"),", which are covered in their own sections, covers all the\navailable types of expressions."),(0,l.kt)("h3",{id:"literals"},"Literals"),(0,l.kt)("h4",{id:"boolean"},"Boolean"),(0,l.kt)("h5",{id:"purpose-8"},"Purpose"),(0,l.kt)("p",null,"Represents a true or false value."),(0,l.kt)("h5",{id:"syntax-8"},"Syntax"),(0,l.kt)(s,{id:20,title:"Boolean Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"boolean = ( TRUE | FALSE )\n"))),(0,l.kt)("h5",{id:"example-8"},"Example"),(0,l.kt)(s,{id:21,title:"Boolean Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT fullTime\nFROM users\nWHERE fullTime = true;\n\nSELECT fullTime\nFROM users\nWHERE fullTime = false;\n"))),(0,l.kt)("h4",{id:"numeric"},"Numeric"),(0,l.kt)("h5",{id:"purpose-9"},"Purpose"),(0,l.kt)("p",null,"Represents a numeric value. Numbers may be signed or unsigned digits. They have\noptional fractional and exponent components."),(0,l.kt)("h5",{id:"syntax-9"},"Syntax"),(0,l.kt)(s,{id:22,title:"Numeric Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"numeric = -? ( ( . digit+ ) | ( digit+ ( . digit* )? ) ) ( ( E | e ) ( - | + )? digit+ )?\ndigit   = /[0-9]/\n"))),(0,l.kt)("h5",{id:"example-9"},"Example"),(0,l.kt)(s,{id:23,title:"Numeric Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  10,\n  0,\n  -10,\n  10.25,\n  10.25e2,\n  10.25E2,\n  10.25E+2,\n  10.25E-2\nFROM _;\n"))),(0,l.kt)("h4",{id:"string"},"String"),(0,l.kt)("h5",{id:"purpose-10"},"Purpose"),(0,l.kt)("p",null,"The string literal represents a string or sequence of characters."),(0,l.kt)("h5",{id:"syntax-10"},"Syntax"),(0,l.kt)(s,{id:24,title:"String Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"string         = ( \" character* \" | ' character* ' )\ncharacter      = ( escapeSequence | any codepoint except \", ' or control characters )\nescapeSequence = \\ ( \" | ' | \\ | / | b | f | n | r | t | u hex hex hex hex )\nhex            = hexDigit hexDigit\nhexDigit       = /[0-9a-fA-F]/\n"))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The string literal can be double-quoted as well as single-quoted.")),(0,l.kt)("h5",{id:"example-10"},"Example"),(0,l.kt)(s,{id:25,title:"String Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT firstName, lastName\nFROM users\nWHERE middleName = \"middle\" AND lastName = 'last';\n"))),(0,l.kt)("h4",{id:"null"},"NULL"),(0,l.kt)("h5",{id:"purpose-11"},"Purpose"),(0,l.kt)("p",null,"Represents the absence of a value."),(0,l.kt)("h5",{id:"syntax-11"},"Syntax"),(0,l.kt)(s,{id:26,title:"NULL Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"null = NULL\n"))),(0,l.kt)("h5",{id:"example-11"},"Example"),(0,l.kt)(s,{id:27,title:"NULL Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT firstName, lastName\nFROM users\nWHERE middleName IS NULL;\n"))),(0,l.kt)("h4",{id:"missing"},"MISSING"),(0,l.kt)("h5",{id:"purpose-12"},"Purpose"),(0,l.kt)("p",null,"Represents a missing name-value pair in a dictionary."),(0,l.kt)("h5",{id:"syntax-12"},"Syntax"),(0,l.kt)(s,{id:28,title:"MISSING Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"missing = MISSING\n"))),(0,l.kt)("h5",{id:"example-12"},"Example"),(0,l.kt)(s,{id:29,title:"MISSING Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT firstName, lastName\nFROM users\nWHERE middleName IS MISSING;\n"))),(0,l.kt)("h4",{id:"array"},"Array"),(0,l.kt)("h5",{id:"purpose-13"},"Purpose"),(0,l.kt)("p",null,"Represents an array."),(0,l.kt)("h5",{id:"syntax-13"},"Syntax"),(0,l.kt)(s,{id:30,title:"ARRAY Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"array = [ ( _? expression ( _? ',' _? expression )* _? )? ]\n"))),(0,l.kt)("h5",{id:"example-13"},"Example"),(0,l.kt)(s,{id:31,title:"ARRAY examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ["a", "b", "c"]\nFROM _;\n\nSELECT [property1, property2, property3]\nFROM _;\n'))),(0,l.kt)("h4",{id:"dictionary"},"Dictionary"),(0,l.kt)("h5",{id:"purpose-14"},"Purpose"),(0,l.kt)("p",null,"Represents a dictionary."),(0,l.kt)("h5",{id:"syntax-14"},"Syntax"),(0,l.kt)(s,{id:32,title:"Dictionary Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dictionary = { ( _? string _? : _? expression ( _? , _? string _? : _? expression )* _? )? }\n"))),(0,l.kt)("h5",{id:"example-14"},"Example"),(0,l.kt)(s,{id:33,title:"Dictionary Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT { 'name': 'James', 'department': 10 }\nFROM _;\n\nSELECT { 'name': 'James', 'department': dept }\nFROM _;\n\nSELECT { 'name': 'James', 'phones': ['650-100-1000', '650-100-2000'] }\nFROM _;\n"))),(0,l.kt)("h3",{id:"identifier"},"Identifier"),(0,l.kt)("h4",{id:"purpose-15"},"Purpose"),(0,l.kt)("p",null,"An identifier references an entity by its symbolic name. Use an identifier for\nexample to identify:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Column alias names"),(0,l.kt)("li",{parentName:"ul"},"Collection names"),(0,l.kt)("li",{parentName:"ul"},"Collection alias names"),(0,l.kt)("li",{parentName:"ul"},"Property names"),(0,l.kt)("li",{parentName:"ul"},"Parameter names"),(0,l.kt)("li",{parentName:"ul"},"Function names"),(0,l.kt)("li",{parentName:"ul"},"FTS index names")),(0,l.kt)("h4",{id:"syntax-15"},"Syntax"),(0,l.kt)(s,{id:34,title:"Identifier Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"identifier       = ( plainIdentifier | quotedIdentifier )\nplainIdentifier  = /[a-zA-Z_][a-zA-Z0-9_$]*/\nquotedIdentifier = /`[^`]+`/\n"))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"To use other than basic characters in the identifier, surround the identifier\nwith the backticks ` character. For example, to use a hyphen (-) in an\nidentifier, use backticks to surround the identifier.")),(0,l.kt)("h4",{id:"example-15"},"Example"),(0,l.kt)(s,{id:35,title:"Identifier Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM _;\n\nSELECT *\nFROM `users-1`;\n\nSELECT key\nFROM users;\n\nSELECT key$1\nFROM users_1;\n\nSELECT `key-1`\nFROM users;\n"))),(0,l.kt)("h3",{id:"property-expression"},"Property Expression"),(0,l.kt)("h4",{id:"purpose-16"},"Purpose"),(0,l.kt)("p",null,"The property expression is used to reference a property of a dictionary."),(0,l.kt)("h4",{id:"syntax-16"},"Syntax"),(0,l.kt)(s,{id:36,title:"Property Expression Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"property     = ( * | dataSourceName . _? * | propertyPath )\npropertyPath = propertyName ( ( . _? propertyName ) | ( [ _? numeric _? ] _? ) )*\npropertyName = IDENTIFIER\n")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Prefix the property expression with the data source name or alias to indicate\nits origin."),(0,l.kt)("li",{parentName:"ol"},"Use dot syntax to refer to nested properties in the propertyPath."),(0,l.kt)("li",{parentName:"ol"},"Use bracket (",(0,l.kt)("inlineCode",{parentName:"li"},"[index]"),") syntax to refer to an item in an array."),(0,l.kt)("li",{parentName:"ol"},"Use the asterisk (",(0,l.kt)("inlineCode",{parentName:"li"},"*"),") character to represents all properties. This can only\nbe used in the result list of the ",(0,l.kt)("inlineCode",{parentName:"li"},"SELECT")," clause."))),(0,l.kt)("h4",{id:"example-16"},"Example"),(0,l.kt)(s,{id:37,title:"Property Expressions Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM users\nWHERE contact.name = 'daniel';\n\nSELECT users.*\nFROM users\nWHERE contact.name = 'daniel';\n\nSELECT users.contact.address.city\nFROM users\nWHERE contact.name = 'daniel';\n\nSELECT contact.address.city, contact.phones[0]\nFROM users\nWHERE contact.name = 'daniel';\n"))),(0,l.kt)("h3",{id:"any-and-every-expression"},"Any and Every Expression"),(0,l.kt)("h4",{id:"purpose-17"},"Purpose"),(0,l.kt)("p",null,"Evaluates expressions over items in an array."),(0,l.kt)("h4",{id:"syntax-17"},"Syntax"),(0,l.kt)(s,{id:38,title:"Any and Every Expression Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayExpression = anyEvery _ variableName _ IN _ expression _ SATISFIES _ expression _ END\nanyEvery        = ( anyOrSome AND EVERY | anyOrSome | EVERY )\nanyOrSome       = ( ANY | SOME )\nvariableName    = IDENTIFIER\n")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"The array expression starts with ",(0,l.kt)("inlineCode",{parentName:"p"},"anyEvery"),", where each possible combination\nhas a different function as described below, and is terminated by ",(0,l.kt)("inlineCode",{parentName:"p"},"END"),"."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"ANY")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"SOME"),": Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"TRUE")," if at least one item in the array satisfies\nthe expression, otherwise returns ",(0,l.kt)("inlineCode",{parentName:"p"},"FALSE"),"."),(0,l.kt)("admonition",{parentName:"li",type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"ANY")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"SOME")," are interchangeable."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"EVERY"),": Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"TRUE")," if all items in the array satisfies the expression,\notherwise returns ",(0,l.kt)("inlineCode",{parentName:"p"},"FALSE"),". If the array is empty, returns ",(0,l.kt)("inlineCode",{parentName:"p"},"TRUE"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"( ANY | SOME ) AND EVERY"),": Same as ",(0,l.kt)("inlineCode",{parentName:"p"},"EVERY")," but returns ",(0,l.kt)("inlineCode",{parentName:"p"},"FALSE")," if the\narray is empty.")))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"variableName")," represents each item in the array.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"IN")," keyword is used to specify the array to be evaluated.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"SATISFIES")," keyword is used to specify the expression to evaluate for\neach item in the array.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"END")," terminates the array expression.")))),(0,l.kt)("h4",{id:"example-17"},"Example"),(0,l.kt)(s,{id:39,title:"Any and Every Expression Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM users\nWHERE\n  ANY contact IN contacts\n    SATISFIES contact.city = 'San Mateo'\n  END;\n"))),(0,l.kt)("h3",{id:"parameter-expression"},"Parameter Expression"),(0,l.kt)("h4",{id:"purpose-18"},"Purpose"),(0,l.kt)("p",null,"A parameter expression references a value from the ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Parameters-class.html"},(0,l.kt)("inlineCode",{parentName:"a"},"Parameters"))," assigned to\nthe query before execution."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If a parameter is specified in the query string, but no value has been provided,\nan error will be thrown when executing the query.")),(0,l.kt)("h4",{id:"syntax-18"},"Syntax"),(0,l.kt)(s,{id:40,title:"Parameter Expression Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"parameter = $ IDENTIFIER\n"))),(0,l.kt)("h4",{id:"example-18"},"Example"),(0,l.kt)(s,{id:41,title:"Parameter Expression Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM epmolyees\nWHERE department = $department;\n"))),(0,l.kt)(s,{id:42,title:"Using a Parameter",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final query = await db.createQuery(\n  r'''\n  SELECT name\n  FROM employees\n  WHERE department = $department\n  ''',\n);\nquery.parameters = Parameters({'department': 'E001'});\nfinal results = query.execute();\n"))),(0,l.kt)("h3",{id:"parenthesis-expression"},"Parenthesis Expression"),(0,l.kt)("h4",{id:"purpose-19"},"Purpose"),(0,l.kt)("p",null,"Use parentheses to group expressions together to make them more readable or to\nestablish operator precedence."),(0,l.kt)("h4",{id:"example-19"},"Example"),(0,l.kt)(s,{id:43,title:"Parenthesis Expression Examples",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT (value1 + value2) * value 3\nFROM _;\n\nSELECT *\nFROM _\nWHERE ((value1 + value2) * value3) + value4 = 10;\n\nSELECT *\nFROM _\nWHERE (value1 = value2)\n   OR (value3 = value4);\n"))),(0,l.kt)("h2",{id:"operators"},"Operators"),(0,l.kt)("h3",{id:"binary-operators"},"Binary Operators"),(0,l.kt)("h4",{id:"maths"},"Maths"),(0,l.kt)(u,{id:2,title:"Maths Operators",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Op"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"+")),(0,l.kt)("td",{parentName:"tr",align:null},"Add"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 + v2 = 10"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-")),(0,l.kt)("td",{parentName:"tr",align:null},"Subtract"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 - v2 = 10"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"*")),(0,l.kt)("td",{parentName:"tr",align:null},"Multiply"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 \\* v2 = 10"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"/")),(0,l.kt)("td",{parentName:"tr",align:null},"Divide - see 1"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 / v2 = 10"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"%")),(0,l.kt)("td",{parentName:"tr",align:null},"Modulus"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 % v2 = 0"))))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"If both operands are integers, integer division is used, but if one is a\nfloating number, then float division is used. This differs from SQL++ for\nServer, which performs float division regardless. Use ",(0,l.kt)("inlineCode",{parentName:"li"},"DIV(x, y)")," to force\nfloat division in SQL++ for Mobile."))),(0,l.kt)("h4",{id:"comparison-operators"},"Comparison Operators"),(0,l.kt)("h5",{id:"purpose-20"},"Purpose"),(0,l.kt)("p",null,"The comparison operators can for example be used in the ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to\nspecify the condition on which to match documents."),(0,l.kt)(u,{id:3,title:"Comparison Operators",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Op"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"=")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"==")),(0,l.kt)("td",{parentName:"tr",align:null},"Equals"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 = v2<br/> WHERE v1 == v2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"!=")," or ","<",">"),(0,l.kt)("td",{parentName:"tr",align:null},"Not Equal to"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 != v2<br/> WHERE v1 &#60&#62 v2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},">")),(0,l.kt)("td",{parentName:"tr",align:null},"Greater than"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 > v2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},">=")),(0,l.kt)("td",{parentName:"tr",align:null},"Greater than or equal to"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 >= v2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<")),(0,l.kt)("td",{parentName:"tr",align:null},"Less than"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 < v2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<=")),(0,l.kt)("td",{parentName:"tr",align:null},"Less than or equal to"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 <= v2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IN")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if the value is in the list or array of values specified by the right hand side expression; Otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),"."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE 'James' IN contactsList"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIKE")),(0,l.kt)("td",{parentName:"tr",align:null},"String wildcard pattern matching, comparison - see 2. Two wildchards are supported: ",(0,l.kt)("br",null)," \u2022 ",(0,l.kt)("inlineCode",{parentName:"td"},"%")," Matches zero or more characters. ",(0,l.kt)("br",null)," \u2022 ","_","` Matches a single character."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE name LIKE 'a%'")," ",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"WHERE name LIKE '%a'")," ",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"WHERE name LIKE '%or%'")," ",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"WHERE name LIKE 'a%o%'")," ",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"WHERE name LIKE '%_r%'")," ",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"WHERE name LIKE '%a_%'")," ",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"WHERE name LIKE '%a__%'")," ",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"WHERE name LIKE 'aldo'")," ",(0,l.kt)("br",null))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MATCH")),(0,l.kt)("td",{parentName:"tr",align:null},"String matching using FTS"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'WHERE v1-index MATCH "value"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"BETWEEN")),(0,l.kt)("td",{parentName:"tr",align:null},"Logically equivalent to ",(0,l.kt)("inlineCode",{parentName:"td"},"v1 >= start AND v1 <= end")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 BETWEEN 10 AND 100"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS NULL")," - see 3"),(0,l.kt)("td",{parentName:"tr",align:null},"Equal to ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 IS NULL"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS NOT NULL")),(0,l.kt)("td",{parentName:"tr",align:null},"Not equal to ",(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 IS NOT NULL"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},"Equal to MISSING"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 IS MISSING"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS NOT MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},"Not equal to MISSING"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 IS NOT MISSING"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS VALUED")),(0,l.kt)("td",{parentName:"tr",align:null},"Logically equivalent to ",(0,l.kt)("inlineCode",{parentName:"td"},"IS NOT NULL AND MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 IS VALUED"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS NOT VALUED")),(0,l.kt)("td",{parentName:"tr",align:null},"Logically equivalent to ",(0,l.kt)("inlineCode",{parentName:"td"},"IS NULL OR MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 IS NOT VALUED"))))),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Matching is case-insensitive for ASCII characters, case-sensitive for\nnon-ASCII."),(0,l.kt)("li",{parentName:"ol"},"Use of ",(0,l.kt)("inlineCode",{parentName:"li"},"IS")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"IS NOT")," is limited to comparing ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"MISSING")," values\n(this encompasses ",(0,l.kt)("inlineCode",{parentName:"li"},"VALUED"),"). This is different from ",(0,l.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/QueryBuilder-class.html"},(0,l.kt)("inlineCode",{parentName:"a"},"QueryBuilder")),", in\nwhich they operate as equivalents of ",(0,l.kt)("inlineCode",{parentName:"li"},"==")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"!="),"."))),(0,l.kt)(u,{id:4,title:"Comparing NULL and MISSING values using IS",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Op"),(0,l.kt)("th",{parentName:"tr",align:null},"Non-",(0,l.kt)("inlineCode",{parentName:"th"},"NULL")," Value"),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"NULL")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"MISSING")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS NULL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS NOT NULL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS NOT MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS VALUED")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IS NOT VALUED")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")))))),(0,l.kt)("h4",{id:"logical-operators"},"Logical Operators"),(0,l.kt)("h5",{id:"purpose-21"},"Purpose"),(0,l.kt)("p",null,"Logical operators combine expressions using the following boolean logic rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TRUE")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"TRUE"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"."),(0,l.kt)("li",{parentName:"ul"},"Numbers ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"0.0")," are ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"."),(0,l.kt)("li",{parentName:"ul"},"Arrays and dictionaries are ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"."),(0,l.kt)("li",{parentName:"ul"},"Strings and Blobs are ",(0,l.kt)("inlineCode",{parentName:"li"},"TRUE")," if the values are casted as a non-zero or ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"\nif the values are casted as ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"0.0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"MISSING")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"MISSING"),".")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"This is different from SQL++ for Server, where:"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"MISSING"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE")," are ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"."),(0,l.kt)("li",{parentName:"ul"},"Numbers ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"."),(0,l.kt)("li",{parentName:"ul"},"Empty strings, arrays, and objects are ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"."),(0,l.kt)("li",{parentName:"ul"},"All other values are ",(0,l.kt)("inlineCode",{parentName:"li"},"TRUE"),"."))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"TOBOOLEAN(expr)")," function to convert a value based on SQL++ for Server\nboolean value rules.")),(0,l.kt)(u,{id:5,title:"Logical Operators",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Op"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"AND")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if the operand expressions evaluate to ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"),"; otherwise ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".",(0,l.kt)("br",null),(0,l.kt)("br",null),"If an operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," and the other is ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),", if the other operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")," it returns ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".",(0,l.kt)("br",null),(0,l.kt)("br",null),"If an operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," and the other is ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),", if the other operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")," it returns ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),"."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE city = 'San Francisco' AND status = TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OR")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if one of the operand expressions is evaluated to ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"),"; otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),(0,l.kt)("br",null),(0,l.kt)("br",null),"If an operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),", the operation will result in ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," if the other operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if the other operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"),".",(0,l.kt)("br",null),(0,l.kt)("br",null),"If an operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),", the operation will result in ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if the other operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if the other operand is ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"),"."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE city = 'San Francisco' OR city = 'Santa Clara'")))))),(0,l.kt)(u,{id:6,title:"Logical Operators Table",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"a")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"b")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"a AND b")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"a OR b")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NULL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),", see 5"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NULL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),", see 5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NULL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),", see 5"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),", see 5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NULL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),", see 5"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),", see 5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),", see 6"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),", see 7")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NULL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),", see 6"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),", see 7")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"))))),(0,l.kt)("p",null,"This differs from SQL++ for Server in the following instances:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ol",{parentName:"li",start:5},(0,l.kt)("li",{parentName:"ol"},"Server will return: ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," instead of ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ol",{parentName:"li",start:6},(0,l.kt)("li",{parentName:"ol"},"Server will return: ",(0,l.kt)("inlineCode",{parentName:"li"},"MISSING")," instead of ",(0,l.kt)("inlineCode",{parentName:"li"},"FALSE"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("ol",{parentName:"li",start:7},(0,l.kt)("li",{parentName:"ol"},"Server will return: ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," instead of ",(0,l.kt)("inlineCode",{parentName:"li"},"MISSING"),"."))))),(0,l.kt)("h4",{id:"string-operators"},"String Operators"),(0,l.kt)("h5",{id:"purpose-22"},"Purpose"),(0,l.kt)("p",null,"A single string operator is provided. It enables string concatenation."),(0,l.kt)(u,{id:7,title:"String Operators",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Op"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"&#124&#124")),(0,l.kt)("td",{parentName:"tr",align:null},"Concatenating"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SELECT firstName &#124&#124 lastName AS fullName FROM db")))))),(0,l.kt)("h3",{id:"unary-operators"},"Unary Operators"),(0,l.kt)("h4",{id:"purpose-23"},"Purpose"),(0,l.kt)("p",null,"Three unary operators are provided. They operate by modifying an expression,\nmaking it numerically positive or negative, or by logically negating its value\n(",(0,l.kt)("inlineCode",{parentName:"p"},"TRUE")," becomes ",(0,l.kt)("inlineCode",{parentName:"p"},"FALSE"),")."),(0,l.kt)("h4",{id:"syntax-19"},"Syntax"),(0,l.kt)(s,{id:44,title:"Unary Operators Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"unaryOperator = ( + | - | NOT ) _ expression\n"))),(0,l.kt)(u,{id:8,title:"Unary Operators",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Op"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"+")),(0,l.kt)("td",{parentName:"tr",align:null},"Positive value"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 = +10"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-")),(0,l.kt)("td",{parentName:"tr",align:null},"Negative value"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE v1 = -10"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NOT")),(0,l.kt)("td",{parentName:"tr",align:null},"Logical Negate operator, see 8"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'WHERE "James" NOT IN contactsList'))))),(0,l.kt)("ol",{start:8},(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"NOT")," operator is often used in conjunction with operators such as ",(0,l.kt)("inlineCode",{parentName:"li"},"IN"),",\n",(0,l.kt)("inlineCode",{parentName:"li"},"LIKE"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"MATCH"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"BETWEEN")," operators.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NOT")," operation on ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," value returns ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NOT")," operation on ",(0,l.kt)("inlineCode",{parentName:"li"},"MISSING")," value returns ",(0,l.kt)("inlineCode",{parentName:"li"},"MISSING"),"."))))),(0,l.kt)(u,{id:9,title:"NOT Operators",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"a")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"NOT a")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NULL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")))))),(0,l.kt)("h3",{id:"collate-operator"},(0,l.kt)("inlineCode",{parentName:"h3"},"COLLATE")," Operator"),(0,l.kt)("h4",{id:"purpose-24"},"Purpose"),(0,l.kt)("p",null,"Collate operators specify how a string comparison is conducted."),(0,l.kt)("h4",{id:"usage"},"Usage"),(0,l.kt)("p",null,"The collate operator is used in conjunction with string comparison expressions\nand ",(0,l.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clauses. It allows for one or more collations. If multiple\ncollations are used, the collations need to be specified in a parenthesis. When\nonly one collation is used, the parenthesis is optional."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Collation is not supported by SQL++ for Server.")),(0,l.kt)("h4",{id:"syntax-20"},"Syntax"),(0,l.kt)(s,{id:45,title:"COLLATE Operator Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"collate   = COLLATE _ ( collation | '(' collation ( _ collation )+ ')' )\ncollation = NO? (UNICODE | CASE | DIACRITICS)\n"))),(0,l.kt)("h4",{id:"arguments-7"},"Arguments"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The available collation options are:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"UNICODE"),": Conduct a Unicode comparison; the default is to do ASCII\ncomparison."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"CASE"),": Conduct case-sensitive comparison"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DIACRITIC"),": Take accents and diacritics into account in the comparison; On\nby default."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NO"),": This can be used as a prefix to the other collations, to disable\nthem. For example, use ",(0,l.kt)("inlineCode",{parentName:"li"},"NOCASE")," to enable case-insensitive comparison.")))),(0,l.kt)("h4",{id:"example-20"},"Example"),(0,l.kt)(s,{id:46,title:"COLLATE Operator Example",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT department\nFROM employees\nWHERE name = "fred" COLLATE UNICODE;\n\nSELECT department\nFROM employees\nWHERE name = "fred" COLLATE (UNICODE CASE);\n\nSELECT name\nFROM employees\nORDER BY name COLLATE (UNICODE DIACRITIC);\n'))),(0,l.kt)("h3",{id:"conditional-operator"},"Conditional Operator"),(0,l.kt)("h4",{id:"purpose-25"},"Purpose"),(0,l.kt)("p",null,"The conditional (or ",(0,l.kt)("inlineCode",{parentName:"p"},"CASE"),") operator evaluates conditional logic in a similar\nway to the ",(0,l.kt)("inlineCode",{parentName:"p"},"IF"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"ELSE")," operator."),(0,l.kt)("h4",{id:"syntax-21"},"Syntax"),(0,l.kt)(s,{id:47,title:"Conditional Operators Syntax",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"case = CASE _ ( expression _ )?\n       ( WHEN _ expression _ THEN _ expression _ )+\n       ( ELSE _ expression _)?\n       END\n")),(0,l.kt)("p",null,"Both ",(0,l.kt)("em",{parentName:"p"},"Simple Case")," and ",(0,l.kt)("em",{parentName:"p"},"Searched Case")," expressions are supported. The syntactic\ndifference being that the ",(0,l.kt)("em",{parentName:"p"},"Simple Case")," expression has an expression after the\n",(0,l.kt)("inlineCode",{parentName:"p"},"CASE")," keyword."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Simple Case Expression",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If the ",(0,l.kt)("inlineCode",{parentName:"li"},"CASE")," expression is equal to the first ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," expression, the\nresult is the ",(0,l.kt)("inlineCode",{parentName:"li"},"THEN")," expression."),(0,l.kt)("li",{parentName:"ul"},"Otherwise, any subsequent ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," clauses are evaluated in the same way."),(0,l.kt)("li",{parentName:"ul"},"If no match is found, the result of the ",(0,l.kt)("inlineCode",{parentName:"li"},"CASE")," expression is the ",(0,l.kt)("inlineCode",{parentName:"li"},"ELSE"),"\nexpression, or ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," if no ",(0,l.kt)("inlineCode",{parentName:"li"},"ELSE")," expression was provided."))),(0,l.kt)("li",{parentName:"ol"},"Searched Case Expression",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If the first ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," expression is ",(0,l.kt)("inlineCode",{parentName:"li"},"TRUE"),", the result of this expression is\nits ",(0,l.kt)("inlineCode",{parentName:"li"},"THEN")," expression."),(0,l.kt)("li",{parentName:"ul"},"Otherwise, subsequent ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," clauses are evaluated in the same way."),(0,l.kt)("li",{parentName:"ul"},"If no ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," clause evaluate to ",(0,l.kt)("inlineCode",{parentName:"li"},"TRUE"),", then the result of the expression\nis the ",(0,l.kt)("inlineCode",{parentName:"li"},"ELSE")," expression, or ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," if no ",(0,l.kt)("inlineCode",{parentName:"li"},"ELSE")," expression was provided."))))),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)(s,{id:48,title:"Simple Case",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  CASE state\n    WHEN 'CA'\n      THEN 'Local'\n    ELSE 'Non-Local'\n  END\nFROM user;\n"))),(0,l.kt)("h4",{id:"examples-1"},"Examples"),(0,l.kt)(s,{id:49,title:"Searched Case",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  CASE\n    WHEN shippedOn IS NOT NULL\n      THEN 'SHIPPED'\n    ELSE 'NOT-SHIPPED'\n  END\nFROM orders;\n"))),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"purpose-26"},"Purpose"),(0,l.kt)("p",null,"Functions provide specialised operations through a generalized syntax."),(0,l.kt)("h3",{id:"syntax-22"},"Syntax"),(0,l.kt)(s,{id:50,title:"Functions Syntax",mdxType:"CodeExample"},(0,l.kt)("p",null,"The function syntax is the same as C-style language function syntax. It starts\nwith the function name, followed by optional arguments inside parentheses."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"function      = functionName _? '(' ( _? expression ( _? ',' _? expression )* _? )? ')'\nfunctionName  = IDENTIFIER\n"))),(0,l.kt)("h3",{id:"aggregation-functions"},"Aggregation Functions"),(0,l.kt)(u,{id:10,title:"Aggregation Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"AVG(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the average of all numeric values in the group.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"COUNT(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the count of all values in the group.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MIN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the minimum numeric value in the group.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MAX(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the maximum numeric value in the group.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SUM(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the sum of all numeric values in the group."))))),(0,l.kt)("h3",{id:"array-functions"},"Array Functions"),(0,l.kt)(u,{id:11,title:"Array Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_AGG(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns an array of the non-",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," group values in the input expression, including ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_AVG(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the average of all non-",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," number values in the array; or ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if there are none.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_CONTAINS(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if the value exists in the array; otherwise ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_COUNT(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the number of non-",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," values in the array.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_IFNULL(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the first non-",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," value in the array.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_MAX(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the largest non-",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),", non_MISSING value in the array.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_MIN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the smallest non-",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),", non_MISSING value in the array.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_LENGTH(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the length of the array.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_SUM(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the sum of all non-",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," numeric value in the array."))))),(0,l.kt)("h3",{id:"conditional-functions"},"Conditional Functions"),(0,l.kt)(u,{id:12,title:"Conditional Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IFMISSING(value, ...)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the first non-",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," value, or ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if all values are ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IFMISSINGORNULL(value, ...)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the first non-",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," and non-",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," value, or ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if all values are ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IFNULL(value, ...)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the first non-",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),", or ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if all values are ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MISSINGIF(value, other)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," when ",(0,l.kt)("inlineCode",{parentName:"td"},"value = other"),"; otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"value"),". ",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," if either or both expressions are ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".",(0,l.kt)("br",null)," Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if either or both expressions are ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NULLIF(value, other)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," when ",(0,l.kt)("inlineCode",{parentName:"td"},"value = other"),"; otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"value"),". ",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," if either or both expressions are ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".",(0,l.kt)("br",null)," Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if either or both expressions are ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),"."))))),(0,l.kt)("h3",{id:"date-and-time-functions"},"Date and Time Functions"),(0,l.kt)(u,{id:13,title:"Date and Time Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STR_TO_MILLIS(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the number of milliseconds since the unix epoch of the given ISO 8601 date input string.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STR_TO_UTC(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the ISO 8601 UTC date time string of the given ISO 8601 date input string.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MILLIS_TO_STR(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a ISO 8601 date time string in device local timezone of the given number of milliseconds since the unix epoch expression.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MILLIS_TO_UTC(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the UTC ISO 8601 date time string of the given number of milliseconds since the unix epoch expression."))))),(0,l.kt)("h3",{id:"full-text-search-functions"},"Full Text Search Functions"),(0,l.kt)(u,{id:14,title:"FTS Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MATCH(indexName, term"),")`"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if ",(0,l.kt)("inlineCode",{parentName:"td"},"term")," expression matches the FTS indexed document. ",(0,l.kt)("inlineCode",{parentName:"td"},"indexName")," identifies the FTS index to search for matches."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE MATCH(description, 'couchbase')"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"RANK(indexName)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a numeric value indicating how well the current query result matches the full-text query when performing the MATCH. indexName is an IDENTIFIER for the FTS index."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"WHERE MATCH(description, 'couchbase') ORDER BY RANK(description)")))))),(0,l.kt)("h3",{id:"maths-functions"},"Maths Functions"),(0,l.kt)(u,{id:15,title:"Maths Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ABS(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the absolute value of a number.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ACOS(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the arc cosine in radians.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ASIN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the arcsine in radians.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ATAN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the arctangent in radians.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ATAN2(a, b)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the arctangent of ",(0,l.kt)("inlineCode",{parentName:"td"},"a")," / ",(0,l.kt)("inlineCode",{parentName:"td"},"b"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"CEIL(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the smallest integer not less than the number.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"COS(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the cosine of an angle in radians.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DIV(a, b)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns float division of ",(0,l.kt)("inlineCode",{parentName:"td"},"a")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"b"),". Both ",(0,l.kt)("inlineCode",{parentName:"td"},"a")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"b")," are cast to a double number before division. The returned result is always a double.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DEGREES(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Converts radians to degrees.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"E()")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the e constant, which is the base of natural logarithms.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"EXP(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the natural exponential of a number.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOOR(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns largest integer not greater than the number.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IDIV(a, b)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns integer division of ",(0,l.kt)("inlineCode",{parentName:"td"},"a")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"b"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns log base e.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LOG(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns log base 10.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"PI()")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the pi constant.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"POWER(a, b)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"a")," to the ",(0,l.kt)("inlineCode",{parentName:"td"},"b"),"th power.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"RADIANS(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Converts degrees to radians.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ROUND(value (, digits)?)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the rounded value to the given number of integer digits to the right of the decimal point (left if digits is negative). Digits are 0 if not given.",(0,l.kt)("br",null),(0,l.kt)("br",null)," The function uses Rounding Away From Zero convention to round midpoint values to the next number away from zero (so, for example, ",(0,l.kt)("inlineCode",{parentName:"td"},"ROUND(1.75)")," returns 1.8 but ",(0,l.kt)("inlineCode",{parentName:"td"},"ROUND(1.85)")," returns 1.9.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ROUND_EVEN(value (, digits)?)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns rounded value to the given number of integer digits to the right of the decimal point (left if digits is negative). Digits are 0 if not given.",(0,l.kt)("br",null),(0,l.kt)("br",null)," The function uses Rounding to Nearest Even (Banker's Rounding) convention which rounds midpoint values to the nearest even number (for example, both ",(0,l.kt)("inlineCode",{parentName:"td"},"ROUND_EVEN(1.75)")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"ROUND_EVEN(1.85)")," return 1.8).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SIGN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns -1 for negative, 0 for zero, and 1 for positive numbers.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SIN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns sine of an angle in radians.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SQRT(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the square root.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TAN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns tangent of an angle in radians.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRUNC(value (, digits)?)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a truncated number to the given number of integer ",(0,l.kt)("inlineCode",{parentName:"td"},"digits")," to the right of the decimal point (left if digits is negative). Digits are 0 if not given."))))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The behavior of the ",(0,l.kt)("inlineCode",{parentName:"p"},"ROUND()")," function is different from SQL++ for Server\n",(0,l.kt)("inlineCode",{parentName:"p"},"ROUND()"),", which rounds the midpoint values using Rounding to Nearest Even\nconvention.")),(0,l.kt)("h3",{id:"pattern-searching-functions"},"Pattern Searching Functions"),(0,l.kt)(u,{id:16,title:"Pattern Searching Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"REGEXP_CONTAINS(value, pattern)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if the string value contains any sequence that matches the regular expression pattern.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"REGEXP_LIKE(value, pattern)")),(0,l.kt)("td",{parentName:"tr",align:null},"Return ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if the string value exactly matches the regular expression pattern.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"REGEXP_POSITION(value, pattern)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the first position of the occurrence of the regular expression pattern within the input string expression. Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"-1")," if no match is found. Position counting starts from zero.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"REGEXP_REPLACE(value, pattern, repl [, n])")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a new string with occurrences of ",(0,l.kt)("inlineCode",{parentName:"td"},"pattern")," replaced with ",(0,l.kt)("inlineCode",{parentName:"td"},"repl"),". If ",(0,l.kt)("inlineCode",{parentName:"td"},"n")," is given, at the most ",(0,l.kt)("inlineCode",{parentName:"td"},"n")," replacements are performed. If ",(0,l.kt)("inlineCode",{parentName:"td"},"n")," is not given, all matching occurrences are replaced."))))),(0,l.kt)("h3",{id:"string-functions"},"String Functions"),(0,l.kt)(u,{id:17,title:"String Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"CONTAINS(value, substring)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if the substring exists within the input string, otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LENGTH(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the length of a string. The length is defined as the number of characters within the string.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LOWER(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the lower-case string of the input string.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LTRIM(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the string with all leading whitespace characters removed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"RTRIM(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the string with all trailing whitespace characters removed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TRIM(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the string with all leading and trailing whitespace characters removed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UPPER(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the upper-case string of the input string."))))),(0,l.kt)("h3",{id:"type-checking-functions"},"Type Checking Functions"),(0,l.kt)(u,{id:18,title:"Type Checking Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ISARRAY(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," is an array, otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ISATOM(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," is a boolean, number, or string, otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ISBOOLEAN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," is a boolean, otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ISNUMBER(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," is a number, otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ISOBJECT(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," is an object (dictionary), otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ISSTRING(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," if ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," is a string, otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TYPE(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns one of the following strings, based on the value of ",(0,l.kt)("inlineCode",{parentName:"td"},"value"),":",(0,l.kt)("br",null),'\u2022 "missing"',(0,l.kt)("br",null),'\u2022 "null"',(0,l.kt)("br",null),'\u2022 "boolean"',(0,l.kt)("br",null),'\u2022 "number"',(0,l.kt)("br",null),'\u2022 "string"',(0,l.kt)("br",null),'\u2022 "array"',(0,l.kt)("br",null),'\u2022 "object"',(0,l.kt)("br",null),'\u2022 "binary"'))))),(0,l.kt)("h3",{id:"type-conversion-functionsunctions"},"Type Conversion Functionsunctions"),(0,l.kt)(u,{id:19,title:"Type Conversion Functions",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOARRAY(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),".",(0,l.kt)("br",null),"Returns an array value as is.",(0,l.kt)("br",null),"Returns all other values wrapped in an array.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOATOM(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),".",(0,l.kt)("br",null),"Returns an array of a single item if the value is an array.",(0,l.kt)("br",null),"Returns an object of a single key/value pair if the value is an object.",(0,l.kt)("br",null),"Returns a boolean, number, or string value as is.",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," for all other values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOBOOLEAN(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"0")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"NaN"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE")," if the value is an empty string, array, and object.",(0,l.kt)("br",null),"Return ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE")," for all other values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TONUMBER(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"0")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"1")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"),".",(0,l.kt)("br",null),"Returns a number value as is.",(0,l.kt)("br",null),"Parses a string value in to a number.",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," for all other values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOOBJECT(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),".",(0,l.kt)("br",null),"Returns an object value as is.",(0,l.kt)("br",null),"Returns an empty object for all other values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOSTRING(value)")),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSING"),".",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," if the value is ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL"),".",(0,l.kt)("br",null),'Returns "false" if the value is ',(0,l.kt)("inlineCode",{parentName:"td"},"FALSE"),".",(0,l.kt)("br",null),'Returns "true" if the value is ',(0,l.kt)("inlineCode",{parentName:"td"},"TRUE"),".",(0,l.kt)("br",null),"Returns a string representation of a number value.",(0,l.kt)("br",null),"Returns a string value as is.",(0,l.kt)("br",null),"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"NULL")," for all other values."))))),(0,l.kt)("h2",{id:"querybuilder-differences"},"QueryBuilder Differences"),(0,l.kt)("p",null,"SQL++ for Mobile queries support all ",(0,l.kt)("inlineCode",{parentName:"p"},"QueryBuilder")," features. See ",(0,l.kt)("a",{parentName:"p",href:"#table-20"},"Table 20"),"\nfor the features supported by SQL++ for Mobile but not by ",(0,l.kt)("inlineCode",{parentName:"p"},"QueryBuilder"),"."),(0,l.kt)(u,{id:20,title:"QueryBuilder Differences",mdxType:"Table"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Category"),(0,l.kt)("th",{parentName:"tr",align:null},"Components"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Conditional Operator"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"CASE(WHEN ... THEN ... ELSE ...)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Array Functions"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_AGG"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_AVG"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_COUNT"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_IFNULL"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_MAX"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_MIN"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ARRAY_SUM"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Conditional Functions"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"IFMISSING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"IFMISSINGORNULL"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"IFNULL"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"MISSINGIF"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"NULLIF"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"MATCH"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"RANK"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"DIV"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"IDIV"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ROUND_EVEN"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pattern Matching Functions"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"REGEXP_CONTAINS"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"REGEXP_LIKE"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"REGEXP_POSITION"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"REGEXP_REPLACE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Type Checking Functions"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ISARRAY"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ISATOM"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ISBOOLEAN"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ISNUMBER"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ISOBJECT"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ISSTRING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"TYPE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Type Conversion Functions"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TOARRAY"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"TOATOM"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"TOBOOLEAN"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"TONUMBER"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"TOOBJECT"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"TOSTRING")))))),(0,l.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,l.kt)("p",null,"You can provide runtime parameters to your SQL++ query to make it more flexible.\nTo specify substitutable parameters within your query string prefix the name\nwith ",(0,l.kt)("inlineCode",{parentName:"p"},"$")," \u2014 see: ",(0,l.kt)("a",{parentName:"p",href:"#example-51"},"Example 51"),"."),(0,l.kt)(s,{id:51,title:"Running an SQL++ Query",mdxType:"CodeExample"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final db = await Database.openAsync('hotel');\nfinal query = await db.createQuery(\n  r'''\n  SELECT META().id AS docId\n  FROM hotel\n  WHERE country = $country\n  ''',\n);\nquery.parameters = Parameters({'country': 'France'});\nfinal resultSet = query.execute();\n")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Define a parameter placeholder ",(0,l.kt)("inlineCode",{parentName:"li"},"$country"),"."),(0,l.kt)("li",{parentName:"ol"},"Set the value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"country")," parameter."))))}h.isMDXComponent=!0}}]);