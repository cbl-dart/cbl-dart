"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[819],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(a),h=i,b=d["".concat(s,".").concat(h)]||d[h]||u[h]||r;return a?n.createElement(b,o(o({ref:t},c),{},{components:a})):n.createElement(b,o({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var l=2;l<r;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7670:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>b,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var n=a(7462),i=(a(7294),a(3905));const r={description:"How to Handle Pre-Built Couchbase Lite Databases in Your App",abstract:"This content explains how to include a snapshot of a pre-built database in your package to shorten initial sync time and reduce bandwidth use."},o="Pre-built Database",p={unversionedId:"prebuilt-database",id:"prebuilt-database",title:"Pre-built Database",description:"How to Handle Pre-Built Couchbase Lite Databases in Your App",source:"@site/docs/prebuilt-database.mdx",sourceDirName:".",slug:"/prebuilt-database",permalink:"/prebuilt-database",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/prebuilt-database.mdx",tags:[],version:"current",frontMatter:{description:"How to Handle Pre-Built Couchbase Lite Databases in Your App",abstract:"This content explains how to include a snapshot of a pre-built database in your package to shorten initial sync time and reduce bandwidth use."},sidebar:"sidebar",previous:{title:"Databases",permalink:"/databases"},next:{title:"Documents",permalink:"/documents"}},s={},l=[{value:"Overview",id:"overview",level:2},{value:"To use a Pre-built Database",id:"to-use-a-pre-built-database",level:2},{value:"Creating Pre-built Database",id:"creating-pre-built-database",level:2},{value:"Bundle a Database with an Application",id:"bundle-database-with-application",level:2},{value:"Database Encryption",id:"database-encryption",level:2},{value:"Using Pre-built Database on App Launch",id:"using-pre-built-database-on-app-launch",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},u=c("EnterpriseFeatureCallout"),d=c("CodeExample"),h={toc:l};function b(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pre-built-database"},"Pre-built Database"),(0,i.kt)("metaheader",null),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Couchbase Lite's support for pre-built databases means you can pre-load your app\nwith data instead of syncing it down from Sync Gateway during startup. This\nmight benefit, for example, a mobile application developer striving to minimize\nconsumer wait time (arising from data setup) on initial install and launch of\nthe application."),(0,i.kt)("p",null,"Avoiding an initial bulk sync will help reduce startup time and network transfer\ncosts, leading to a better consumer experience. It is typically more efficient\nto download bulk data using the HTTP/FTP stream employed during the application\ninstallation than to install a smaller application bundle and then have to use a\nreplicator to pull-in the bulk data."),(0,i.kt)("p",null,"This prepackaging of the data typically applies to public/shared, non-user\nspecific data that is mostly static. Even if the data is not static, you can\nstill benefit from preloading it and only syncing the changed documents on\nstartup."),(0,i.kt)("p",null,"The initial sync of any pre-built database will pull-in any content changes on\nthe server that occurred after its incorporation into the app, quickly bringing\nthe database up to date."),(0,i.kt)("h2",{id:"to-use-a-pre-built-database"},"To use a Pre-built Database"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a new Couchbase Lite database with the required data set - see\n",(0,i.kt)("a",{parentName:"li",href:"#creating-pre-built-database"},"Creating Pre-built database"),"."),(0,i.kt)("li",{parentName:"ol"},"Incorporate the pre-built database with your app bundle as an\nasset/resource - see\n",(0,i.kt)("a",{parentName:"li",href:"#bundle-database-with-application"},"Bundle a Database with an Application"),".\nFor Flutter apps it's recommended you zip the prebuilt database and then\nextract it to keep the size of your mobile app down."),(0,i.kt)("li",{parentName:"ol"},"Adjust the start-up logic of your app to check for the presence of the\nrequired database. If the database doesn't already exist, create one using\nthe bundled pre-built database. Then initiate a sync to update the data - see\n",(0,i.kt)("a",{parentName:"li",href:"#using-pre-built-database-on-app-launch"},"Using Pre-built Database on App Launch"),".")),(0,i.kt)("h2",{id:"creating-pre-built-database"},"Creating Pre-built Database"),(0,i.kt)("p",null,"These steps should form part of your build and release process:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a fresh Couchbase Lite database (every time)."),(0,i.kt)("admonition",{parentName:"li",title:"Important",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Always create a new pre-built database for each app version"),". This ensures\nthat there will be no ",(0,i.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint"},(0,i.kt)("strong",{parentName:"a"},"checkpoint"))," missmatch between the\npre-built database and the replicator configuration that the app uses."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Otherwise"),": The cached ",(0,i.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint"},(0,i.kt)("strong",{parentName:"a"},"checkpoint"))," in the packaged\ndatabase might be invalidated on the first synchronization and the app will\nattempt to pull the data down again."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Pull the data from Capella App Services or Sync Gateway into the new\nCouchbase Lite database."),(0,i.kt)("admonition",{parentName:"li",title:"Important",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Ensure the replication used to populate Couchbase Lite database ",(0,i.kt)("strong",{parentName:"p"},"uses the\nexact same remote URL and replication config parameters (channels and\nfilters)")," as those your app will use when it is running."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Otherwise"),": There will be a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint"},(0,i.kt)("strong",{parentName:"a"},"checkpoint"))," mismatch and the\napp will attempt to pull the data down again."),(0,i.kt)("p",{parentName:"admonition"},"So don't, for instance, create a pre-built database against a staging Capella\nApp Services or Sync Gateway server and try to use that within a production\napp that syncs against a production Sync Gateway.")),(0,i.kt)("p",{parentName:"li"},"You can use the cblite tool (cblite cp) for this \u2014\u2009see:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/couchbaselabs/couchbase-mobile-tools/blob/master/Documentation.md#cp-aka-export-import-push-pull"},"cblite cp (export, import, push, pull)"),"\non GitHub.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create the ",(0,i.kt)("strong",{parentName:"p"},"same")," indexes the app will use (wait for the replication to\nfinish before doing this)."))),(0,i.kt)("h2",{id:"bundle-database-with-application"},"Bundle a Database with an Application"),(0,i.kt)("p",null,"Copy the database into your app package. It's recommended you compress the\ndatabase using zip to keep the size of your mobile app down."),(0,i.kt)("p",null,"Put it in an appropriate place (for example, an assets or resource folder)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Alternatively"),": Rather than bundling the database within the app, the app\ncould pull the database down from a CDN server on launch, but this add to the\ntime it takes for your app to bootstrap."),(0,i.kt)("h2",{id:"database-encryption"},"Database Encryption"),(0,i.kt)(u,{mdxType:"EnterpriseFeatureCallout"}),(0,i.kt)("p",null,"If you are using en encrypted database, note that ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Database/copy.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Database.copy"))," does not\nchange the encryption key. The encryption key specified in the config when\nopening the database is the encryption key used for both the original database\nand copied database."),(0,i.kt)("p",null,"If you copied an un-encrypted database and want to apply encryption to the copy,\nor if you want to change (or remove) the encryption key applied to the copy:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide the original encryption-key (if any) in the database copy's\nconfiguration using DatabaseConfiguration\n",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DatabaseConfiguration/encryptionKey.html"},(0,i.kt)("inlineCode",{parentName:"a"},"DatabaseConfiguration.encryptionKey")),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open the database copy.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Database/changeEncryptionKey.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Database.changeEncryptionKey"))," on the database copy to set the\nrequired encryption key."),(0,i.kt)("admonition",{parentName:"li",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"To remove encryption on the copy, provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," encryption-key.")))),(0,i.kt)("h2",{id:"using-pre-built-database-on-app-launch"},"Using Pre-built Database on App Launch"),(0,i.kt)("p",null,"During the application start-up logic, check if database exists in the required\nlocation, and if not:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Locate the pre-packaged database (for example, in the assets or other\nresource folder).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Copy the pre-packaged database to the required location."),(0,i.kt)("p",{parentName:"li"},"Use the API's ",(0,i.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Database/copy.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Database.copy"))," method \u2014\u2009see: ",(0,i.kt)("a",{parentName:"p",href:"#example-1"},"Example 1"),". This ensures\nthat a unique UUID is generated for each copy."),(0,i.kt)("admonition",{parentName:"li",title:"IMPORTANT",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Do not copy the database using any other method."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Otherwise"),": Each copy of the app will invalidate the other apps'\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint"},(0,i.kt)("strong",{parentName:"a"},"checkpoints"))," because a new UUID was not generated."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open the database; you can now start querying the data and using it.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Start a pull replication, to sync any changes."),(0,i.kt)("p",{parentName:"li"},"The replicator uses the pre-built database's ",(0,i.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/couchbase-lite/current/swift/refer-glossary.html#checkpoint"},(0,i.kt)("strong",{parentName:"a"},"checkpoint"))," as\nthe timestamp to sync from; only documents changed since then are synced."),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Start your normal application logic immediately, unless it is essential to\nhave the absolute up-to-date data set to begin. That way the user is not\nkept hanging around watching a progress indicator. They can begin\ninteracting with your app whilst any out-of-data data is being updated.")))),(0,i.kt)(d,{id:1,title:"Decompress and Copy Database using API",mdxType:"CodeExample"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"const databaseName = 'my-database';\nconst prebuiltDatabaseAssetFileName = 'asset/database/prebuiltDatabase.zip';\nfinal documentsDirectory = await getApplicationDocumentsDirectory();\nfinal databasesDirectory = '$documentsDirectory/databases';\nfinal prebuiltDatabaseFileName =\n    '$databasesDirectory/$databaseName-prebuilt.cblite2';\n\n// Create the database if it doesn't already exist.\nif (!Database.existsSync(databaseName, directory: databasesDirectory)) {\n  final prebuiltDatabaseZip =\n      await rootBundle.load(prebuiltDatabaseAssetFileName);\n\n  if (prebuiltDatabaseZip.lengthInBytes > 0) {\n    // Decompress the zip file into bytes and then convert them into a\n    // Uint8List, which is required by the Archive framework.\n    final archive =\n        ZipDecoder().decodeBytes(prebuiltDatabaseZip.buffer.asUint8List());\n\n    // Loop through directories and files in the zip file and create them.\n    for (final file in archive) {\n      final fileName = '$prebuiltDatabaseFileName/${file.name}';\n      if (file.isFile) {\n        final fileData = file.content as List<int>;\n        File(fileName)\n          ..createSync(recursive: true)\n          ..writeAsBytesSync(fileData);\n      } else {\n        Directory(fileName).createSync(recursive: true);\n      }\n    }\n\n    final config = DatabaseConfiguration(directory: databasesDirectory);\n    await Database.copy(\n      from: prebuiltDatabaseFileName,\n      name: databaseName,\n      config: config,\n    );\n  }\n}\n"))))}b.isMDXComponent=!0}}]);