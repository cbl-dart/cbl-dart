"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[918],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>p});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=c(a),p=o,h=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return a?n.createElement(h,l(l({ref:t},d),{},{components:a})):n.createElement(h,l({ref:t},d))}));function p(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),o=a(6010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(7462),o=a(7294),r=a(6010),l=a(2389),i=a(7392),s=a(7094),c=a(2466);const d="tabList__CuJ",u="tabItem_LNqP";function m(e){var t;const{lazy:a,block:l,defaultValue:m,values:p,groupId:h,className:b}=e,k=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=p??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,i.l)(y,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===m?m:m??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==g&&!y.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,s.U)(),[D,w]=(0,o.useState)(g),C=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=h){const e=v[h];null!=e&&e!==D&&y.some((t=>t.value===e))&&w(e)}const S=e=>{const t=e.currentTarget,a=C.indexOf(t),n=y[a].value;n!==D&&(x(t),w(n),null!=h&&N(h,String(n)))},T=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=C.indexOf(e.currentTarget)+1;a=C[t]??C[0];break}case"ArrowLeft":{const t=C.indexOf(e.currentTarget)-1;a=C[t]??C[C.length-1];break}}null==(t=a)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},b)},y.map((e=>{let{value:t,label:a,attributes:l}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:D===t?0:-1,"aria-selected":D===t,key:t,ref:e=>C.push(e),onKeyDown:T,onFocus:S,onClick:S},l,{className:(0,r.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":D===t})}),a??t)}))),a?(0,o.cloneElement)(k.filter((e=>e.props.value===D))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==D})))))}function p(e){const t=(0,l.Z)();return o.createElement(m,(0,n.Z)({key:String(t)},e))}},6497:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>k,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var n=a(7462),o=(a(7294),a(3905)),r=a(5488),l=a(5162);const i={description:"Couchbase Lite Concepts \u2014 Data Model \u2014 Documents",related_content:[{name:"Databases",url:"/databases"},{name:"Blobs",url:"/blobs"}]},s="Documents",c={unversionedId:"documents",id:"documents",title:"Documents",description:"Couchbase Lite Concepts \u2014 Data Model \u2014 Documents",source:"@site/docs/documents.mdx",sourceDirName:".",slug:"/documents",permalink:"/documents",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/documents.mdx",tags:[],version:"current",frontMatter:{description:"Couchbase Lite Concepts \u2014 Data Model \u2014 Documents",related_content:[{name:"Databases",url:"/databases"},{name:"Blobs",url:"/blobs"}]},sidebar:"sidebar",previous:{title:"Pre-built Database",permalink:"/prebuilt-database"},next:{title:"Blobs",permalink:"/blobs"}},d={},u=[{value:"Overview",id:"overview",level:2},{value:"Document Structure",id:"document-structure",level:3},{value:"Data Encoding",id:"data-encoding",level:3},{value:"Fleece Data Encoding",id:"fleece-data-encoding",level:3},{value:"Data Types",id:"data-types",level:3},{value:"JSON",id:"json",level:3},{value:"Constructing a Document",id:"constructing-a-document",level:2},{value:"Data Model",id:"data-model",level:3},{value:"Open a Database",id:"open-a-database",level:3},{value:"Create a Document",id:"create-a-document",level:3},{value:"Create a Dictionary",id:"create-a-dictionary",level:3},{value:"Create an Array",id:"create-an-array",level:3},{value:"Populate a Document",id:"populate-a-document",level:3},{value:"Save a Document",id:"save-a-document",level:3},{value:"Close the Database",id:"close-the-database",level:3},{value:"Working with Data",id:"working-with-data",level:2},{value:"Checking a Document&#39;s Properties",id:"checking-a-documents-properties",level:3},{value:"Date accessors",id:"date-accessors",level:3},{value:"Using Dictionaries",id:"using-dictionaries",level:3},{value:"Using Arrays",id:"using-arrays",level:3},{value:"Using Blobs",id:"using-blobs",level:3},{value:"Document Initializers",id:"document-initializers",level:2},{value:"Mutability",id:"mutability",level:2},{value:"Document Conversion",id:"document-conversion",level:2},{value:"Batch operations",id:"batch-operations",level:2},{value:"Example 8. Batch operations",id:"example-8-batch-operations",level:6},{value:"Document change events",id:"document-change-events",level:2},{value:"Change Streams",id:"change-streams",level:3},{value:"Document Expiration",id:"document-expiration",level:2},{value:"Document Constraints",id:"document-constraints",level:2},{value:"Working with JSON Data",id:"working-with-json-data",level:2},{value:"Documents",id:"documents-1",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Blobs",id:"blobs",level:3},{value:"Query Results",id:"query-results",level:3},{value:"JSON String format",id:"json-string-format",level:4}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},p=m("CodeExample"),h=m("Figure"),b={toc:u};function k(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"documents"},"Documents"),(0,o.kt)("metaheader",null),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("h3",{id:"document-structure"},"Document Structure"),(0,o.kt)("p",null,"In Couchbase Lite the term ",(0,o.kt)("strong",{parentName:"p"},"document")," refers to an entry in the database; a\nrecord, or row in a table if you like."),(0,o.kt)("p",null,"Each document has an ID (primary key in other databases) by which it can be\nlocated. This ID can be automatically generated (as a UUID) or specified\nprogrammatically; the only constraints are that it must be unique within the\ndatabase, and it can't be changed. The document also has a value which contains\nthe actual application data. This value is stored as a dictionary collection of\nkey-value (k-v) pairs where the values themselves may comprise different types\nof data such as numbers, strings, arrays or even nested objects."),(0,o.kt)("h3",{id:"data-encoding"},"Data Encoding"),(0,o.kt)("p",null,"The document body is stored in an internal, efficient, binary form\n(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/couchbase/fleece#readme"},"Fleece"),"). This internal form is\neasily converted into a manageable native dictionary format for manipulation in\napplications."),(0,o.kt)("p",null,"Fleece data is stored in the smallest format that will hold the value, whilst\nmaintaining the integrity of the value."),(0,o.kt)("h3",{id:"fleece-data-encoding"},"Fleece Data Encoding"),(0,o.kt)("p",null,"When working with Dart, the Fleece encoding cycle can result in the Dart type\ninformation being lost. Specifically, ",(0,o.kt)("a",{parentName:"p",href:"https://api.dart.dev/dart-core/DateTime-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"DateTime")),"s are stored as\nstrings. So, care should be taken when storing and recovering data in a\ndocument - or converting that document to JSON and back - using non-explicit\nfunctions such as ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DictionaryInterface/toPlainMap.html"},(0,o.kt)("inlineCode",{parentName:"a"},"DictionaryInterface.toPlainMap")),"."),(0,o.kt)("p",null,"Always use explicit creation of the expected type, whenever the type of result\nis not itself explicit. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final doc = (await database.document(documentId))!;\nfinal map = doc.toPlainMap();\n\nfinal createdAtFromTypedGetter = doc.date('createdAt');\nfinal createdAtFromMap = DateTime.parse(map['createdAt']! as String);\n")),(0,o.kt)("h3",{id:"data-types"},"Data Types"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Document-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Document"))," class offers a set of property accessors for various scalar\ntypes, including boolean, integers, floating-point and strings. These accessors\ntake care of converting to/from JSON encoding, and make sure you get the type\nyou're expecting."),(0,o.kt)("p",null,"So your document content may well comprise one or more supporting data types\nsuch as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Boolean"),(0,o.kt)("li",{parentName:"ul"},"Date"),(0,o.kt)("li",{parentName:"ul"},"Double"),(0,o.kt)("li",{parentName:"ul"},"Float"),(0,o.kt)("li",{parentName:"ul"},"Integer"),(0,o.kt)("li",{parentName:"ul"},"String")),(0,o.kt)("p",null,"In addition to these basic data types Couchbase Lite provides for the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Dictionary-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Dictionary"))," \u2014 Represents a read-only key-value pair collection."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/MutableDictionary-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"MutableDictionary"))," \u2014 Represents a writeable key-value pair collection."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Array-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Array"))," \u2014 Represents a readonly ordered collection of objects."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/MutableArray-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"MutableArray"))," \u2014 Represents a writeable collection of objects."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Blob-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Blob"))," \u2014 Represents an arbitrary piece of binary data.")),(0,o.kt)("h3",{id:"json"},"JSON"),(0,o.kt)("p",null,"Couchbase Lite also provides for the direct handling of JSON data implemented in\nmost cases by the provision of a ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson()")," method on appropriate API classes\n(for example, on ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/MutableDocument-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"MutableDocument")),", ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Dictionary-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Dictionary")),", ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Array-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Array"))," and\n",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Blob-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Blob")),") \u2014 see ",(0,o.kt)("a",{parentName:"p",href:"##working-with-json-data"},"Working with JSON Data"),"."),(0,o.kt)("h2",{id:"constructing-a-document"},"Constructing a Document"),(0,o.kt)("p",null,"An individual document often represents a single instance of an object in\napplication code. A document might be considered equivalent to a row in a\nrelational table; with each of the document's attributes being equivalent to a\ncolumn."),(0,o.kt)("p",null,"Documents can contain nested structures. This allows developers to express\nmany-to-many relationships without requiring a reference or junction table; and\nis naturally expressive of hierarchical data."),(0,o.kt)("p",null,"Most apps will work with one or more documents, persisting them to a local\ndatabase and optionally syncing them, either centrally or to the cloud."),(0,o.kt)("p",null,"In this section we provide an example of how you might create a hotel document,\nwhich provides basic contact details and price data."),(0,o.kt)("h3",{id:"data-model"},"Data Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"hotel: {\n  type: string (value = `hotel`)\n  name: string\n  address: dictionary {\n    street: string\n    city: string\n    state: string\n    country: string\n    code: string\n  }\n  phones: array\n  rate: float\n}\n")),(0,o.kt)("h3",{id:"open-a-database"},"Open a Database"),(0,o.kt)("p",null,"First we open your database. If the database does not already exist, Couchbase\nLite will create it for us."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Get the database (and create it if it doesn't exist).\nfinal database = await Database.openAsync('hoteldb', dbConfig);\n")),(0,o.kt)("p",null,"See: ",(0,o.kt)("a",{parentName:"p",href:"/databases"},"Databases")," for more information."),(0,o.kt)("h3",{id:"create-a-document"},"Create a Document"),(0,o.kt)("p",null,"Now we create a new document to hold our application's data."),(0,o.kt)("p",null,"Because we will be adding data to the document we must use its mutable form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Create your new document.\nfinal mutableDoc = MutableDocument.withId('hotel::1');\n")),(0,o.kt)("p",null,"For more on using ",(0,o.kt)("strong",{parentName:"p"},"Documents"),", see:\n",(0,o.kt)("a",{parentName:"p",href:"#document-initializers"},"Document Initializers")," and ",(0,o.kt)("a",{parentName:"p",href:"#mutability"},"Mutability"),"."),(0,o.kt)("h3",{id:"create-a-dictionary"},"Create a Dictionary"),(0,o.kt)("p",null,"Here we create a dictionary (",(0,o.kt)("inlineCode",{parentName:"p"},"address"),"). Because we want to add values into the\ndictionary, we must create it in ",(0,o.kt)("em",{parentName:"p"},"mutable")," form."),(0,o.kt)("p",null,"When the dictionary is retrieved, each element's value is directly accessible\nvia its own key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Create and populate mutable dictionary.\n// Create a new mutable dictionary and populate some keys/values.\nfinal address = MutableDictionary()\n  ..setString('1 Main Street', key:'street')\n  ..setString('San Francisco', key:'city')\n  ..setString('CA.', key:'state')\n  ..setString('USA', key:'country')\n  ..setString('90210', key:'code');\n")),(0,o.kt)("p",null,"For more on using ",(0,o.kt)("strong",{parentName:"p"},"Dictionaries")," see:\n",(0,o.kt)("a",{parentName:"p",href:"#using-dictionaries"},"Using Dictionaries"),"."),(0,o.kt)("h3",{id:"create-an-array"},"Create an Array"),(0,o.kt)("p",null,"Since our hotel may have multiple lines we provide an array (",(0,o.kt)("inlineCode",{parentName:"p"},"phones"),") to hold\ncontact numbers. Again, because we want to add values into the array, we create\nit in ",(0,o.kt)("em",{parentName:"p"},"mutable")," form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Create and populate mutable array.\nfinal phones = MutableArray()\n  ..addString('555-555-0000')\n  ..addString('555-555-0001');\n")),(0,o.kt)("p",null,"For more on using ",(0,o.kt)("strong",{parentName:"p"},"Arrays")," see: ",(0,o.kt)("a",{parentName:"p",href:"#using-arrays"},"Using Arrays"),"."),(0,o.kt)("h3",{id:"populate-a-document"},"Populate a Document"),(0,o.kt)("p",null,"Here we add our data to the mutable document we created earlier. Each data item\nis stored as a key-value pair."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Initialize and populate the document\n\nmutableDoc\n  // <1> Add document type to document properties.\n  ..setString('hotel', key: 'type')\n\n  // <2> Add hotel name string to document properties.\n  ..setString('Hotel Dart Mo', key: 'name')\n\n  // <3> Add float to document properties.\n  ..setFloat(121.75, key: 'room_rate')\n\n  // <4> Add dictionary to document's properties.\n  ..setDictionary(address, key: 'address')\n\n  // <5> Add array to document's properties.\n  ..setString(phones, key: 'phones');\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Add hotel name (string)."),(0,o.kt)("li",{parentName:"ol"},"Add average room rate (float)."),(0,o.kt)("li",{parentName:"ol"},"Add document type (string). ",(0,o.kt)("br",null)," Couchbase recommend using a ",(0,o.kt)("inlineCode",{parentName:"li"},"type"),"\nattribute to define each logical document type."),(0,o.kt)("li",{parentName:"ol"},"Add address (dictionary). ",(0,o.kt)("br",null)," The ",(0,o.kt)("inlineCode",{parentName:"li"},"address")," dictionary is added to the\ndocument and stored under the key ",(0,o.kt)("inlineCode",{parentName:"li"},"address"),". We will use this to retrieve it\nwhen needed."),(0,o.kt)("li",{parentName:"ol"},"Add phone numbers (array). ",(0,o.kt)("br",null)," The phones arrary is added to the document\nand stored under the key ",(0,o.kt)("inlineCode",{parentName:"li"},"phones"),". We will use this to retrieve it when\nneeded.")),(0,o.kt)("h3",{id:"save-a-document"},"Save a Document"),(0,o.kt)("p",null,"With the document now populated, we can persist to our Couchbase Lite database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Save the document to the database.\nawait database.saveDocument(mutableDoc);\n")),(0,o.kt)("h3",{id:"close-the-database"},"Close the Database"),(0,o.kt)("p",null,"With our document saved, we can now close our Couchbase Lite database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"await database.close();\n")),(0,o.kt)("h2",{id:"working-with-data"},"Working with Data"),(0,o.kt)("h3",{id:"checking-a-documents-properties"},"Checking a Document's Properties"),(0,o.kt)("p",null,"To check whether a given property exists in the document, you should use the\n",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DictionaryInterface/contains.html"},(0,o.kt)("inlineCode",{parentName:"a"},"DictionaryInterface.contains"))," method (",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Document-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Document"))," implements\n",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DictionaryInterface-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"DictionaryInterface")),")."),(0,o.kt)("p",null,"If the property doesn't exist, the call will return the default for that that\nmethod (",(0,o.kt)("inlineCode",{parentName:"p"},"0")," for ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DictionaryInterface/integer.html"},(0,o.kt)("inlineCode",{parentName:"a"},"DictionaryInterface.integer")),", ",(0,o.kt)("inlineCode",{parentName:"p"},"0.0")," for\n",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DictionaryInterface/float.html"},(0,o.kt)("inlineCode",{parentName:"a"},"DictionaryInterface.float")),", etc.)."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Care should be taken when storing and recovering data in a document or\nconverting that document to JSON and back."),(0,o.kt)("p",{parentName:"admonition"},"Data encoding (Fleece) can result in Long values being converted to Float\ninstead of Double. Interpreting data as boolean can also give inconsistent\nresults.")),(0,o.kt)("h3",{id:"date-accessors"},"Date accessors"),(0,o.kt)("p",null,"As a convenience Couchbase Lite offers ",(0,o.kt)("em",{parentName:"p"},"Date accessors"),". Dates are a common data\ntype, but JSON doesn't natively support them, so the convention is to store them\nas strings in ISO-8601 format."),(0,o.kt)(p,{id:1,title:"Date Getter",mdxType:"CodeExample"},(0,o.kt)("p",null,"This example sets the date on the ",(0,o.kt)("inlineCode",{parentName:"p"},"createdAt")," property and reads it back using\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DictionaryInterface/date.html"},(0,o.kt)("inlineCode",{parentName:"a"},"DictionaryInterface.date"))," accessor method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"mutableDoc.setValue(DateTime.now(), key: 'createdAt');\nfinal date = doc.date('createdAt');\n"))),(0,o.kt)("h3",{id:"using-dictionaries"},"Using Dictionaries"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"API References")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Dictionary-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Dictionary"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/MutableDictionary-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"MutableDictionary")))),(0,o.kt)(p,{id:2,title:"Read Only",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final document = await database.document('hotel::1');\n\n// Get a dictionary from the document's properties.\nfinal dictionary = document?.dictionary('address')\n\n// Access a value with a key from the dictionary.\nfinal street = dictionary?.string(\"street\")\n\n// Iterate the dictionary.\nfor (final key in dictionary!) {\n  print(\"Key $key = ${dictionary.value(key)}\");\n}\n\n// Create a mutable copy of the dictionary.\nfinal mutableDictionary = dictionary.toMutable();\n"))),(0,o.kt)(p,{id:3,title:"Mutable",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Create a new mutable dictionary and populate some keys/values.\nfinal mutableDictionary = MutableDictionary()\n  ..setString('1 Main Street', key: 'street')\n  ..setString('San Francisco', key: 'city');\n\n// Add the dictionary to a document's properties and save the document.\nfinal mutableDocumemt = MutableDocument.withId('hotel::1')\n  ..setDictionary(mutableDictionary, key: 'address');\nawait database.saveDocument(mutableDocumemt);\n"))),(0,o.kt)("h3",{id:"using-arrays"},"Using Arrays"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"API References")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Array-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Array"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/MutableArray-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"MutableArray")))),(0,o.kt)(p,{id:4,title:"Read Only",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final document = await database.document('hotel::1');\n\n// Get an array from the document's properties.\nfinal array = document?.array('phones');\n\n// Get the element count.\nfinal count = array?.length;\n\n// Access an array element by index.\nfinal phone = array?.string(1);\n\n// Iterate the array.\nfor (final element in array!) {\n    print('Element $element');\n}\n\n// Create a mutable copy of the array.\nfinal mutableArray = array.toMutable();\n"))),(0,o.kt)(p,{id:5,title:"Mutable",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Create a new mutable array and populate it with data.\nfinal mutableArray = MutableArray()\n  ..addString('650-000-0000')\n  ..addString('650-000-0001');\n\n// Set the array to document's properties and save the document.\nfinal mutableDocumemt = MutableDocument.withId('hotel::1')\n  ..setArray(mutableArray, key: 'phones');\nawait database.saveDocument(mutableDocumemt);\n"))),(0,o.kt)("h3",{id:"using-blobs"},"Using Blobs"),(0,o.kt)("p",null,"For more on working with blobs \u2014 see ",(0,o.kt)("a",{parentName:"p",href:"/blobs"},"Blobs"),"."),(0,o.kt)("h2",{id:"document-initializers"},"Document Initializers"),(0,o.kt)("p",null,"The following methods/initializers can be used:"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/MutableDocument/MutableDocument.html"},(0,o.kt)("inlineCode",{parentName:"a"},"MutableDocument"))," constructor can be used to create a new document\nwhere the document ID is randomly generated by the database."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/MutableDocument/MutableDocument.withId.html"},(0,o.kt)("inlineCode",{parentName:"a"},"MutableDocument.withId"))," constructor can be used to create a new\ndocument with a specific document ID."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Database/document.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Database.document"))," method can be used to get a document. If it doesn't\nexist in the database, it will return ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),". This method can be used to check\nif a document with a given ID already exists in the database."),(0,o.kt)(p,{id:6,title:"Persist a Document",mdxType:"CodeExample"},(0,o.kt)("p",null,"The following code example creates a document and persists it to the database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final document = MutableDocument()\n  ..setString('task', key: 'type')\n  ..setString('todo', key: 'owner')\n  ..setDate(DateTime.now(), key: 'createdAt');\nawait database.saveDocument(document);\n"))),(0,o.kt)("h2",{id:"mutability"},"Mutability"),(0,o.kt)("p",null,"By default, when a document is read from the database it is immutable. The\n",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Document/toMutable.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Document.toMutable"))," method should be used to create an instance of the\ndocument which can be updated."),(0,o.kt)(p,{id:7,title:"Make a Mutable Document",mdxType:"CodeExample"},(0,o.kt)("p",null,"Changes to the document are persisted to the database when the save method is\ncalled."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final document = await database.document('xyz');\nfinal mutableDocument = document!.toMutable()\n  ..setString('new value', key: 'key');\nawait database.saveDocument(mutableDocument);\n"))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Any user change to the value of reserved keys (",(0,o.kt)("inlineCode",{parentName:"p"},"_id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"_rev")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"_deleted"),") will\nbe detected when a document is saved and will result in an exception\n(",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DatabaseErrorCode.html"},(0,o.kt)("inlineCode",{parentName:"a"},"DatabaseErrorCode.corruptRevisionData")),") \u2014 see also\n",(0,o.kt)("a",{parentName:"p",href:"#document-constraints"},"Document Constraints"),".")),(0,o.kt)("h2",{id:"document-conversion"},"Document Conversion"),(0,o.kt)("p",null,"A Document can be converted to a plain dictionary type and-or to a JSON string.\nThis can often be useful to pass the document contents as a plain object to\nanother method."),(0,o.kt)(p,{id:8,title:"Convert Document",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"/// Convert the document to a plain dictionary of type Map<String, Object?>.\nprint(document.toPlainMap());\n\n/// Convert the document to a JSON string.\nprint(document.toJson());\n"))),(0,o.kt)("h2",{id:"batch-operations"},"Batch operations"),(0,o.kt)("p",null,"If you're making multiple changes to a database at once, it's faster to group\nthem together. The following example persists a few documents in batch."),(0,o.kt)("h6",{id:"example-8-batch-operations"},"Example 8. Batch operations"),(0,o.kt)(p,{id:9,title:"Batch Operations",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"await database.inBatch(() async {\n  for (final i in Iterable.generate(10)) {\n    final document = MutableDocument()\n      ..setValue('user', key: 'type')\n      ..setValue('user $i' key: 'name')\n      ..setBoolean(false, key: 'admin');\n\n    await database.saveDocument(document);\n  }\n});\n"))),(0,o.kt)("p",null,"At the local level this operation is still transactional: no other\n",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Database-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Database"))," instances, including ones managed by the replicator can make\nchanges during the execution of the block, and other instances will not see\npartial changes. Couchbase Mobile is a distributed system, and due to the way\nreplication works, there's no guarantee that Capella App Services or Sync\nGateway will receive your changes all at once."),(0,o.kt)("h2",{id:"document-change-events"},"Document change events"),(0,o.kt)("p",null,"It is possible to register for document changes. The following example registers\nfor changes to the document with ID user.john and prints the verified_account\nproperty when a change is detected."),(0,o.kt)(p,{id:10,title:"Document Change Events",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final token = database.addDocumentChangeListener('user.john', (change) async {\n  final document = await database.document(change.documentId);\n  if (document != null){\n    print('Status: ${document.string('verified_account')}');\n  }\n});\n"))),(0,o.kt)("h3",{id:"change-streams"},"Change Streams"),(0,o.kt)("p",null,"Streams are a convenient alternative to listen for changes."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"When multiple databases are involed, making sure that a stream is able to\nobserve all changes requires waiting for the stream to be ready. See\n",(0,o.kt)("a",{parentName:"p",href:"/general-concepts#change-streams"},"General Concepts - Change Streams")," for\nmore information.")),(0,o.kt)(p,{id:11,title:"Document Change Streams",mdxType:"CodeExample"},(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"database",label:"Database Changes",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final stream = database.changes();\n\nstream.listen((change) {\n  print('Ids of changed documents: ${change.documentIds}'):\n});\n"))),(0,o.kt)(l.Z,{value:"documentChanges",label:"Document Changes",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final stream = database.documentChanges('user.john');\n\nstream.listen((change) async {\n  final documemt = await database.document(change.documentId);\n  if (documemt != null) {\n    print('Status: ${documemt.string('verified_account')}');\n  }\n});\n"))))),(0,o.kt)("p",null,"To stop listening to changes just cancel the subscription, like with any other\nstream."),(0,o.kt)("h2",{id:"document-expiration"},"Document Expiration"),(0,o.kt)("p",null,"Document expiration allows users to set the expiration date for a document. When\nthe document expires, it is purged from the database. The purge is not\nreplicated to Capella App Services or Sync Gateway."),(0,o.kt)(p,{id:12,title:"Set Document Expiration",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Purge the document one day from now.\nfinal ttl = DateTime.now().add(const Duration(days: 1));\nawait database.setDocumentExpiration('hotel::1', ttl);\n\n// Reset the expiration.\nawait database.setDocumentExpiration('hotel::1', null);\n\n// Query documents that will be expired in less than five minutes.\nfinal fiveMinutesFromNow = DateTime.now().add(const Duration(minutes: 5));\nfinal query = const QueryBuilder()\n  .select(SelectResult.expression(Meta.id))\n  .from(DataSource.database(database))\n  .where(Meta.expiration.lessThan(Expression.date(fiveMinutesFromNow)));\n"))),(0,o.kt)("h2",{id:"document-constraints"},"Document Constraints"),(0,o.kt)("p",null,"Couchbase Lite APIs do not explicitly disallow the use of attributes with the\nunderscore prefix at the top level of document. This is to facilitate the\ncreation of documents for use either in local only mode where documents are not\nsynced."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"_id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"_rev")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"_sequence")," are reserved keywords and must not be used as\ntop-level attributes \u2014 see ",(0,o.kt)("a",{parentName:"p",href:"#figure-13"},"Figure 13"),".")),(0,o.kt)("p",null,"Users are cautioned that any attempt to sync such documents to Sync Gateway will\nresult in an error. To be future proof, you are advised to avoid creating such\ndocuments. Use of these attributes for user-level data may result in undefined\nsystem behavior"),(0,o.kt)("p",null,"For more guidance \u2014 see: ",(0,o.kt)("a",{parentName:"p",href:"https://docs.couchbase.com/sync-gateway/current/data-modeling.html"},"Sync Gateway - Data Modeling\nGuidelines")),(0,o.kt)(h,{id:13,title:"Reserved Keys List",mdxType:"Figure"},(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_attachments")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_deleted")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_id")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_removed")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_rev")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"_sequence")))),(0,o.kt)("h2",{id:"working-with-json-data"},"Working with JSON Data"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," typed-accessor means you can easily work with JSON data, native and\nCouchbase Lite objects."),(0,o.kt)("h3",{id:"documents-1"},"Documents"),(0,o.kt)("p",null,"Convert a ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Document-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Document"))," to a JSON string using the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method \u2014 see\n",(0,o.kt)("a",{parentName:"p",href:"#example-14"},"Example 14"),"."),(0,o.kt)(p,{id:14,title:"Documents as JSON Strings",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final document = await database.document('hotel::1');\nif (document != null) {\n  final json = document.toJson();\n  print(json);\n}\n"))),(0,o.kt)("h3",{id:"dictionaries"},"Dictionaries"),(0,o.kt)("p",null,"Convert a ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Dictionary-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Dictionary"))," to a JSON string using the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method \u2014 see\n",(0,o.kt)("a",{parentName:"p",href:"#example-15"},"Example 15"),"."),(0,o.kt)(p,{id:15,title:"Dictionaries as JSON Strings",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final document = await database.document('hotel::1');\nif (document != null) {\n  final dictionary = document.dictionary('address');\n  if (dictionary != null) {\n    final json = dictionary.toJson();\n    print(json);\n  }\n}\n"))),(0,o.kt)("h3",{id:"arrays"},"Arrays"),(0,o.kt)("p",null,"Convert an ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Array-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Array"))," to a JSON string using the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method \u2014 see\n",(0,o.kt)("a",{parentName:"p",href:"#example-16"},"Example 16"),"."),(0,o.kt)(p,{id:16,title:"Arrays as JSON Strings",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final document = await database.document('hotel::1');\nif (document != null) {\n  final array = document.array('phones');\n  if (array != null) {\n    final json = array.toJson();\n    print(json);\n  }\n}\n"))),(0,o.kt)("h3",{id:"blobs"},"Blobs"),(0,o.kt)("p",null,"Convert a ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Blob-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Blob"))," to JSON using the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method \u2014 see ",(0,o.kt)("a",{parentName:"p",href:"#example-17"},"Example 17"),"."),(0,o.kt)("p",null,"You can also check whether a given plain ",(0,o.kt)("inlineCode",{parentName:"p"},"Map")," is a blob, or not, using\n",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Blob/isBlob.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Blob.isBlob"))," \u2014 again, see ",(0,o.kt)("a",{parentName:"p",href:"#example-17"},"Example 17"),"."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The blob object must first be saved to the database (generating required\nmetadata) before you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method.")),(0,o.kt)(p,{id:17,title:"Blobs as JSON Strings",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final document = await database.document('user.john');\nif (document != null) {\n  final blob = document.blob('avatar');\n  if (blob != null) {\n    final json = blob.toJson();\n    print(json);\n    print(Blob.isBlob(document.dictionary('avatar')!.toPlainMap()));\n  }\n}\n"))),(0,o.kt)("h3",{id:"query-results"},"Query Results"),(0,o.kt)("p",null,"Convert a ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Result-class.html"},(0,o.kt)("inlineCode",{parentName:"a"},"Result"))," to JSON using its ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method \u2014 see ",(0,o.kt)("a",{parentName:"p",href:"#example-18"},"Example 18"),"."),(0,o.kt)(p,{id:18,title:"Results as JSON Strings",mdxType:"CodeExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await query.execute();\nfinal results = await result.allResults();\nfor (final result in results){\n    final json = result.toJson();\n    print(json);\n}\n"))),(0,o.kt)("h4",{id:"json-string-format"},"JSON String format"),(0,o.kt)("p",null,"If your query selects ALL then the JSON format will be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  <database-name>: {\n    "key1": "value1",\n    "keyx": "valuex"\n  }\n}\n')),(0,o.kt)("p",null,"If your query selects a sub-set of available properties then the JSON format\nwill be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key1": "value1",\n  "keyx": "valuex"\n}\n')))}k.isMDXComponent=!0}}]);