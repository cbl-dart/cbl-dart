"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[213],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(o,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={description:"How to use QueryBuilder to build effective queries with Couchbase Lite for Dart",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"Live Queries",url:"/queries/live-queries"},{name:"Indexes",url:"/indexing"}]},i="QueryBuilder",s={unversionedId:"queries/query-builder",id:"queries/query-builder",title:"QueryBuilder",description:"How to use QueryBuilder to build effective queries with Couchbase Lite for Dart",source:"@site/docs/queries/query-builder.mdx",sourceDirName:"queries",slug:"/queries/query-builder",permalink:"/queries/query-builder",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/queries/query-builder.mdx",tags:[],version:"current",frontMatter:{description:"How to use QueryBuilder to build effective queries with Couchbase Lite for Dart",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"Live Queries",url:"/queries/live-queries"},{name:"Indexes",url:"/indexing"}]},sidebar:"sidebar",previous:{title:"Blobs",permalink:"/blobs"},next:{title:"SQL++ for Mobile",permalink:"/queries/sqlplusplus-mobile"}},o={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Indexing",id:"indexing",level:2},{value:"SELECT clause",id:"select-clause",level:2},{value:"Return All Properties",id:"return-all-properties",level:3},{value:"Return Selected Properties",id:"return-selected-properties",level:3},{value:"WHERE clause",id:"where-clause",level:2},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Collection Operators",id:"collection-operators",level:3},{value:"CONTAINS Operator",id:"contains-operator",level:3},{value:"IN Operator",id:"in-operator",level:3},{value:"LIKE Operator",id:"like-operator",level:3},{value:"String matching",id:"string-matching",level:4},{value:"Wildcard Match",id:"wildcard-match",level:4},{value:"Wildcard Character Match",id:"wildcard-character-match",level:4},{value:"REGEX Operator",id:"regex-operator",level:3},{value:"Deleted Document",id:"deleted-document",level:3},{value:"JOIN clause",id:"join-clause",level:2},{value:"GROUP BY clause",id:"group-by-clause",level:2},{value:"ORDER BY clause",id:"order-by-clause",level:2},{value:"Date/Time Functions",id:"datetime-functions",level:2},{value:"Result Sets",id:"result-sets",level:2},{value:"Processing",id:"processing",level:3},{value:"Select All Properties",id:"select-all-properties",level:3},{value:"Query",id:"query",level:4},{value:"Result Set Format",id:"result-set-format",level:4},{value:"Result Set Access",id:"result-set-access",level:4},{value:"Select Specific Properties",id:"select-specific-properties",level:3},{value:"Query",id:"query-1",level:4},{value:"Result Set Format",id:"result-set-format-1",level:4},{value:"Result Set Access",id:"result-set-access-1",level:4},{value:"Select Document ID Only",id:"select-document-id-only",level:3},{value:"Query",id:"query-2",level:4},{value:"Result Set Format",id:"result-set-format-2",level:4},{value:"Result Set Access",id:"result-set-access-2",level:4},{value:"Select Count Only",id:"select-count-only",level:3},{value:"Query",id:"query-3",level:4},{value:"Result Set Format",id:"result-set-format-3",level:4},{value:"Result Set Access",id:"result-set-access-3",level:4},{value:"Handling Pagination",id:"handling-pagination",level:3},{value:"JSON Result Sets",id:"json-result-sets",level:2},{value:"Convert Result to Model",id:"convert-result-to-model",level:3},{value:"JSON String Format",id:"json-string-format",level:3}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=u("CodeExample"),d=u("Figure"),m={toc:p};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"querybuilder"},"QueryBuilder"),(0,r.kt)("metaheader",null),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Couchbase Lite for Dart provides two ways to build and run database queries; the\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/QueryBuilder-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryBuilder"))," API described in this topic and\n",(0,r.kt)("a",{parentName:"p",href:"/queries/sqlplusplus-mobile"},"SQL++ for Mobile"),"."),(0,r.kt)("p",null,"Database queries defined with the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/QueryBuilder-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryBuilder"))," API use query statements of\nthe form shown in ",(0,r.kt)("a",{parentName:"p",href:"#example-1"},"Example 1"),". The structure and semantics of the query\nformat are based on that of Couchbase's SQL++ query language."),(0,r.kt)(c,{id:1,title:"Query Format",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ____\nFROM 'database'\nWHERE ____,\nJOIN ____\nGROUP BY ____\nORDER BY ____\n"))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("a",{parentName:"li",href:"#select-clause"},(0,r.kt)("inlineCode",{parentName:"a"},"SELECT")," clause")," specifies the data to be returned by\nthe query."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"FROM")," clause specifies the database to query the documents from."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("a",{parentName:"li",href:"#where-clause"},(0,r.kt)("inlineCode",{parentName:"a"},"WHERE")," clause")," specifies the query criteria. ",(0,r.kt)("br",null)," The\n",(0,r.kt)("inlineCode",{parentName:"li"},"SELECT"),"ed properties of documents matching this criteria will be returned in\nthe result set."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("a",{parentName:"li",href:"#join-clause"},(0,r.kt)("inlineCode",{parentName:"a"},"JOIN")," clause")," specifies the criteria for joining multiple\ndocuments."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("a",{parentName:"li",href:"#group-by-clause"},(0,r.kt)("inlineCode",{parentName:"a"},"GROUP BY")," clause")," specifies the criteria used to\ngroup returned items in the result set."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("a",{parentName:"li",href:"#order-by-clause"},(0,r.kt)("inlineCode",{parentName:"a"},"ORDER BY")," clause")," specifies the criteria used to\norder the items in the result set.")),(0,r.kt)("h2",{id:"indexing"},"Indexing"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"See the ",(0,r.kt)("a",{parentName:"p",href:"/indexing"},"Indexing")," topic to learn more about indexing.")),(0,r.kt)("p",null,"Before we begin querying documents, let's briefly mention the importance of\nhaving a query index. A query can only be fast if there's a pre-existing\ndatabase index it can search to narrow down the set of documents to examine\n\u2014\u2009see: ",(0,r.kt)("a",{parentName:"p",href:"#example-2"},"Example 2"),", which shows how to create an index, and also the\n",(0,r.kt)("a",{parentName:"p",href:"/queries/query-troubleshooting"},"Query Troubleshooting")," topic."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Every index has to be updated whenever a document is updated. So many indexes\ncould hurt write performance."),(0,r.kt)("p",{parentName:"admonition"},"Good performance depends on designing and creating the ",(0,r.kt)("em",{parentName:"p"},"right")," indexes to go\nalong with your queries.")),(0,r.kt)(c,{id:2,title:"Creating a New Index",mdxType:"CodeExample"},(0,r.kt)("p",null,"This example creates a new index for the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," properties in the\nData Model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final config = ValueIndexConfiguration(['type', 'name']);\nawait database.createIndex('TypeNameIndex', config);\n")),(0,r.kt)(d,{id:1,title:"Data Model",mdxType:"Figure"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "hotel123",\n    "type": "hotel",\n    "name": "Hotel Ghia"\n  },\n  {\n    "id": "hotel456",\n    "type": "hotel",\n    "name": "Hotel Deluxe"\n  }\n]\n')))),(0,r.kt)("h2",{id:"select-clause"},"SELECT clause"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," clause to specify which properties you want to return from the\nqueried documents. You can opt to retrieve entire documents, or just the\nspecific properties you need."),(0,r.kt)("h3",{id:"return-all-properties"},"Return All Properties"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult/all.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectResult.all()"))," method to return the properties of selected\ndocuments - see ",(0,r.kt)("a",{parentName:"p",href:"#example-3"},"Example 3"),"."),(0,r.kt)(c,{id:3,title:"Using SELECT to Retrieve All Properties",mdxType:"CodeExample"},(0,r.kt)("p",null,"This query shows how to retrieve all properties from all documents in your\ndatabase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n    .select(SelectResult.all())\n    .from(DataSource.database(database).as('airline'));\n"))),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/execute.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Query.execute()"))," method returns each result as dictionary where they\nkey is the database name, or the alias provided to the as function."),(0,r.kt)(c,{id:4,title:"ResultSet fFrmat From SelectResult.all()",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "airline": {\n      "callsign": "MILE-AIR",\n      "country": "United States",\n      "iata": "Q5",\n      "icao": "MLA",\n      "id": 10,\n      "name": "40-Mile Air",\n      "type": "airline"\n    }\n  },\n  {\n    "airline": {\n      "callsign": "ALASKAN-AIR",\n      "country": "United States",\n      "iata": "AA",\n      "icao": "AAA",\n      "id": 10,\n      "name": "Alaskan Airways",\n      "type": "airline"\n    }\n  }\n]\n'))),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/queries/query-result-sets"},"Result Sets")," for more on processing query results."),(0,r.kt)("h3",{id:"return-selected-properties"},"Return Selected Properties"),(0,r.kt)("p",null,"To access only specific properties, specify a comma separated list of\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expressions, one for each property, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," clause of\nyour query \u2014\u2009see: ",(0,r.kt)("a",{parentName:"p",href:"#example-5"},"Example 5"),"."),(0,r.kt)(c,{id:5,title:"Using SELECT to Retrieve Specific Properties",mdxType:"CodeExample"},(0,r.kt)("p",null,"In this query we retrieve and then print the ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),"and",(0,r.kt)("inlineCode",{parentName:"p"},"name")," properties of\neach document."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('type'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.database(database));\n\nfinal resultSet = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  print('id: ${result.string('id')}');\n  print('name: ${result.string('name')}');\n}\n"))),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/execute.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Query.execute()"))," method returns each result as a dictionary with one or\nmore key-value pairs, one for each ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expression, with the\nproperty-name as the key \u2014\u2009see ",(0,r.kt)("a",{parentName:"p",href:"#example-6"},"Example 6"),"."),(0,r.kt)(c,{id:6,title:"Select Result Format",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "hotel123",\n    "type": "hotel",\n    "name": "Hotel Ghia"\n  },\n  {\n    "id": "hotel456",\n    "type": "hotel",\n    "name": "Hotel Deluxe"\n  }\n]\n'))),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/queries/query-result-sets"},"Result Sets")," for more on processing query results."),(0,r.kt)("h2",{id:"where-clause"},"WHERE clause"),(0,r.kt)("p",null,"Like in SQL, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to choose which documents are\nincluded by your query. The ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," clause takes an ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Expression-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Expression")),". You can\nchain any number of ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Expression-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Expression")),"s in order to implement sophisticated\nfiltering capabilities."),(0,r.kt)("h3",{id:"comparison-operators"},"Comparison Operators"),(0,r.kt)("p",null,"The expression comparators (see ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/ExpressionInterface-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"ExpressionInterface")),") can be used in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to specify on which property to match documents. In the example\nbelow, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"equalTo"),' operator to query documents where the type property\nequals "hotel".'),(0,r.kt)(c,{id:7,title:"Using WHERE",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.database(database))\n  .where(Expression.property('type').equalTo(Expression.string('hotel')))\n  .limit(Expression.integer(10));\n\nfinal resultSet = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  print('name: ${result.string('name')}');\n}\n"))),(0,r.kt)("h3",{id:"collection-operators"},"Collection Operators"),(0,r.kt)("p",null,"Array collection operators (see ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/ArrayExpression-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"ArrayExpression")),") are useful to check if a\ngiven value is present in an array through the ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"every")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"anyAndEvery"),"\noperators."),(0,r.kt)("h3",{id:"contains-operator"},"CONTAINS Operator"),(0,r.kt)("p",null,"The following example uses the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/ArrayFunction-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"ArrayFunction"))," to find documents where the\n",(0,r.kt)("inlineCode",{parentName:"p"},"public_likes"),' array property contains a value equal to "Armani Langworth".'),(0,r.kt)(c,{id:8,title:"Using ArrayFunction.contains()",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": "hotel123",\n  "name": "Apple Droid",\n  "public_likes": ["Armani Langworth", "Elfrieda Gutkowski", "Maureen Ruecker"]\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('name'),\n    SelectResult.property('public_likes'),\n  )\n  .from(DataSource.database(database))\n  .where(\n    Expression.property('type').equalTo(Expression.string('hotel'))\n      .and(\n        ArrayFunction.contains(\n          Expression.property('public_likes'),\n          value: Expression.string('Armani Langworth'),\n        ),\n      ),\n  )\n  .limit(Expression.integer(10));\n\nfinal result = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  print('name: ${result.string('name')}');\n}\n"))),(0,r.kt)("h3",{id:"in-operator"},"IN Operator"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"IN"),' operator is useful when you need to explicitly list out the values to\ntest against. The following example looks for documents whose first, last or\nusername property value equals "Armani".'),(0,r.kt)(c,{id:9,title:"IN Operator",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.database(database))\n  .where(Expression.string('Armani').in_([\n    Expression.property('first'),\n    Expression.property('last'),\n    Expression.property('username'),\n  ]));\n"))),(0,r.kt)("h3",{id:"like-operator"},"LIKE Operator"),(0,r.kt)("h4",{id:"string-matching"},"String matching"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"LIKE")," operator can be used for string matching \u2014\u2009see ",(0,r.kt)("a",{parentName:"p",href:"#example-10"},"Example 10"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"LIKE")," operator performs ",(0,r.kt)("strong",{parentName:"p"},"case sensitive")," matches. ",(0,r.kt)("br",null)," To perform case\ninsensitive matching, use ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.lower"))," or ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/upper.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.upper"))," to\nensure all comparators have the same case, thereby removing the case issue.")),(0,r.kt)("p",null,"This query returns ",(0,r.kt)("inlineCode",{parentName:"p"},"landmark"),' type documents where the name matches the string\n"Royal Engineers Museum", regardless of how it is capitalized (so, it selects\n"royal engineers museum", "ROYAL ENGINEERS MUSEUM" and so on).'),(0,r.kt)(c,{id:10,title:"Like with Case-Insensitive Matching",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('country'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.database(database))\n  .where(\n    Expression.property('type').equalTo(Expression.string('landmark'))\n      .and(\n        Function_.lower(Expression.property('name'))\n          .like(Expression.string('royal engineers museum')),\n      ),\n  )\n  .limit(Expression.integer(10));\n"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Note the use of ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.lower"))," to transform name values to the same case\nas the literal comparator.")),(0,r.kt)("h4",{id:"wildcard-match"},"Wildcard Match"),(0,r.kt)("p",null,"We can use ",(0,r.kt)("inlineCode",{parentName:"p"},"%")," sign within a ",(0,r.kt)("inlineCode",{parentName:"p"},"LIKE")," expression to do a wildcard match against\nzero or more characters. Using wildcards allows you to have some fuzziness in\nyour search string."),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"#example-11"},"Example 11")," below, we are looking for documents of ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),' "landmark"\nwhere the ',(0,r.kt)("inlineCode",{parentName:"p"},"name"),' property matches any string that begins with "eng" followed by\nzero or more characters, the letter "e", followed by zero or more characters.\nOnce again, we are using ',(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.lower"))," to make the search case\ninsensitive."),(0,r.kt)("p",null,'So, "landmark" documents with names such as "Engineers", "engine", "english egg"\nand "England Eagle" will match. Notice that the matches may span word\nboundaries.'),(0,r.kt)(c,{id:11,title:"Wildcard Matches",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('country'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.database(database))\n  .where(\n    Expression.property('type').equalTo(Expression.string('landmark'))\n      .and(\n        Function_.lower(Expression.property('name'))\n          .like(Expression.string('eng%e%')),\n      ),\n  )\n  .limit(Expression.integer(10));\n"))),(0,r.kt)("h4",{id:"wildcard-character-match"},"Wildcard Character Match"),(0,r.kt)("p",null,"We can use an ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," sign within a ",(0,r.kt)("inlineCode",{parentName:"p"},"LIKE")," expression to do a wildcard match against\na single character."),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"#example-12"},"Example 12")," below, we are looking for documents of ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),' "landmark"\nwhere the ',(0,r.kt)("inlineCode",{parentName:"p"},"name"),' property matches any string that begins with "eng" followed by\nexactly 4 wildcard characters and ending in the letter "r". The query returns\n"landmark" type documents with names such as "Engineer", "engineer" and so on.'),(0,r.kt)(c,{id:12,title:"Wildcard Character Matching",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('country'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.database(database))\n  .where(\n    Expression.property('type').equalTo(Expression.string('landmark'))\n      .and(\n        Function_.lower(Expression.property('name'))\n          .like(Expression.string('eng___r')),\n      ),\n  )\n  .limit(Expression.integer(10));\n"))),(0,r.kt)("h3",{id:"regex-operator"},"REGEX Operator"),(0,r.kt)("p",null,"Similar to the wildcards in ",(0,r.kt)("inlineCode",{parentName:"p"},"LIKE")," expressions, ",(0,r.kt)("inlineCode",{parentName:"p"},"REGEX")," based pattern matching\nallows you to introduce an element of fuzziness in your search string \u2014\u2009see the\ncode shown in ",(0,r.kt)("a",{parentName:"p",href:"#example-13"},"Example 13"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"REGEX")," operator is case sensitive, use ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/upper.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.upper"))," or\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.lower"))," functions to mitigate this if required.")),(0,r.kt)(c,{id:13,title:"Using Regular Expressions",mdxType:"CodeExample"},(0,r.kt)("p",null,"This example returns documents with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),' of "landmark" and a ',(0,r.kt)("inlineCode",{parentName:"p"},"name"),' property\nthat matches any string that begins with "eng" and ends in the letter "e".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.property('country'),\n    SelectResult.property('name'),\n  )\n  .from(DataSource.database(database))\n  .where(\n    Expression.property('type').equalTo(Expression.string('landmark'))\n      .and(\n        Function_.lower(Expression.property('name'))\n          .regex(Expression.string('\\\\bEng.*e\\\\b')),\n      ),\n  )\n  .limit(Expression.integer(10));\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"\\b")," specifies that the match must occur on word boundaries."))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For more on the regex spec used by Couchbase Lite see\n",(0,r.kt)("a",{parentName:"p",href:"https://cplusplus.com/reference/regex/ECMAScript/"},"cplusplus regex reference page"),".")),(0,r.kt)("h3",{id:"deleted-document"},"Deleted Document"),(0,r.kt)("p",null,"You can query documents that have been deleted (tombstones) as shown in\n",(0,r.kt)("a",{parentName:"p",href:"#example-14"},"Example 14"),"."),(0,r.kt)(c,{id:14,title:"Query to Select Deleted Documents",mdxType:"CodeExample"},(0,r.kt)("p",null,"This example shows how to query deleted documents in the database. It returns is\nan array of key-value pairs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(SelectResult.expression(Meta.id))\n  .from(DataSource.database(database))\n  .where(Meta.isDeleted);\n"))),(0,r.kt)("h2",{id:"join-clause"},"JOIN clause"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"JOIN")," clause enables you to select data from multiple documents that have\nbeen linked by criteria specified in the ",(0,r.kt)("inlineCode",{parentName:"p"},"JOIN")," clause. For example to combine\nairline details with route details, linked by the airline ID \u2014\u2009see\n",(0,r.kt)("a",{parentName:"p",href:"#example-15"},"Example 15"),"."),(0,r.kt)(c,{id:15,title:"Using JOIN to Combine Document Details",mdxType:"CodeExample"},(0,r.kt)("p",null,"This example JOINS the document of type ",(0,r.kt)("inlineCode",{parentName:"p"},"route")," with documents of type ",(0,r.kt)("inlineCode",{parentName:"p"},"airline"),"\nusing the document ID (",(0,r.kt)("inlineCode",{parentName:"p"},"id"),") on the ",(0,r.kt)("em",{parentName:"p"},"airline")," document and ",(0,r.kt)("inlineCode",{parentName:"p"},"airlineid")," on the\n",(0,r.kt)("em",{parentName:"p"},"route")," document."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Expression.property('name').from('airline')),\n    SelectResult.expression(Expression.property('callsign').from('airline')),\n    SelectResult.expression(Expression.property('destinationairport').from('route')),\n    SelectResult.expression(Expression.property('stops').from('route')),\n    SelectResult.expression(Expression.property('airline').from('route')),\n  )\n  .from(DataSource.database(database).as('airline'))\n  .join(\n    Join.join(DataSource.database(database).as('route')).on(\n      Meta.id.from('airline')\n        .equalTo(Expression.property('airlineid').from('route')),\n    ),\n  )\n  .where(\n    Expression.property('type').from('route').equalTo(Expression.string('route'))\n      .and(\n        Expression.property('type').from('airline')\n          .equalTo(Expression.string('airline')),\n      )\n      .and(\n        Expression.property('sourceairport').from('route')\n          .equalTo(Expression.string('RIX')),\n      ),\n  );\n"))),(0,r.kt)("h2",{id:"group-by-clause"},"GROUP BY clause"),(0,r.kt)("p",null,"You can perform further processing on the data in your result set before the\nfinal projection is generated."),(0,r.kt)("p",null,"The following example looks for the number of airports at an altitude of 300 ft\nor higher and groups the results by country and timezone."),(0,r.kt)(d,{id:2,title:"Data Model for Example",mdxType:"Figure"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": "airport123",\n  "type": "airport",\n  "country": "United States",\n  "geo": { "alt": 456 },\n  "tz": "America/Anchorage"\n}\n'))),(0,r.kt)(c,{id:16,title:"Using GROUP BY",mdxType:"CodeExample"},(0,r.kt)("p",null,"This example shows a query that selects all airports with an altitude above\n300ft. The output (a count, $1) is grouped by country, within timezone."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Function_.count(Expression.all())),\n    SelectResult.expression(Expression.property('country')),\n    SelectResult.expression(Expression.property('tz')),\n  )\n  .from(DataSource.database(database))\n  .where(Expression.property('type').equalTo(Expression.string('airport')))\n  .groupBy(\n     Expression.property('country'),\n     Expression.property('tz'),\n  );\n\nfinal resultSet = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  print(\n    'There are ${result.integer(r'$1')} airports on '\n    'the ${result.string('tz')} timezone located '\n    'in ${result.string('country')} and above 300 ft.',\n  );\n}\n"))),(0,r.kt)("h2",{id:"order-by-clause"},"ORDER BY clause"),(0,r.kt)("p",null,"It is possible to sort the results of a query based on a given expression result\n\u2014\u2009see ",(0,r.kt)("a",{parentName:"p",href:"#example-17"},"Example 17"),"."),(0,r.kt)(c,{id:17,title:"Using ORDER BY",mdxType:"CodeExample"},(0,r.kt)("p",null,"This example shows a query that returns documents of ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),' equal to "hotel"\nsorted in ascending order by the value of the ',(0,r.kt)("inlineCode",{parentName:"p"},"title")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id),\n    SelectResult.expression(Expression.property('title')),\n  )\n  .from(DataSource.database(database))\n  .where(Expression.property('type').equalTo(Expression.string('hotel')))\n  .orderBy(Ordering.property('title').ascending())\n  .limit(Expression.integer(10));\n"))),(0,r.kt)("h2",{id:"datetime-functions"},"Date/Time Functions"),(0,r.kt)("p",null,"Couchbase Lite documents support a date type that internally stores dates in ISO\n8601 with the GMT/UTC timezone."),(0,r.kt)("p",null,"Couchbase Lite's ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/QueryBuilder-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryBuilder"))," API includes four functions for date\ncomparisons."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/stringToMillis.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.stringToMillis"))),(0,r.kt)("p",{parentName:"li"},"The input to this must be a validly formatted ISO 8601 date string. Valid date\nstrings must start with a date in the form YYYY-MM-DD (time only string are\nnot supported). The end result will be an expression (with a numeric content)\nthat can be further input into the query builder.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/stringToUTC.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.stringToUTC"))),(0,r.kt)("p",{parentName:"li"},"The input to this must be a validly formatted ISO 8601 date string. Valid date\nstrings must start with a date in the form YYYY-MM-DD (time only string are\nnot supported). The end result will be an expression (with string content)\nthat can be further input into the query builder.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/millisToString.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.millisToString"))),(0,r.kt)("p",{parentName:"li"},"The input for this must be a numeric value representing milliseconds since the\nUnix epoch. The end result will be an expression (with string content\nrepresenting the date and time as an ISO 8601 string in the device's timezone)\nthat can be further input into the query builder.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/millisToUTC.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.millisToUTC"))),(0,r.kt)("p",{parentName:"li"},"The input for this must be a numeric value representing milliseconds since the\nUnix epoch. The end result will be an expression (with string content\nrepresenting the date and time as a UTC ISO 8601 string) that can be further\ninput into the query builder."))),(0,r.kt)("h2",{id:"result-sets"},"Result Sets"),(0,r.kt)("h3",{id:"processing"},"Processing"),(0,r.kt)("p",null,"This section shows how to handle the returned result sets for different types of\n",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," clauses."),(0,r.kt)("p",null,"The result set format and its handling varies slightly depending on the type of\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expressions used. The result set formats you may encounter\ninclude those generated by:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult/all.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectResult.all"))," \u2014\u2009see: ",(0,r.kt)("a",{parentName:"p",href:"#select-all-properties"},"All Properties"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Expression/property.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Expression.property"))," \u2014\u2009see:\n",(0,r.kt)("a",{parentName:"p",href:"#select-specific-properties"},"Specific Properties"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Meta/id.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Meta.id"))," \u2014 Metadata (such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"_id"),") \u2014\u2009see:\n",(0,r.kt)("a",{parentName:"p",href:"#select-document-id-only"},"Document ID Only"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/count.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Function_.count"))," \u2014\u2009 see: ",(0,r.kt)("a",{parentName:"p",href:"#select-count-only"},"Select Count Only")))),(0,r.kt)("p",null,"To process the results of a query, you first need to execute it using\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Query/execute.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Query.execute")),". The execution of a Couchbase Lite database query returns an\narray of results, a result set."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The result set of an aggregate, count-only, query contains dictionaries with a\nkey-value pair \u2014\u2009see ",(0,r.kt)("a",{parentName:"p",href:"#select-count-only"},"Select Count Only")," \u2014\u2009which you can\naccess using the count name as its key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The result set of a query returning document properties contains zero or more\nresults. Each result represents the data from a document that matched your\nsearch criteria (the ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," clause). The composition of each result is\ndetermined by the combination of ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expressions provided in\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," clause. To unpack these result sets you need to iterate them."))),(0,r.kt)("h3",{id:"select-all-properties"},"Select All Properties"),(0,r.kt)("h4",{id:"query"},"Query"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," clause for this type of query, which returns all document\nproperties for each document matching the query criteria, is fairly\nstraightforward \u2014\u2009see ",(0,r.kt)("a",{parentName:"p",href:"#example-18"},"Example 18"),"."),(0,r.kt)(c,{id:18,title:"Query Selecting All Properties",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('travel-sample');\nfinal query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.database(database));\n"))),(0,r.kt)("h4",{id:"result-set-format"},"Result Set Format"),(0,r.kt)("p",null,"The result set returned by queries using ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult/all.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectResult.all"))," contains\ndictionaries \u2014\u2009one for each document matching the query criteria."),(0,r.kt)("p",null,"Each result contains a key-value pair, where the the key is the database name\nand the value is a dictionary representing each document's properties \u2014\u2009see:\n",(0,r.kt)("a",{parentName:"p",href:"#example-19"},"Example 19"),"."),(0,r.kt)(c,{id:19,title:"Format of Result Set (All Properties)",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "travel-sample": {\n      "callsign": "MILE-AIR",\n      "country": "United States",\n      "iata": "Q5",\n      "icao": "MLA",\n      "id": 10,\n      "name": "40-Mile Air",\n      "type": "airline"\n    }\n  },\n  {\n    "travel-sample": {\n      "callsign": "ALASKAN-AIR",\n      "country": "United States",\n      "iata": "AA",\n      "icao": "AAA",\n      "id": 10,\n      "name": "Alaskan Airways",\n      "type": "airline"\n    }\n  }\n]\n'))),(0,r.kt)("h4",{id:"result-set-access"},"Result Set Access"),(0,r.kt)("p",null,"In this case, access the retrieved document properties by looking up a\ndictionary in each result \u2014\u2009as shown in ",(0,r.kt)("a",{parentName:"p",href:"#example-20"},"Example 20"),"."),(0,r.kt)(c,{id:20,title:"Using Document Properties (All)",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final resultSet = await query.execute();\nawait for (final result in resultSet.asStream()) {\n  final docProps = result.dictionary(0)!;\n\n  final id = docProps.string('id');\n  final name = docProps.string('name');\n  final type = docProps.string('type');\n  final city = docProps.string('city');\n  print(\"$id $name $type $city\");\n}\n"))),(0,r.kt)("h3",{id:"select-specific-properties"},"Select Specific Properties"),(0,r.kt)("h4",{id:"query-1"},"Query"),(0,r.kt)("p",null,"Here we use ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Expression/property.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Expression.property"))," to specify the document properties we want\nour query to return \u2014\u2009see: ",(0,r.kt)("a",{parentName:"p",href:"#example-21"},"Example 21"),"."),(0,r.kt)(c,{id:21,title:"Query Selecting Specific Properties",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('hotels');\n\nfinal query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id).as('docId'),\n    SelectResult.expression(Expression.property('id')),\n    SelectResult.expression(Expression.property('type')),\n    SelectResult.expression(Expression.property('name')),\n  )\n  .from(DataSource.database(database));\n"))),(0,r.kt)("h4",{id:"result-set-format-1"},"Result Set Format"),(0,r.kt)("p",null,"The result set returned when selecting only specific document properties\ncontains dictionaries \u2014\u2009one for each document matching the query criteria."),(0,r.kt)("p",null,"Each result comprises a key-value pair for each selected document property \u2014\u2009see\n",(0,r.kt)("a",{parentName:"p",href:"#example-22"},"Example 22"),"."),(0,r.kt)(c,{id:22,title:"Format of Result Set (Specific Properties)",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "docId": "XjO9Ohk96F",\n    "id": "hotel123",\n    "type": "hotel",\n    "name": "Hotel Ghia"\n  },\n  {\n    "docId": "w2DCGPJ-0m",\n    "id": "hotel456",\n    "type": "hotel",\n    "name": "Hotel Deluxe"\n  }\n]\n'))),(0,r.kt)("h4",{id:"result-set-access-1"},"Result Set Access"),(0,r.kt)("p",null,"Access the retrieved properties by looking them up in each result \u2014 as shown in\n",(0,r.kt)("a",{parentName:"p",href:"#example-23"},"Example 23"),"."),(0,r.kt)(c,{id:23,title:"Using Returned Document Properties (Specific Properties)",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final resultSet = await query.execute();\nawait for (final result in await resultSet.asStream()) {\n  final docId = result.string('docId')!;\n  print('processing doc: $docId');\n\n  final id = result.string('id')!;\n  final hotel = Hotel(id);\n  hotel.type = result.string('type')!;\n  hotel.name = result.string('name')!;\n  Do something with the hotel...\n}\n"))),(0,r.kt)("h3",{id:"select-document-id-only"},"Select Document ID Only"),(0,r.kt)("h4",{id:"query-2"},"Query"),(0,r.kt)("p",null,"You would typically use this type of query if retrieval of document properties\ndirectly would consume excessive amounts of memory and-or processing time \u2014\u2009see:\n",(0,r.kt)("a",{parentName:"p",href:"#example-24"},"Example 24"),"."),(0,r.kt)(c,{id:24,title:"Query Selecting Only Document ID",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('hotels');\nfinal query = QueryBuilder.createAsync()\n  .select(SelectResult.expression(Meta.id))\n  .from(DataSource.database(database));\n"))),(0,r.kt)("h4",{id:"result-set-format-2"},"Result Set Format"),(0,r.kt)("p",null,"The result set returned by queries using a ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResult-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectResult"))," expression of the\nform ",(0,r.kt)("inlineCode",{parentName:"p"},"SelectResult.expression(Meta.id)")," contains dictionaries \u2014\u2009one for each\ndocument matching the query criteria. Each result contains the ID under the ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"\nkey \u2014\u2009see ",(0,r.kt)("a",{parentName:"p",href:"#example-25"},"Example 25"),"."),(0,r.kt)(c,{id:25,title:"Format of Result Set (Document ID Only)",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": "hotel123"\n  },\n  {\n    "id": "hotel456"\n  }\n]\n'))),(0,r.kt)("h4",{id:"result-set-access-2"},"Result Set Access"),(0,r.kt)("p",null,"In this case, access the properties of a document by unpacking the id and using\nit to get the document from the database \u2014\u2009see: ",(0,r.kt)("a",{parentName:"p",href:"#example-26"},"Example 26"),"."),(0,r.kt)(c,{id:26,title:"Using Returned Document Properties (Document ID)",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final resultSet = await query.execute();\nawait for (final result in resultSet.asStream()) {\n  final docId = result.string('docId');\n  print('processing doc: $docId');\n\n  final doc = (await database.document(docId))!;\n  final hotelId = doc.string('id');\n  final name = doc.string('name');\n  final city = doc.string('city');\n  final type = doc.string('type');\n  Do something with the variables...\n}\n"))),(0,r.kt)("h3",{id:"select-count-only"},"Select Count Only"),(0,r.kt)("h4",{id:"query-3"},"Query"),(0,r.kt)(c,{id:27,title:"Query Selecting a Count Only",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('hotels');\nfinal query = const QueryBuilder()\n  .select(SelectResult.expression(Function_.count(Expression.all())).as('count'))\n  .from(DataSource.database(database))\n  .groupBy(Expression.property('type'));\n"))),(0,r.kt)("h4",{id:"result-set-format-3"},"Result Set Format"),(0,r.kt)("p",null,"The result set returned by a count such as\n",(0,r.kt)("inlineCode",{parentName:"p"},"SelectResult.expression(Function_.count(Expression.all))).as('count')")," contains\ndictionaries with a key-value pair. The key is the count name, as defined using\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/SelectResultAs/as.html"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectResultAs.as"))," \u2014\u2009see: ",(0,r.kt)("a",{parentName:"p",href:"#example-28"},"Example 28")," for the format and\n",(0,r.kt)("a",{parentName:"p",href:"#example-27"},"Example 27")," for the query."),(0,r.kt)(c,{id:28,title:"Format of Result Set (Count)",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "count": 6\n}\n'))),(0,r.kt)("h4",{id:"result-set-access-3"},"Result Set Access"),(0,r.kt)("p",null,'Access the count using its alias name ("count" in this example) \u2014\u2009see\n',(0,r.kt)("a",{parentName:"p",href:"#example-29"},"Example 29"),"."),(0,r.kt)(c,{id:29,title:"Using Returned Aggregate Value (Count)",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final resultSet = await query.execute();\nfinal results = await resultSet.allResults();\nfinal result = results.first;\nfinal count = result.integer('count');\nprint(\"There are $count documents.\");\n"))),(0,r.kt)("h3",{id:"handling-pagination"},"Handling Pagination"),(0,r.kt)("p",null,"One way to handle pagination in high-volume queries is to retrieve the results\nin batches. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"LIMIT")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"OFFSET")," clause, to return a defined number of\nresults starting from a given offset \u2014\u2009see: ",(0,r.kt)("a",{parentName:"p",href:"#example-30"},"Example 30"),"."),(0,r.kt)(c,{id:30,title:"Query Pagination",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"const offset = 0;\nconst limit = 20;\n\nfinal database = await Database.openAsync('hotels');\nfinal query = const QueryBuilder()\n .select(SelectResult.all())\n .from(DataSource.database(database))\n .limit(\n    Expression.integer(limit),\n    offset: Expression.integer(offset),\n  );\n"))),(0,r.kt)("h2",{id:"json-result-sets"},"JSON Result Sets"),(0,r.kt)("p",null,"Couchbase Lite for Dart provides a convenience API to convert query results to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Plain Dart objects through ",(0,r.kt)("inlineCode",{parentName:"li"},"toPlainMap")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"toPlainList")," on ",(0,r.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Result-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Result")),"."),(0,r.kt)("li",{parentName:"ul"},"JSON strings through ",(0,r.kt)("a",{parentName:"li",href:"https://pub.dev/documentation/cbl/latest/cbl/Result/toJson.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Result.toJson")),".")),(0,r.kt)("h3",{id:"convert-result-to-model"},"Convert Result to Model"),(0,r.kt)("p",null,"In Dart/Flutter you can use code generators to auto generate the code for\nhanding serialization. See\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.flutter.dev/development/data-and-backend/json#serializing-json-using-code-generation-libraries"},"Creating model classes the json serializable way"),"\nfor more information. The example below shows how this can be done using the\nclass ",(0,r.kt)("inlineCode",{parentName:"p"},"Hotel")," with methods generated from the code generators. Also note when\nupdating your model classes you will be required to run this command from the\nterminal to update your code generated classes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"flutter pub run build_runner build --delete-conflicting-outputs\n")),(0,r.kt)(c,{id:31,title:"Convert Result to Model",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// hotel.dart\n\npart 'hotel.g.dart';\n\n@JsonSerializable(explicitToJson: true)\nclass Hotel {\n  const Hotel({\n    required this.id,\n    required this.name,\n    required this.city,\n    required this.country,\n    this.description,\n  });\n\n  String id;\n  String type;\n  String name;\n  String city;\n  String country;\n  String? description;\n\n  factory Hotel.fromJson(Map<String, Object?> json) => _$HotelFromJson(json);\n\n  Map<String, Object?> toJson() => _$HotelToJson(this);\n}\n\n@JsonSerializable(explicitToJson: true)\nclass HotelDao {\n const HotelDao(this.hotel);\n\n final Hotel hotel;\n\n factory HotelDao.fromJson(Map<String, Object?> json) =>\n     _$HotelDaoFromJson(json);\n\n  Map<String, Object?> toJson() => _$HotelDaoToJson(this);\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final database = await Database.openAsync('hotels');\nfinal query = const QueryBuilder()\n .select(SelectResult.all().as('hotel'))\n .from(DataSource.database(database));\n\nfinal resultSet = await query.execute();\n\nawait for (final result in resultSet.asStream()) {\n  final map = result.toPlainMap();\n  final hotelDao = HotelDao.fromJson(map);\n  final hotel = hotelDao.hotel;\n  // Do something with the hotel...\n}\n"))),(0,r.kt)("h3",{id:"json-string-format"},"JSON String Format"),(0,r.kt)("p",null,"If your query selects all properties then the JSON format returned by\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Result/toJson.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Result.toJson"))," will be:"),(0,r.kt)(c,{id:32,title:"JSON Format for Select All",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "database-name": {\n    "key1": "value1",\n    "keyx": "valuex"\n  }\n}\n'))),(0,r.kt)("p",null,"If your query selects a sub-set of available properties then the JSON format\nreturned by ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/Result/toJson.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Result.toJson"))," will be:"),(0,r.kt)(c,{id:33,title:"JSON Format for Select Specific Properties",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key1": "value1",\n  "keyx": "valuex"\n}\n'))))}h.isMDXComponent=!0}}]);