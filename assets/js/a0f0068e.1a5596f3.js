"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[613],{8109:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"usage-examples","title":"Usage Examples","description":"Usage Examples Demonstrating How to Use Various Features of Couchbase Lite for Dart","source":"@site/docs/usage-examples.mdx","sourceDirName":".","slug":"/usage-examples","permalink":"/usage-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/usage-examples.mdx","tags":[],"version":"current","frontMatter":{"description":"Usage Examples Demonstrating How to Use Various Features of Couchbase Lite for Dart"},"sidebar":"sidebar","previous":{"title":"Typed Data","permalink":"/typed-data"},"next":{"title":"Instrumentation","permalink":"/instrumentation"}}');var l=a(4848),c=a(8453);const o={description:"Usage Examples Demonstrating How to Use Various Features of Couchbase Lite for Dart"},s="Usage Examples",i={},r=[{value:"Open a Database",id:"open-a-database",level:2},{value:"Access a Collection",id:"access-a-collection",level:2},{value:"Create a Collection",id:"create-a-collection",level:2},{value:"Create a Document",id:"create-a-document",level:2},{value:"Read a Document",id:"read-a-document",level:2},{value:"Update a Document",id:"update-a-document",level:2},{value:"Delete a Document",id:"delete-a-document",level:2},{value:"Build a <code>Query</code> With the <code>QueryBuilder</code> API",id:"build-a-query-with-the-querybuilder-api",level:2},{value:"Build a <code>Query</code> With SQL++",id:"build-a-query-with-sql",level:2},{value:"Data Sync With <code>Replicator</code> To Sync Gateway",id:"data-sync-with-replicator-to-sync-gateway",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components},{MetaHeader:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("MetaHeader",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(t.header,{children:[(0,l.jsx)(t.h1,{id:"usage-examples",children:"Usage Examples"}),(0,l.jsx)(a,{})]}),"\n",(0,l.jsx)(t.h2,{id:"open-a-database",children:"Open a Database"}),"\n",(0,l.jsxs)(t.p,{children:["Every ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Database-class.html",children:(0,l.jsx)(t.code,{children:"Database"})})," has a name which is used to determine its filename. The\nfull filename is the concatenation of the database name and the extension\n",(0,l.jsx)(t.code,{children:".cblite2"}),"."]}),"\n",(0,l.jsx)(t.p,{children:"When opening a database without specifying a directory it will be put into a\ndefault location that is platform dependent:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final db = await Database.openAsync('my-database');\n"})}),"\n",(0,l.jsx)(t.p,{children:"If you want to open a database in a specific directory you can specify the\ndirectory like this:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final db = await Database.openAsync(\n  'my-database',\n  DatabaseConfiguration(directory: 'my-directory')\n);\n"})}),"\n",(0,l.jsx)(t.p,{children:"If a database with the same name already exists in the directory, it will be\nopened. Otherwise a new database will be created."}),"\n",(0,l.jsxs)(t.p,{children:["When you are done with the database, you should close it by calling\n",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Database/close.html",children:(0,l.jsx)(t.code,{children:"Database.close"})}),". This will free up any resources used by the database, as\nwell as remove change listeners, close change streams and close associated\nreplicators."]}),"\n",(0,l.jsx)(t.h2,{id:"access-a-collection",children:"Access a Collection"}),"\n",(0,l.jsx)(t.p,{children:"Documents live in collections."}),"\n",(0,l.jsxs)(t.p,{children:["Existing collections can be accessed through ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Database/collection.html",children:(0,l.jsx)(t.code,{children:"Database.collection"})}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final collectionInDefaultScope = await database.collection('my-collection');\nfinal collectionInCustomScope = await database.collection('my-collection', 'my-scope');\n"})}),"\n",(0,l.jsxs)(t.p,{children:["The default collection is always available and can be accessed through\n",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Database/defaultCollection.html",children:(0,l.jsx)(t.code,{children:"Database.defaultCollection"})}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final defaultCollection = await database.defaultCollection;\n"})}),"\n",(0,l.jsx)(t.h2,{id:"create-a-collection",children:"Create a Collection"}),"\n",(0,l.jsxs)(t.p,{children:["To create a collection, call ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Database/createCollection.html",children:(0,l.jsx)(t.code,{children:"Database.createCollection"})}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final collectionInDefaultScope = await database.createCollection('my-collection');\nfinal collectionInCustomScope = await database.createCollection('my-collection', 'my-scope');\n"})}),"\n",(0,l.jsx)(t.p,{children:"If the collection already exists, it will be returned. Otherwise a new\ncollection will be created."}),"\n",(0,l.jsx)(t.h2,{id:"create-a-document",children:"Create a Document"}),"\n",(0,l.jsxs)(t.p,{children:["The default constructor of ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/MutableDocument-class.html",children:(0,l.jsx)(t.code,{children:"MutableDocument"})})," creates a document with a\nrandomly generated id and optionally initializes it with some properties:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final doc = MutableDocument({\n  'name': 'Alice',\n  'age': 29,\n});\n\nawait collection.saveDocument(doc);\n"})}),"\n",(0,l.jsx)(t.p,{children:"It's also possible to create a document with a specific id:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final doc = MutableDocument.withId('ali', {\n  'name': 'Alice',\n  'age': 29,\n});\n\nawait collection.saveDocument(doc);\n"})}),"\n",(0,l.jsx)(t.h2,{id:"read-a-document",children:"Read a Document"}),"\n",(0,l.jsxs)(t.p,{children:["To read a ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Document-class.html",children:(0,l.jsx)(t.code,{children:"Document"})})," pass the document's id to ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Collection/document.html",children:(0,l.jsx)(t.code,{children:"Collection.document"})}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final doc = await collection.document('ali');\n\n// If the document exists, an immutable `Document` is returned.\nif (doc != null) {\n  print('Name: ${doc.string('name')}');\n  print('Age: ${doc.string('age')}');\n}\n"})}),"\n",(0,l.jsx)(t.h2,{id:"update-a-document",children:"Update a Document"}),"\n",(0,l.jsxs)(t.p,{children:["To update a document, first read it, turn it into a ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/MutableDocument-class.html",children:(0,l.jsx)(t.code,{children:"MutableDocument"})})," and\nupdate its properties. Then save it again with ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Collection/saveDocument.html",children:(0,l.jsx)(t.code,{children:"Collection.saveDocument"})}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final doc = await collection.document('ali');\n\nfinal mutableDoc = doc!.toMutable();\n\n// You can use one of the typed setters to update the document's properties.\nmutableDoc.setArray(MutableArray(['Dart']), key: 'languages');\n\n// Or alternatively, use this subscript syntax to get a [MutableFragment] and\n// use it to update the document.\nmutableDoc['languages'].array = MutableArray(['Dart']);\n\n// The untyped `setValue` setter does the conversion from a plain Dart collection\n// to a document collection (`MutableArray` or `MutableDictionary`) for you.\nmutableDoc.setValue(['Dart'], key: 'languages');\n\n// Again, there is an alternative subscript syntax available.\nmutableDoc['languages'].value = ['Dart'];\n\n\nawait collection.saveDocument(mutableDoc);\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Check out the documentation for ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Collection/saveDocument.html",children:(0,l.jsx)(t.code,{children:"Collection.saveDocument"})})," to learn about how\nconflicts are handled."]}),"\n",(0,l.jsx)(t.h2,{id:"delete-a-document",children:"Delete a Document"}),"\n",(0,l.jsxs)(t.p,{children:["To delete a document, you need to read it first and than pass it to\n",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Collection/deleteDocument.html",children:(0,l.jsx)(t.code,{children:"Collection.deleteDocument"})}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final doc = await collection.document('ali');\n\nawait collection.deleteDocument(doc);\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Check out the documentation for ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Collection/deleteDocument.html",children:(0,l.jsx)(t.code,{children:"Collection.deleteDocument"})})," to learn about\nhow conflicts are handled."]}),"\n",(0,l.jsxs)(t.h2,{id:"build-a-query-with-the-querybuilder-api",children:["Build a ",(0,l.jsx)(t.code,{children:"Query"})," With the ",(0,l.jsx)(t.code,{children:"QueryBuilder"})," API"]}),"\n",(0,l.jsxs)(t.p,{children:["A ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Query-class.html",children:(0,l.jsx)(t.code,{children:"Query"})})," can be built in a type safe way through the ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/QueryBuilder-class.html",children:(0,l.jsx)(t.code,{children:"QueryBuilder"})}),"\nAPI."]}),"\n",(0,l.jsx)(t.p,{children:"The query below returns the average age of people with the same name:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final query = const QueryBuilder()\n  .select(\n    SelectResult.property('name'),\n    SelectResult.expression(\n      Function_.avg(Expression.property('age'))\n    ).as('avgAge'),\n  )\n  .from(DataSource.collection(collection))\n  .groupBy(Expression.property('name'));\n\nfinal resultSet = await query.execute();\nfinal results = await resultSet\n  .asStream()\n  // Converts each result into a `Map`, consisting only of plain Dart values.\n  .map((result) => result.toPlainMap())\n  .toList();\n\nprint(results);\n"})}),"\n",(0,l.jsx)(t.p,{children:"Given these documents:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"[\n  {'name': 'Alice', 'age': 29},\n  {'name': 'Bob', 'age': 45},\n  {'name': 'Alice', 'age': 16},\n]\n"})}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.code,{children:"results"})," will be:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"[\n  {'name': 'Alice', 'avgAge': 22.5},\n  {'name': 'Bob', 'avgAge': 45},\n]\n"})}),"\n",(0,l.jsxs)(t.h2,{id:"build-a-query-with-sql",children:["Build a ",(0,l.jsx)(t.code,{children:"Query"})," With SQL++"]}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.a,{href:"https://www.couchbase.com/products/n1ql",children:"SQL++"})," is an extension of SQL for querying JSON style data."]}),"\n",(0,l.jsxs)(t.p,{children:["The query below is equivalent to query from the ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/QueryBuilder-class.html",children:(0,l.jsx)(t.code,{children:"QueryBuilder"})})," example\nabove:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final query = await db.createQuery(\n  '''\n  SELECT name, avg(age) AS avgAge\n  FROM users\n  GROUP BY name\n  ''',\n);\n"})}),"\n",(0,l.jsxs)(t.h2,{id:"data-sync-with-replicator-to-sync-gateway",children:["Data Sync With ",(0,l.jsx)(t.code,{children:"Replicator"})," To Sync Gateway"]}),"\n",(0,l.jsxs)(t.p,{children:["This example synchronizes the database with a remote Sync Gateway instance,\nwithout authentication. This only works when Sync Gateway has been configured\nwith the ",(0,l.jsx)(t.code,{children:"GUEST"})," user."]}),"\n",(0,l.jsxs)(t.p,{children:["A ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/ReplicatorConfiguration-class.html",children:(0,l.jsx)(t.code,{children:"ReplicatorConfiguration"})})," with only default values creates a\n",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Replicator-class.html",children:(0,l.jsx)(t.code,{children:"Replicator"})})," with ",(0,l.jsx)(t.code,{children:"type"})," ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/ReplicatorType.html",children:(0,l.jsx)(t.code,{children:"ReplicatorType.pushAndPull"})})," that is\nnot ",(0,l.jsx)(t.code,{children:"continuous"}),". You need add the ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Collection-class.html",children:(0,l.jsx)(t.code,{children:"Collection"})}),"s that you want to replicate\nto the configuration."]}),"\n",(0,l.jsx)(t.p,{children:"After starting this replicator, it will push changes from the local database to\nthe remote database and pull changes from the remote database to the local\ndatabase and then stop again."}),"\n",(0,l.jsxs)(t.p,{children:["Both ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Replicator/start.html",children:(0,l.jsx)(t.code,{children:"Replicator.start"})})," and ",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Replicator/stop.html",children:(0,l.jsx)(t.code,{children:"Replicator.stop"})})," don't immediately\nstart/stop the replicator. The current status of the replicator is available in\n",(0,l.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/ReplicatorStatus/activity.html",children:(0,l.jsx)(t.code,{children:"ReplicatorStatus.activity"})}),"."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-dart",children:"final config = ReplicatorConfiguration(target: UrlEndpoint('http://localhost:4984/my-database'))\n  ..addCollection(collection);\nfinal replicator = await Replicator.create(config);\n\nawait replicator.addChangeListener((change) {\n  print('Replicator activity: ${change.status.activity}');\n});\n\nawait replicator.start();\n"})}),"\n",(0,l.jsxs)(t.p,{children:["When you are done with the replicator, you should close it by calling ",(0,l.jsx)(t.code,{children:"close"}),".\nThis will free up any resources used by the replicator, as well as remove change\nlisteners and close change streams."]})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>s});var n=a(6540);const l={},c=n.createContext(l);function o(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);