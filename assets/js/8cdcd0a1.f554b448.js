"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[45],{5480:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"queries/query-troubleshooting","title":"Query Troubleshooting","description":"Couchbase Lite Queries \u2014 Troubleshooting","source":"@site/docs/queries/query-troubleshooting.mdx","sourceDirName":"queries","slug":"/queries/query-troubleshooting","permalink":"/queries/query-troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/queries/query-troubleshooting.mdx","tags":[],"version":"current","frontMatter":{"description":"Couchbase Lite Queries \u2014 Troubleshooting","abstract":"This content describes how to use the Couchbase Lite for Dart Query API\'s explain method to examine a query.","related_content":[{"name":"Live Queries","url":"/queries/live-queries"},{"name":"Indexing","url":"/indexing"}]},"sidebar":"sidebar","previous":{"title":"Live Queries","permalink":"/queries/live-queries"},"next":{"title":"Full Text Search","permalink":"/full-text-search"}}');var r=i(4848),s=i(8453);const a={description:"Couchbase Lite Queries \u2014 Troubleshooting",abstract:"This content describes how to use the Couchbase Lite for Dart Query API's explain method to examine a query.",related_content:[{name:"Live Queries",url:"/queries/live-queries"},{name:"Indexing",url:"/indexing"}]},l="Query Troubleshooting",o={},d=[{value:"Query Explain",id:"query-explain",level:2},{value:"Using",id:"using",level:3},{value:"Output",id:"output",level:3},{value:"The Query Plan",id:"the-query-plan",level:2},{value:"Format",id:"format",level:3},{value:"Retrieval Method",id:"retrieval-method",level:3},{value:"Order and Group",id:"order-and-group",level:3},{value:"Queries and Indexes",id:"queries-and-indexes",level:2},{value:"Working with the Query Optimizer",id:"working-with-the-query-optimizer",level:2},{value:"Wildcard and Like-based Queries",id:"wildcard-queries",level:2},{value:"Use Functions Wisely",id:"use-functions-wisely",level:2},{value:"Optimization Considerations",id:"optimization-considerations",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components},{CodeExample:i,MetaHeader:t,Table:a}=n;return i||u("CodeExample",!0),t||u("MetaHeader",!0),a||u("Table",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.header,{children:[(0,r.jsx)(n.h1,{id:"query-troubleshooting",children:"Query Troubleshooting"}),(0,r.jsx)(t,{})]}),"\n",(0,r.jsx)(n.h2,{id:"query-explain",children:"Query Explain"}),"\n",(0,r.jsx)(n.h3,{id:"using",children:"Using"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Query/explain.html",children:(0,r.jsx)(n.code,{children:"Query.explain()"})})," method can provide useful insight when you are trying\nto diagnose query performance issues and-or optimize queries. To examine how\nyour query is working, either embed the call inside your app (see:\n",(0,r.jsx)(n.a,{href:"#example-1",children:"Example 1"}),"), or use it interactively within a cblite shell (see:\n",(0,r.jsx)(n.a,{href:"#example-2",children:"Example 2"}),")."]}),"\n",(0,r.jsxs)(i,{id:1,title:"Using Query Explain in App",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(\n    SelectResult.expression(Meta.id).as('docId'),\n    SelectResult.expression(Expression.property('id')),\n    SelectResult.expression(Expression.property('name')),\n    SelectResult.expression(Expression.property('city')),\n    SelectResult.expression(Expression.property('type')),\n  )\n  .from(DataSource.collection(collection));\n\nprint(await query.explain());\n"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Construct your query as normal."}),"\n",(0,r.jsxs)(n.li,{children:["Call the query's ",(0,r.jsx)(n.code,{children:"explain"})," method and print it."]}),"\n"]})]}),"\n",(0,r.jsxs)(i,{id:2,title:"Using Query Explain in cblite",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'cblite <your-database-name>.cblite2\n(cblite) select --explain domains GROUP BY country ORDER BY country, name\n(cblite) query --explain {"GROUP_BY":[[".country"]],"ORDER_BY":[[".country"],[".name"]],"WHAT":[[".domains"]]}\n'})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Within a terminal session open your database with cblite and enter your\nquery."}),"\n",(0,r.jsx)(n.li,{children:"Here the query is entered as an SQL++-query using select."}),"\n",(0,r.jsx)(n.li,{children:"Here the query is entered as a JSON-string using query."}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,r.jsxs)(n.p,{children:["The output from ",(0,r.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Query/explain.html",children:(0,r.jsx)(n.code,{children:"Query.explain()"})})," remains the same whether invoked by an\napp, or cblite \u2014 see ",(0,r.jsx)(n.a,{href:"#example-3",children:"Example 3"})," for an example of how it looks."]}),"\n",(0,r.jsxs)(i,{id:3,title:"Query.explain() Output",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'SELECT fl_result(fl_value(_doc.body, \'domains\')) FROM kv_default AS _doc WHERE (_doc.flags & 1 = 0) GROUP BY fl_value(_doc.body, \'country\') ORDER BY fl_value(_doc.body, \'country\'), fl_value(_doc.body, \'name\')\n\n7|0|0| SCAN TABLE kv_default AS _doc\n12|0|0| USE TEMP B-TREE FOR GROUP BY\n52|0|0| USE TEMP B-TREE FOR ORDER BY\n\n{"GROUP_BY":[[".country"]],"ORDER_BY":[[".country"],[".name"]],"WHAT":[[".domains"]]}\n'})}),(0,r.jsxs)(n.p,{children:["This output (",(0,r.jsx)(n.a,{href:"#example-3",children:"Example 3"}),") comprises three main elements:"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The translated SQL-query, which is not necessarily useful, being aimed more\nat Couchbase support and-or engineering teams."}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.a,{href:"https://www.sqlite.org/eqp.html",children:"SQLite query plan"}),", which gives a\nhigh-level view of how the SQL query will be implemented. You can use this to\nidentify potential issues and so optimize problematic queries."]}),"\n",(0,r.jsxs)(n.li,{children:["The query in JSON-string format, which you can copy-and-paste directly into\nthe ",(0,r.jsx)(n.em,{children:"cblite"})," tool."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"the-query-plan",children:"The Query Plan"}),"\n",(0,r.jsx)(n.h3,{id:"format",children:"Format"}),"\n",(0,r.jsxs)(n.p,{children:["The query plan section of the output displays a tabular form of the translated\nquery's execution plan. It primarily shows how the data will be retrieved and,\nwhere appropriate, how it will be sorted for navigation and-or presentation\npurposes. For more on SQLite's Explain Query Plan \u2014 see:\n",(0,r.jsx)(n.a,{href:"https://www.sqlite.org/eqp.html",children:"https://www.sqlite.org/eqp.html"}),"."]}),"\n",(0,r.jsxs)(i,{id:4,title:"A Query Plan",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"7|0|0| SCAN TABLE kv_default AS _doc\n12|0|0| USE TEMP B-TREE FOR GROUP BY\n52|0|0| USE TEMP B-TREE FOR ORDER BY\n"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Retrieval method"})," \u2014 This line shows the retrieval method being used for\nthe query; here a sequential read of the database. Something you may well be\nlooking to optimize \u2014 see ",(0,r.jsx)(n.a,{href:"#retrieval-method",children:"Retrieval Method"})," for more."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Grouping method"})," --- This line shows that the ",(0,r.jsx)(n.code,{children:"GROUP BY"})," clause used in\nthe query requires the data to be sorted and that a b-tree will be used for\ntemporary storage \u2014 see ",(0,r.jsx)(n.a,{href:"#order-and-group",children:"Order and Group"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ordering method"})," \u2014 This line shows that the ",(0,r.jsx)(n.code,{children:"ORDER BY"})," clause used in the\nquery requires the data to be sorted and that a b-tree will be used for\ntemporary storage \u2014 see ",(0,r.jsx)(n.a,{href:"#order-and-group",children:"Order and Group"}),"."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"retrieval-method",children:"Retrieval Method"}),"\n",(0,r.jsxs)(n.p,{children:["The query optimizer will attempt to retrieve the requested data items as\nefficiently as possible, which generally will be by using one or more of the\navailable indexes. The retrieval method shows the approach decided upon by the\noptimizer \u2014 see ",(0,r.jsx)(n.a,{href:"#table-1",children:"Table 1"}),"."]}),"\n",(0,r.jsx)(a,{id:1,title:"Retrieval Methods",children:(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Retrieval Method"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Search"}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Here the query is able to access the required data directly using keys into the index. Queries using the Search mode are the fastest."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Scan Index"}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Here the query is able to retrieve the data by scanning all or part-of the index (for example when seeking to match values within a range). This type of query is slower than search, but at least benefits from the compact and ordered form of the index."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Scan Table"}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Here the query must scan the database table(s) to retrieve the required data. It is the slowest of these methods and will benefit most from some form of optimization."})]})]})]})}),"\n",(0,r.jsx)(n.p,{children:"When looking to optimize a query's retrieval method, consider whether:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Providing an additional index makes sense."}),"\n",(0,r.jsx)(n.li,{children:"You could use an existing index \u2014 perhaps by restructuring the query to\nminimize wildcard use, or the reliance on functions that modify the query's\ninterpretation of index keys (for example, 'lower')."}),"\n",(0,r.jsx)(n.li,{children:"You could reduce the data set being requested to minimize the query's\nfootprint on the database."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"order-and-group",children:"Order and Group"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"USE TEMP B-TREE FOR"})," lines in the example indicate that the query requires\nsorting to cater for grouping and then sorting again to present the output\nresults. Minimizing, if not eliminating, this ordering and re-ordering will\nobviously reduce the amount of time taken to process your query."]}),"\n",(0,r.jsx)(n.p,{children:'Ask "is the grouping and-or ordering absolutely necessary?": if it isn\'t, drop\nit or modify it to minimize its impact.'}),"\n",(0,r.jsx)(n.h2,{id:"queries-and-indexes",children:"Queries and Indexes"}),"\n",(0,r.jsx)(n.p,{children:"Before we begin querying documents, let's briefly mention the importance of\nhaving an appropriate and balanced approach to indexes."}),"\n",(0,r.jsx)(n.p,{children:"Creating indexes can speed up the performance of queries. A query will typically\nreturn results more quickly if it can take advantage of an existing database\nindex to search, narrowing down the set of documents to be examined."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Couchbase Lite for dart does not currently support partial value indexes;\nindexes with non-property expressions. You should only index with properties\nthat you plan to use in the query."})}),"\n",(0,r.jsxs)(n.p,{children:["The Query optimizer converts your query into a parse tree that groups zero or\nmore ",(0,r.jsx)(n.em,{children:"and-connected"})," clauses together (as dictated by your where conditionals)\nfor effective query engine processing."]}),"\n",(0,r.jsx)(n.p,{children:"Ideally a query will be be able to satisfy its requirements entirely by either\ndirectly accessing the index or searching sequential index rows. Less good is if\nthe query must scan the whole index; although the compact nature of most indexes\nmeans this is still much faster than the alternative of scanning the entire\ndatabase with no help from the indexes at all."}),"\n",(0,r.jsx)(n.p,{children:"Searches that begin with or rely upon an inequality with the primary key are\ninherently less effective than those using a primary key equality."}),"\n",(0,r.jsx)(n.h2,{id:"working-with-the-query-optimizer",children:"Working with the Query Optimizer"}),"\n",(0,r.jsx)(n.p,{children:"You may have noticed that sometimes a query runs faster on a second run, or\nafter re-opening the database, or after deleting and recreating an index. This\ntypically happens when SQL Query Optimizer has gathered sufficient stats to\nrecognize a means of optimizing a sub-optimal query."}),"\n",(0,r.jsx)(n.p,{children:"If only those stats were available from the start. In fact they are gathered\nafter certain events, such as:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Following index creation"}),"\n",(0,r.jsx)(n.li,{children:"On a database close"}),"\n",(0,r.jsx)(n.li,{children:"When running a database compact."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["So, if your analysis of the ",(0,r.jsx)(n.a,{href:"#example-3",children:"Query Explain output"})," indicates a\nsub-optimal query and your rewrites fail to sufficiently optimize it, consider\ncompacting the database. Then re-generate the Query Explain and note any\nimprovements in optimization. They may not, in themselves, resolve the issue\nentirely; but they can provide a uesful guide toward further optimizing changes\nyou could make."]}),"\n",(0,r.jsx)(n.h2,{id:"wildcard-queries",children:"Wildcard and Like-based Queries"}),"\n",(0,r.jsx)(n.p,{children:"Like-based searches can use the index(es) only if:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The search-string doesn't start with a wildcard."}),"\n",(0,r.jsx)(n.li,{children:"The primary search expression uses a property that is an indexed key."}),"\n",(0,r.jsx)(n.li,{children:"The search-string is a constant known at run time (that is, not a value\nderived during processing of the query)."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To illustrate this we can use a modified query; replacing a simple equality test\nwith a ",(0,r.jsx)(n.code,{children:"LIKE"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.a,{href:"#example-5",children:"Example 5"})," we use a wildcard prefix and suffix. You can see that the\nquery plan decides on a retrieval method of ",(0,r.jsx)(n.code,{children:"SCAN TABLE"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["For more on indexes \u2014\u2009see: ",(0,r.jsx)(n.a,{href:"/indexing",children:"Indexing"}),"."]})}),"\n",(0,r.jsxs)(i,{id:5,title:"Like with Wildcard Prefix",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.collection(collection).as('item'))\n  .where(Expression.property('type').like(Expression.string('%hotel%')));\n\nprint(await query.explain());\n"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The indexed property, ",(0,r.jsx)(n.code,{children:"type"}),", cannot use its index because of the wildcard\nprefix."]}),"\n"]})]}),"\n",(0,r.jsx)(i,{id:6,title:"Resulting Query Plan",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"2|0|0| SCAN TABLE kv_default AS _doc\n"})})}),"\n",(0,r.jsxs)(n.p,{children:["By contrast, by removing the wildcard prefix ",(0,r.jsx)(n.code,{children:"%"})," (in ",(0,r.jsx)(n.a,{href:"#example-7",children:"Example 7"}),"), we see\nthat the query plan's retrieval method changes to become an index search. Where\npractical, simple changes like this can make significant differences in query\nperformance."]}),"\n",(0,r.jsxs)(i,{id:7,title:"Like with No Wildcard-prefix",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.collection(collection).as('item'))\n  .where(Expression.property('type').like(Expression.string('hotel%'))\n\t.and(Expression.property('name').like(Expression.string('%royal%'))));\n\nprint(await query.explain());\n"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Simply removing the wildcard prefix enables the query optimizer to access the\n",(0,r.jsx)(n.code,{children:"typeIndex"}),", which results in a more efficient search."]}),"\n"]})]}),"\n",(0,r.jsx)(i,{id:8,title:"Resulting Query Plan",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"3|0|0| SEARCH TABLE kv_default AS _doc USING INDEX typeIndex (<expr>>? AND <expr><?)\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"use-functions-wisely",children:"Use Functions Wisely"}),"\n",(0,r.jsx)(n.p,{children:"Functions are a very useful tool in building queries, but be aware that they can\nimpact whether the query-optimizer is able to use your index(es)."}),"\n",(0,r.jsxs)(n.p,{children:["For example, you can observe a similar situation to that shown in\n",(0,r.jsx)(n.a,{href:"#wildcard-queries",children:"Wildcard and Like-based Queries"})," when using\n",(0,r.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html",children:(0,r.jsx)(n.code,{children:"Function_.lower()"})})," on an indexed property."]}),"\n",(0,r.jsxs)(i,{id:9,title:"WHERE with LOWER Function",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.collection(collection))\n  .where(Function_.lower(Expression.property('type')).equalTo(Expression.string('hotel')));\n\nprint(await query.explain());\n"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Here we use ",(0,r.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html",children:(0,r.jsx)(n.code,{children:"Function_.lower()"})})," in the ",(0,r.jsx)(n.code,{children:"WHERE"})," expression."]}),"\n"]})]}),"\n",(0,r.jsx)(i,{id:10,title:"Resulting Query Plan",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"2|0|0| SCAN TABLE kv_default AS _doc\n"})})}),"\n",(0,r.jsxs)(n.p,{children:["But removing ",(0,r.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html",children:(0,r.jsx)(n.code,{children:"Function_.lower()"})}),", changes things:"]}),"\n",(0,r.jsxs)(i,{id:11,title:"WHERE with LOWER Function",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final database = await Database.openAsync('hotels');\nfinal collection = await database.defaultCollection;\n\nfinal query = const QueryBuilder()\n  .select(SelectResult.all())\n  .from(DataSource.collection(collection))\n  .where(Expression.property('type').equalTo(Expression.string('hotel')));\n\nprint(await query.explain());\n"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Here we have removed ",(0,r.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html",children:(0,r.jsx)(n.code,{children:"Function_.lower()"})})," from the ",(0,r.jsx)(n.code,{children:"WHERE"})," expression."]}),"\n"]})]}),"\n",(0,r.jsx)(i,{id:12,title:"Query Plan",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-console",children:"3|0|0| SEARCH TABLE kv_default AS _doc USING INDEX typeIndex (<expr>=?)\n"})})}),"\n",(0,r.jsxs)(n.p,{children:["Knowing this, you can consider how you create the index; for example, using\n",(0,r.jsx)(n.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Function_/lower.html",children:(0,r.jsx)(n.code,{children:"Function_.lower()"})})," when you create the index and then always using\nlowercase comparisons."]}),"\n",(0,r.jsx)(n.h2,{id:"optimization-considerations",children:"Optimization Considerations"}),"\n",(0,r.jsx)(n.p,{children:"Try to minimize the amount of data retrieved. Reduce it down to the few\nproperties you really do need to achieve the required result."}),"\n",(0,r.jsx)(n.p,{children:"Consider fetching details lazily. You could break complex queries into\ncomponents. Returning just the document IDs, then process the array of document\nIDs using either the Document API or a query thats uses the array of document\nIDs to return information."}),"\n",(0,r.jsxs)(n.p,{children:["Consider using paging to minimize the data returned when the number of results\nreturned is expected to be high. Getting the whole lot at once will be slow and\nresource intensive: Plus does anyone want to access them all in one go? Instead\nretrieve batches of information at a time, perhaps using ",(0,r.jsx)(n.code,{children:"LIMIT"})," and ",(0,r.jsx)(n.code,{children:"OFFSET"}),"\nclauese to set a starting point for each subsequent batch."]}),"\n",(0,r.jsx)(n.p,{children:"Although, note that using query offsets becomes increasingly less effective as\nthe overhead of skipping a growing number of rows each time increases. You can\nwork around this, by instead using ranges of search-key values. If the last\nsearch-key value of batch one was 'x' then that could become the starting point\nfor your next batch and-so-on."}),"\n",(0,r.jsx)(n.p,{children:"Optimize document size in design. Smaller documents load more quickly. Break\nyour data into logical linked units."}),"\n",(0,r.jsxs)(n.p,{children:["Consider Using Full Text Search instead of complex ",(0,r.jsx)(n.code,{children:"LIKE"})," or ",(0,r.jsx)(n.code,{children:"REGEX"})," patterns \u2014\nsee ",(0,r.jsx)(n.a,{href:"/full-text-search",children:"Full Text Search"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);