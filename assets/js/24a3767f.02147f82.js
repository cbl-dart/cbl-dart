"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[767],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6016:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={description:"Instrumenting Couchbase Lite for Debugging, Crash Reporting and Performance Profiling"},o="Instrumentation",s={unversionedId:"instrumentation",id:"instrumentation",title:"Instrumentation",description:"Instrumenting Couchbase Lite for Debugging, Crash Reporting and Performance Profiling",source:"@site/docs/instrumentation.mdx",sourceDirName:".",slug:"/instrumentation",permalink:"/instrumentation",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/instrumentation.mdx",tags:[],version:"current",frontMatter:{description:"Instrumenting Couchbase Lite for Debugging, Crash Reporting and Performance Profiling"},sidebar:"sidebar",previous:{title:"Usage Examples",permalink:"/usage-examples"},next:{title:"Supported Platforms",permalink:"/supported-platforms"}},l={},p=[{value:"Sentry",id:"sentry",level:2},{value:"Features",id:"features",level:3},{value:"Limitations",id:"limitations",level:3},{value:"Getting started",id:"getting-started",level:3},{value:"Performance tracing",id:"performance-tracing",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"instrumentation"},"Instrumentation"),(0,r.kt)("metaheader",null),(0,r.kt)("p",null,"The execution of certain operations can be traced through the tracing API. This\nis useful for debugging and performance profiling."),(0,r.kt)("p",null,"CBL Dart has builtin trace points at which flow control is given to the\ncurrently installed ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/TracingDelegate-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"TracingDelegate")),"."),(0,r.kt)("p",null,"Included in this package is the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DevToolsTracing-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"DevToolsTracing"))," delegate, which records\ntimeline events that can be later visualized through the Dart DevTools\nPerformance Page."),(0,r.kt)("p",null,"You can install a delegate by calling ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/TracingDelegate/install.html"},(0,r.kt)("inlineCode",{parentName:"a"},"TracingDelegate.install")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"await TracingDelegate.install(DevToolsTracing());\n")),(0,r.kt)("h2",{id:"sentry"},"Sentry"),(0,r.kt)("p",null,"The Sentry integration provided by ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl_sentry/latest/index.html"},(0,r.kt)("inlineCode",{parentName:"a"},"cbl_sentry"))," installs a\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/DevToolsTracing-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"DevToolsTracing"))," to transparently record breadcrumbs and transaction spans."),(0,r.kt)("h3",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Record log messages as Sentry breadcrumbs"),(0,r.kt)("li",{parentName:"ul"},"Record CBL Dart API usage as Sentry breadcrumbs"),(0,r.kt)("li",{parentName:"ul"},"Record CBL Dart operations as Sentry transaction spans")),(0,r.kt)("h3",{id:"limitations"},"Limitations"),(0,r.kt)("p",null,"Sentry currently does not support binding transaction spans to zones. This means\nthere can only be one global transaction span that integrations can\ntransparently access. To support more advanced use cases, this package provides\na mechanism to bind transaction spans to zones. This mechanism will be removed\nif and when Sentry supports this natively."),(0,r.kt)("h3",{id:"getting-started"},"Getting started"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make sure your ",(0,r.kt)("a",{parentName:"p",href:"/install"},"app is setup")," for using Couchbase Lite.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl_sentry/latest/index.html"},(0,r.kt)("inlineCode",{parentName:"a"},"cbl_sentry"))," package as a dependency:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"flutter pub add cbl_sentry\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl_sentry/latest/cbl_sentry/CouchbaseLiteIntegration-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"CouchbaseLiteIntegration"))," when configuring Sentry:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:cbl_sentry/cbl_sentry.dart';\nimport 'package:sentry/sentry.dart';\n\nvoid main() {\n  Sentry.init(\n    (options) {\n      options\n        ..dsn = ...\n        // While testing your Sentry configuration, make sure that all traces are sampled.\n        ..tracesSampleRate = 1\n        // Add the CBL Dart integration.\n        ..addIntegration(CouchbaseLiteIntegration());\n    },\n    appRunner: () async {\n      runApp(MyApp());\n    }\n  );\n}\n")),(0,r.kt)("p",{parentName:"li"},"To find out about configurable options, see the documentation of\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl_sentry/latest/cbl_sentry/CouchbaseLiteIntegration-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"CouchbaseLiteIntegration")),"."),(0,r.kt)("admonition",{parentName:"li",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Make sure you don't install a ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/TracingDelegate-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"TracingDelegate"))," when using the\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl_sentry/latest/cbl_sentry/CouchbaseLiteIntegration-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"CouchbaseLiteIntegration")),". The integration has to be able to\ninstall a ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl/latest/cbl/TracingDelegate-class.html"},(0,r.kt)("inlineCode",{parentName:"a"},"TracingDelegate"))," itself.")))),(0,r.kt)("h3",{id:"performance-tracing"},"Performance tracing"),(0,r.kt)("p",null,"This integration only records transaction spans when a transaction has been\nstarted and a child span of the transaction is available in the environment."),(0,r.kt)("p",null,"To find a span, the integration uses ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl_sentry/latest/cbl_sentry/cblSentrySpan.html"},(0,r.kt)("inlineCode",{parentName:"a"},"cblSentrySpan")),". This is\na getter that returns either a span that has been bound to the current zone or\nas a fallback the result of ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/sentry/latest/sentry_io/Sentry/getSpan.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Sentry.getSpan")),". To bind a\nspan to a zone use ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/cbl_sentry/latest/cbl_sentry/runWithCblSentrySpan.html"},(0,r.kt)("inlineCode",{parentName:"a"},"runWithCblSentrySpan")),"."),(0,r.kt)("p",null,"The following code snippet shows functions that are useful to trace the\nperformance of operations in an app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"Future<T> runAppTransaction<T>(String name, Future<T> Function() fn) =>\n    _runAppSpan(Sentry.startTransaction(name, 'task'), fn);\n\nFuture<T> runAppOperation<T>(String name, Future<T> Function() fn) =>\n    _runAppSpan(cblSentrySpan!.startChild(name), fn);\n\nFuture<T> _runAppSpan<T>(ISentrySpan span,Future<T> Function() fn) async {\n  try {\n    return await runWithCblSentrySpan(span, fn);\n    // ignore: avoid_catches_without_on_clauses\n  } catch (e) {\n    span\n      ..throwable = e\n      ..status = const SpanStatus.internalError();\n    rethrow;\n  } finally {\n    span.status ??= const SpanStatus.ok();\n    await span.finish();\n  }\n}\n")),(0,r.kt)("p",null,"A app operation like the one below is traced as a transaction span, with CBL\nDart operations as child spans:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> queryDatabase() => runAppOperation('queryDatabase', () async {\n      final query = await Query.fromN1ql(\n        db,\n        'SELECT * FROM example WHERE age >= 28 OR name LIKE \"A%\"',\n      );\n      final resultSet = await query.execute();\n      final results = await resultSet\n          .asStream()\n          .map((result) => result.toPlainMap())\n          .toList();\n\n      prettyPrintJson(results);\n    });\n")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/cbl-dart/cbl-dart/blob/main/packages/cbl_sentry/doc/img/sentry-trace-example.png?raw=true",alt:"Sentry Trace Example"})))}u.isMDXComponent=!0}}]);