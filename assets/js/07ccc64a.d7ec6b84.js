"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[692],{7635:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"queries/live-queries","title":"Live Queries","description":"Couchbase Lite Live Query Concepts","source":"@site/docs/queries/live-queries.mdx","sourceDirName":"queries","slug":"/queries/live-queries","permalink":"/queries/live-queries","draft":false,"unlisted":false,"editUrl":"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/queries/live-queries.mdx","tags":[],"version":"current","frontMatter":{"description":"Couchbase Lite Live Query Concepts","related_content":[{"name":"SQL++ for Mobile","url":"/queries/sqlplusplus-mobile"},{"name":"QueryBuilder","url":"/queries/query-builder"}]},"sidebar":"sidebar","previous":{"title":"Query Result Sets","permalink":"/queries/query-result-sets"},"next":{"title":"Query Troubleshooting","permalink":"/queries/query-troubleshooting"}}');var r=n(4848),i=n(8453);const a={description:"Couchbase Lite Live Query Concepts",related_content:[{name:"SQL++ for Mobile",url:"/queries/sqlplusplus-mobile"},{name:"QueryBuilder",url:"/queries/query-builder"}]},l="Live Queries",c={},h=[{value:"Activating a Live Query",id:"activating-a-live-query",level:2},{value:"Watching with Change Listeners",id:"watching-with-change-listeners",level:2},{value:"Watching with Streams",id:"watching-with-streams",level:2}];function o(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{CodeExample:n,MetaHeader:s}=t;return n||d("CodeExample",!0),s||d("MetaHeader",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.header,{children:[(0,r.jsx)(t.h1,{id:"live-queries",children:"Live Queries"}),(0,r.jsx)(s,{})]}),"\n",(0,r.jsx)(t.h2,{id:"activating-a-live-query",children:"Activating a Live Query"}),"\n",(0,r.jsx)(t.p,{children:"A live query is a query that, once activated, remains active and monitors the\ndatabase for changes; refreshing the result set whenever a change occurs. As\nsuch, it is a great way to build reactive user interfaces \u2014\u2009especially\ntable/list views \u2014\u2009that keep themselves up to date."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"So, a simple use case may be"}),": A replicator running and pulling new data from\na server, whilst a live-query-driven UI automatically updates to show the data\nwithout the user having to manually refresh. This helps your app feel quick and\nresponsive."]}),"\n",(0,r.jsx)(t.p,{children:"With Couchbase Lite for Dart, live queries can be watched through:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Listener callbacks: ",(0,r.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Query/addChangeListener.html",children:(0,r.jsx)(t.code,{children:"Query.addChangeListener"})})]}),"\n",(0,r.jsxs)(t.li,{children:["Streams: ",(0,r.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Query/changes.html",children:(0,r.jsx)(t.code,{children:"Query.changes"})})]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Each time you start watching a live query, the query is executed and an initial\nchange notification is dispatched. The query is then kept active and further\nchange notifications are dispatched whenever a change occurs."}),"\n",(0,r.jsx)(t.h2,{id:"watching-with-change-listeners",children:"Watching with Change Listeners"}),"\n",(0,r.jsx)(t.p,{children:"In the case of the synchronous API, all changes are delivered to the listeners\nas soon as they are registered."}),"\n",(0,r.jsxs)(t.p,{children:["With the asynchronous API, changes are only guaranteed to be delivered once the\n",(0,r.jsx)(t.a,{href:"https://api.dart.dev/dart-async/Future-class.html",children:(0,r.jsx)(t.code,{children:"Future"})})," returned from the registration call is completed:"]}),"\n",(0,r.jsx)(n,{id:1,title:"Starting a Live Query - Change Listener",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"// Await the future returned from the registration call.\nawait query.addChangeListener((change) async {\n  final results = await change.results.allResults();\n\tfor (final result in results) {\n\t\t// Do something with the result...\n\t}\n});\n"})})}),"\n",(0,r.jsxs)(t.p,{children:["To stop receiving notifications, call ",(0,r.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/Query/removeChangeListener.html",children:(0,r.jsx)(t.code,{children:"Query.removeChangeListener"})})," with the\ntoken that was returned from the registration call. Regardless of the whether\nthe API is synchronous or asynchronous, listeners will stop receiving\nnotifications immediately:"]}),"\n",(0,r.jsx)(n,{id:2,title:"Stopping a Live Query - Change Listener",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"final token = await query.addChangeListener((change) async { ... });\n\n// Some time goes by...\n\nawait query.removeChangeListener(token);\n"})})}),"\n",(0,r.jsx)(t.h2,{id:"watching-with-streams",children:"Watching with Streams"}),"\n",(0,r.jsx)(t.p,{children:"Streams are a convenient alternative to listen for changes. Similarly to change\nlisteners, change streams returned from the synchronous API are receiving\nchanges as soon as the stream is subscribed to."}),"\n",(0,r.jsxs)(t.p,{children:["Streams returned from the asynchronous API start to listen asynchronously.\nUnfortunately it's not possible to return a Future from Stream.listen to signal\nto subscribers the point in time after which the the stream will observe events.\nInstead, the asynchronous API returns a ",(0,r.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/AsyncListenStreams-class.html",children:(0,r.jsx)(t.code,{children:"AsyncListenStreams"})}),", which expose a\n",(0,r.jsx)(t.a,{href:"https://api.dart.dev/dart-async/Future-class.html",children:(0,r.jsx)(t.code,{children:"Future"})})," in ",(0,r.jsx)(t.a,{href:"https://pub.dev/documentation/cbl/latest/cbl/AsyncListenStream/listening.html",children:(0,r.jsx)(t.code,{children:"AsyncListenStream.listening"})})," that completes when\nthe stream is fully listening:"]}),"\n",(0,r.jsx)(n,{id:3,title:"Starting a Live Query - Stream",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-dart",children:"final stream = query.changes();\n\nstream.listen((change) async {\n\tfinal results = await change.results.allResults();\n\tfor (final result in results) {\n\t\t// Do something with the result...\n\t}\n});\n\n// Await the Future exposed by the stream.\nawait stream.listening;\n"})})}),"\n",(0,r.jsx)(t.p,{children:"To stop listening to changes just cancel the subscription, like with any other\nstream."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}function d(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);