"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[892],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,x=c["".concat(d,".").concat(m)]||c[m]||u[m]||i;return t?a.createElement(x,o(o({ref:n},p),{},{components:t})):a.createElement(x,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},24:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={description:"Couchbase mobile database indexes and indexing concepts",related_content:[{name:"Databases",url:"/databases"},{name:"Documents",url:"/documents"},{name:"Indexing",url:"/indexing"}]},o="Indexes",l={unversionedId:"indexing",id:"indexing",title:"Indexes",description:"Couchbase mobile database indexes and indexing concepts",source:"@site/docs/indexing.mdx",sourceDirName:".",slug:"/indexing",permalink:"/indexing",draft:!1,editUrl:"https://github.com/cbl-dart/cbl-dart/tree/main/docs/docs/indexing.mdx",tags:[],version:"current",frontMatter:{description:"Couchbase mobile database indexes and indexing concepts",related_content:[{name:"Databases",url:"/databases"},{name:"Documents",url:"/documents"},{name:"Indexing",url:"/indexing"}]},sidebar:"sidebar",previous:{title:"Using Full-Text Search",permalink:"/full-text-search"},next:{title:"Typed Data",permalink:"/typed-data"}},d={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Creating a new index",id:"creating-a-new-index",level:2},{value:"SQL++",id:"sql",level:3},{value:"QueryBuilder",id:"querybuilder",level:3},{value:"Summary",id:"summary",level:2}],p=(u="CodeExample",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const c={toc:s};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"indexes"},"Indexes"),(0,r.kt)("metaheader",null),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Before we begin querying documents, let's briefly mention the importance of\nhaving an appropriate and balanced approach to indexes."),(0,r.kt)("p",null,"Creating indexes can speed up the performance of queries. A query will typically\nreturn results more quickly if it can take advantage of an existing database\nindex to search, narrowing down the set of documents to be examined."),(0,r.kt)("admonition",{title:"Constraints",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Couchbase Lite does not currently support partial value indexes; indexes with\nnon-property expressions. You should only index with properties that you plan to\nuse in the query.")),(0,r.kt)("h2",{id:"creating-a-new-index"},"Creating a new index"),(0,r.kt)("p",null,"You can use SQL++ or QueryBuilder syntaxes to create an index."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#example-2"},"Example 2")," creates a new index for the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," properties, shown\nin this data model:"),(0,r.kt)(p,{id:1,title:"Data Model",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": "hotel123",\n  "type": "hotel",\n  "name": "The Michigander",\n  "overview": "Ideally situated for exploration of the Motor City and the wider state of Michigan. Tripadvisor rated the hotel ...",\n  "state": "Michigan"\n}\n'))),(0,r.kt)("h3",{id:"sql"},"SQL++"),(0,r.kt)("p",null,"The code to create the index will look something like this:"),(0,r.kt)(p,{id:2,title:"Create index with SQL++",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final config = ValueIndexConfiguration(['type', 'name']);\nawait database.createIndex('TypeNameIndex', config);\n"))),(0,r.kt)("h3",{id:"querybuilder"},"QueryBuilder"),(0,r.kt)("p",null,"The code to create the index will look something like this:"),(0,r.kt)(p,{id:3,title:"Create index QueryBuilder",mdxType:"CodeExample"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final typeExpression = Expression.property('type');\nfinal nameExpression = Expression.property('name');\nfinal valueIndexItems = {\n    ValueIndexItem.expression(typeExpression),\n    ValueIndexItem.expression(nameExpression),\n};\nfinal index = IndexBuilder.valueIndex(valueIndexItems);\nawait database.createIndex('TypeNameIndex', index);\n"))),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"When planning the indexes you need for your database, remember that while\nindexes make queries faster, they may also:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Make writes slightly slower, because each index must be updated whenever a\ndocument is updated."),(0,r.kt)("li",{parentName:"ul"},"Make your Couchbase Lite database slightly larger.")),(0,r.kt)("p",null,"So too many indexes may hurt performance. Optimal performance depends on\ndesigning and creating the ",(0,r.kt)("em",{parentName:"p"},"right")," indexes to go along with your queries."))}m.isMDXComponent=!0}}]);