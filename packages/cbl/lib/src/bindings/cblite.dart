// ignore_for_file: unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for Couchbase Lite C API
class cblite {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  cblite(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  cblite.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  FLSliceResult CBLError_Message(
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLError_Message(
      outError,
    );
  }

  late final _CBLError_MessagePtr =
      _lookup<ffi.NativeFunction<NativeCBLError_Message>>('CBLError_Message');
  late final _CBLError_Message =
      _CBLError_MessagePtr.asFunction<DartCBLError_Message>();

  int CBL_Now() {
    return _CBL_Now();
  }

  late final _CBL_NowPtr =
      _lookup<ffi.NativeFunction<NativeCBL_Now>>('CBL_Now');
  late final _CBL_Now = _CBL_NowPtr.asFunction<DartCBL_Now>();

  ffi.Pointer<CBLRefCounted> CBL_Retain(
    ffi.Pointer<CBLRefCounted> arg0,
  ) {
    return _CBL_Retain(
      arg0,
    );
  }

  late final _CBL_RetainPtr =
      _lookup<ffi.NativeFunction<NativeCBL_Retain>>('CBL_Retain');
  late final _CBL_Retain = _CBL_RetainPtr.asFunction<DartCBL_Retain>();

  void CBL_Release(
    ffi.Pointer<CBLRefCounted> arg0,
  ) {
    return _CBL_Release(
      arg0,
    );
  }

  late final _CBL_ReleasePtr =
      _lookup<ffi.NativeFunction<NativeCBL_Release>>('CBL_Release');
  late final _CBL_Release = _CBL_ReleasePtr.asFunction<DartCBL_Release>();

  int CBL_InstanceCount() {
    return _CBL_InstanceCount();
  }

  late final _CBL_InstanceCountPtr =
      _lookup<ffi.NativeFunction<NativeCBL_InstanceCount>>('CBL_InstanceCount');
  late final _CBL_InstanceCount =
      _CBL_InstanceCountPtr.asFunction<DartCBL_InstanceCount>();

  void CBL_DumpInstances() {
    return _CBL_DumpInstances();
  }

  late final _CBL_DumpInstancesPtr =
      _lookup<ffi.NativeFunction<NativeCBL_DumpInstances>>('CBL_DumpInstances');
  late final _CBL_DumpInstances =
      _CBL_DumpInstancesPtr.asFunction<DartCBL_DumpInstances>();

  void CBLListener_Remove(
    ffi.Pointer<CBLListenerToken> arg0,
  ) {
    return _CBLListener_Remove(
      arg0,
    );
  }

  late final _CBLListener_RemovePtr =
      _lookup<ffi.NativeFunction<NativeCBLListener_Remove>>(
          'CBLListener_Remove');
  late final _CBLListener_Remove =
      _CBLListener_RemovePtr.asFunction<DartCBLListener_Remove>();

  late final ffi.Pointer<FLSlice> _kCBLBlobType =
      _lookup<FLSlice>('kCBLBlobType');

  FLSlice get kCBLBlobType => _kCBLBlobType.ref;

  late final ffi.Pointer<FLSlice> _kCBLBlobDigestProperty =
      _lookup<FLSlice>('kCBLBlobDigestProperty');

  FLSlice get kCBLBlobDigestProperty => _kCBLBlobDigestProperty.ref;

  late final ffi.Pointer<FLSlice> _kCBLBlobLengthProperty =
      _lookup<FLSlice>('kCBLBlobLengthProperty');

  FLSlice get kCBLBlobLengthProperty => _kCBLBlobLengthProperty.ref;

  late final ffi.Pointer<FLSlice> _kCBLBlobContentTypeProperty =
      _lookup<FLSlice>('kCBLBlobContentTypeProperty');

  FLSlice get kCBLBlobContentTypeProperty => _kCBLBlobContentTypeProperty.ref;

  bool FLDict_IsBlob(
    FLDict arg0,
  ) {
    return _FLDict_IsBlob(
      arg0,
    );
  }

  late final _FLDict_IsBlobPtr =
      _lookup<ffi.NativeFunction<NativeFLDict_IsBlob>>('FLDict_IsBlob');
  late final _FLDict_IsBlob = _FLDict_IsBlobPtr.asFunction<DartFLDict_IsBlob>();

  ffi.Pointer<CBLBlob> FLDict_GetBlob(
    FLDict blobDict,
  ) {
    return _FLDict_GetBlob(
      blobDict,
    );
  }

  late final _FLDict_GetBlobPtr =
      _lookup<ffi.NativeFunction<NativeFLDict_GetBlob>>('FLDict_GetBlob');
  late final _FLDict_GetBlob =
      _FLDict_GetBlobPtr.asFunction<DartFLDict_GetBlob>();

  int CBLBlob_Length(
    ffi.Pointer<CBLBlob> arg0,
  ) {
    return _CBLBlob_Length(
      arg0,
    );
  }

  late final _CBLBlob_LengthPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_Length>>('CBLBlob_Length');
  late final _CBLBlob_Length =
      _CBLBlob_LengthPtr.asFunction<DartCBLBlob_Length>();

  FLString CBLBlob_ContentType(
    ffi.Pointer<CBLBlob> arg0,
  ) {
    return _CBLBlob_ContentType(
      arg0,
    );
  }

  late final _CBLBlob_ContentTypePtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_ContentType>>(
          'CBLBlob_ContentType');
  late final _CBLBlob_ContentType =
      _CBLBlob_ContentTypePtr.asFunction<DartCBLBlob_ContentType>();

  FLString CBLBlob_Digest(
    ffi.Pointer<CBLBlob> arg0,
  ) {
    return _CBLBlob_Digest(
      arg0,
    );
  }

  late final _CBLBlob_DigestPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_Digest>>('CBLBlob_Digest');
  late final _CBLBlob_Digest =
      _CBLBlob_DigestPtr.asFunction<DartCBLBlob_Digest>();

  FLDict CBLBlob_Properties(
    ffi.Pointer<CBLBlob> arg0,
  ) {
    return _CBLBlob_Properties(
      arg0,
    );
  }

  late final _CBLBlob_PropertiesPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_Properties>>(
          'CBLBlob_Properties');
  late final _CBLBlob_Properties =
      _CBLBlob_PropertiesPtr.asFunction<DartCBLBlob_Properties>();

  FLStringResult CBLBlob_CreateJSON(
    ffi.Pointer<CBLBlob> blob,
  ) {
    return _CBLBlob_CreateJSON(
      blob,
    );
  }

  late final _CBLBlob_CreateJSONPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_CreateJSON>>(
          'CBLBlob_CreateJSON');
  late final _CBLBlob_CreateJSON =
      _CBLBlob_CreateJSONPtr.asFunction<DartCBLBlob_CreateJSON>();

  FLSliceResult CBLBlob_Content(
    ffi.Pointer<CBLBlob> blob,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLBlob_Content(
      blob,
      outError,
    );
  }

  late final _CBLBlob_ContentPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_Content>>('CBLBlob_Content');
  late final _CBLBlob_Content =
      _CBLBlob_ContentPtr.asFunction<DartCBLBlob_Content>();

  ffi.Pointer<CBLBlobReadStream> CBLBlob_OpenContentStream(
    ffi.Pointer<CBLBlob> blob,
    ffi.Pointer<CBLError> arg1,
  ) {
    return _CBLBlob_OpenContentStream(
      blob,
      arg1,
    );
  }

  late final _CBLBlob_OpenContentStreamPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_OpenContentStream>>(
          'CBLBlob_OpenContentStream');
  late final _CBLBlob_OpenContentStream =
      _CBLBlob_OpenContentStreamPtr.asFunction<DartCBLBlob_OpenContentStream>();

  int CBLBlobReader_Read(
    ffi.Pointer<CBLBlobReadStream> stream,
    ffi.Pointer<ffi.Void> dst,
    int maxLength,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLBlobReader_Read(
      stream,
      dst,
      maxLength,
      outError,
    );
  }

  late final _CBLBlobReader_ReadPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlobReader_Read>>(
          'CBLBlobReader_Read');
  late final _CBLBlobReader_Read =
      _CBLBlobReader_ReadPtr.asFunction<DartCBLBlobReader_Read>();

  int CBLBlobReader_Seek(
    ffi.Pointer<CBLBlobReadStream> stream,
    int offset,
    int base,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLBlobReader_Seek(
      stream,
      offset,
      base,
      outError,
    );
  }

  late final _CBLBlobReader_SeekPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlobReader_Seek>>(
          'CBLBlobReader_Seek');
  late final _CBLBlobReader_Seek =
      _CBLBlobReader_SeekPtr.asFunction<DartCBLBlobReader_Seek>();

  int CBLBlobReader_Position(
    ffi.Pointer<CBLBlobReadStream> stream,
  ) {
    return _CBLBlobReader_Position(
      stream,
    );
  }

  late final _CBLBlobReader_PositionPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlobReader_Position>>(
          'CBLBlobReader_Position');
  late final _CBLBlobReader_Position =
      _CBLBlobReader_PositionPtr.asFunction<DartCBLBlobReader_Position>();

  void CBLBlobReader_Close(
    ffi.Pointer<CBLBlobReadStream> arg0,
  ) {
    return _CBLBlobReader_Close(
      arg0,
    );
  }

  late final _CBLBlobReader_ClosePtr =
      _lookup<ffi.NativeFunction<NativeCBLBlobReader_Close>>(
          'CBLBlobReader_Close');
  late final _CBLBlobReader_Close =
      _CBLBlobReader_ClosePtr.asFunction<DartCBLBlobReader_Close>();

  bool CBLBlob_Equals(
    ffi.Pointer<CBLBlob> blob,
    ffi.Pointer<CBLBlob> anotherBlob,
  ) {
    return _CBLBlob_Equals(
      blob,
      anotherBlob,
    );
  }

  late final _CBLBlob_EqualsPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_Equals>>('CBLBlob_Equals');
  late final _CBLBlob_Equals =
      _CBLBlob_EqualsPtr.asFunction<DartCBLBlob_Equals>();

  ffi.Pointer<CBLBlob> CBLBlob_CreateWithData(
    FLString contentType,
    FLSlice contents,
  ) {
    return _CBLBlob_CreateWithData(
      contentType,
      contents,
    );
  }

  late final _CBLBlob_CreateWithDataPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_CreateWithData>>(
          'CBLBlob_CreateWithData');
  late final _CBLBlob_CreateWithData =
      _CBLBlob_CreateWithDataPtr.asFunction<DartCBLBlob_CreateWithData>();

  ffi.Pointer<CBLBlobWriteStream> CBLBlobWriter_Create(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLError> arg1,
  ) {
    return _CBLBlobWriter_Create(
      db,
      arg1,
    );
  }

  late final _CBLBlobWriter_CreatePtr =
      _lookup<ffi.NativeFunction<NativeCBLBlobWriter_Create>>(
          'CBLBlobWriter_Create');
  late final _CBLBlobWriter_Create =
      _CBLBlobWriter_CreatePtr.asFunction<DartCBLBlobWriter_Create>();

  void CBLBlobWriter_Close(
    ffi.Pointer<CBLBlobWriteStream> arg0,
  ) {
    return _CBLBlobWriter_Close(
      arg0,
    );
  }

  late final _CBLBlobWriter_ClosePtr =
      _lookup<ffi.NativeFunction<NativeCBLBlobWriter_Close>>(
          'CBLBlobWriter_Close');
  late final _CBLBlobWriter_Close =
      _CBLBlobWriter_ClosePtr.asFunction<DartCBLBlobWriter_Close>();

  bool CBLBlobWriter_Write(
    ffi.Pointer<CBLBlobWriteStream> writer,
    ffi.Pointer<ffi.Void> data,
    int length,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLBlobWriter_Write(
      writer,
      data,
      length,
      outError,
    );
  }

  late final _CBLBlobWriter_WritePtr =
      _lookup<ffi.NativeFunction<NativeCBLBlobWriter_Write>>(
          'CBLBlobWriter_Write');
  late final _CBLBlobWriter_Write =
      _CBLBlobWriter_WritePtr.asFunction<DartCBLBlobWriter_Write>();

  ffi.Pointer<CBLBlob> CBLBlob_CreateWithStream(
    FLString contentType,
    ffi.Pointer<CBLBlobWriteStream> writer,
  ) {
    return _CBLBlob_CreateWithStream(
      contentType,
      writer,
    );
  }

  late final _CBLBlob_CreateWithStreamPtr =
      _lookup<ffi.NativeFunction<NativeCBLBlob_CreateWithStream>>(
          'CBLBlob_CreateWithStream');
  late final _CBLBlob_CreateWithStream =
      _CBLBlob_CreateWithStreamPtr.asFunction<DartCBLBlob_CreateWithStream>();

  void FLSlot_SetBlob(
    FLSlot slot,
    ffi.Pointer<CBLBlob> blob,
  ) {
    return _FLSlot_SetBlob(
      slot,
      blob,
    );
  }

  late final _FLSlot_SetBlobPtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetBlob>>('FLSlot_SetBlob');
  late final _FLSlot_SetBlob =
      _FLSlot_SetBlobPtr.asFunction<DartFLSlot_SetBlob>();

  ffi.Pointer<CBLBlob> CBLDatabase_GetBlob(
    ffi.Pointer<CBLDatabase> db,
    FLDict properties,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_GetBlob(
      db,
      properties,
      outError,
    );
  }

  late final _CBLDatabase_GetBlobPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_GetBlob>>(
          'CBLDatabase_GetBlob');
  late final _CBLDatabase_GetBlob =
      _CBLDatabase_GetBlobPtr.asFunction<DartCBLDatabase_GetBlob>();

  bool CBLDatabase_SaveBlob(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLBlob> blob,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_SaveBlob(
      db,
      blob,
      outError,
    );
  }

  late final _CBLDatabase_SaveBlobPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_SaveBlob>>(
          'CBLDatabase_SaveBlob');
  late final _CBLDatabase_SaveBlob =
      _CBLDatabase_SaveBlobPtr.asFunction<DartCBLDatabase_SaveBlob>();

  late final ffi.Pointer<FLSlice> _kCBLTypeProperty =
      _lookup<FLSlice>('kCBLTypeProperty');

  FLSlice get kCBLTypeProperty => _kCBLTypeProperty.ref;

  ffi.Pointer<CBLDocument> CBLDatabase_GetDocument(
    ffi.Pointer<CBLDatabase> database,
    FLString docID,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_GetDocument(
      database,
      docID,
      outError,
    );
  }

  late final _CBLDatabase_GetDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_GetDocument>>(
          'CBLDatabase_GetDocument');
  late final _CBLDatabase_GetDocument =
      _CBLDatabase_GetDocumentPtr.asFunction<DartCBLDatabase_GetDocument>();

  bool CBLDatabase_SaveDocument(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_SaveDocument(
      db,
      doc,
      outError,
    );
  }

  late final _CBLDatabase_SaveDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_SaveDocument>>(
          'CBLDatabase_SaveDocument');
  late final _CBLDatabase_SaveDocument =
      _CBLDatabase_SaveDocumentPtr.asFunction<DartCBLDatabase_SaveDocument>();

  bool CBLDatabase_SaveDocumentWithConcurrencyControl(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    int concurrency,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_SaveDocumentWithConcurrencyControl(
      db,
      doc,
      concurrency,
      outError,
    );
  }

  late final _CBLDatabase_SaveDocumentWithConcurrencyControlPtr = _lookup<
          ffi.NativeFunction<
              NativeCBLDatabase_SaveDocumentWithConcurrencyControl>>(
      'CBLDatabase_SaveDocumentWithConcurrencyControl');
  late final _CBLDatabase_SaveDocumentWithConcurrencyControl =
      _CBLDatabase_SaveDocumentWithConcurrencyControlPtr.asFunction<
          DartCBLDatabase_SaveDocumentWithConcurrencyControl>();

  bool CBLDatabase_SaveDocumentWithConflictHandler(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_SaveDocumentWithConflictHandler(
      db,
      doc,
      conflictHandler,
      context,
      outError,
    );
  }

  late final _CBLDatabase_SaveDocumentWithConflictHandlerPtr = _lookup<
          ffi
          .NativeFunction<NativeCBLDatabase_SaveDocumentWithConflictHandler>>(
      'CBLDatabase_SaveDocumentWithConflictHandler');
  late final _CBLDatabase_SaveDocumentWithConflictHandler =
      _CBLDatabase_SaveDocumentWithConflictHandlerPtr.asFunction<
          DartCBLDatabase_SaveDocumentWithConflictHandler>();

  bool CBLDatabase_DeleteDocument(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_DeleteDocument(
      db,
      document,
      outError,
    );
  }

  late final _CBLDatabase_DeleteDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_DeleteDocument>>(
          'CBLDatabase_DeleteDocument');
  late final _CBLDatabase_DeleteDocument = _CBLDatabase_DeleteDocumentPtr
      .asFunction<DartCBLDatabase_DeleteDocument>();

  bool CBLDatabase_DeleteDocumentWithConcurrencyControl(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    int concurrency,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_DeleteDocumentWithConcurrencyControl(
      db,
      document,
      concurrency,
      outError,
    );
  }

  late final _CBLDatabase_DeleteDocumentWithConcurrencyControlPtr = _lookup<
          ffi.NativeFunction<
              NativeCBLDatabase_DeleteDocumentWithConcurrencyControl>>(
      'CBLDatabase_DeleteDocumentWithConcurrencyControl');
  late final _CBLDatabase_DeleteDocumentWithConcurrencyControl =
      _CBLDatabase_DeleteDocumentWithConcurrencyControlPtr.asFunction<
          DartCBLDatabase_DeleteDocumentWithConcurrencyControl>();

  bool CBLDatabase_PurgeDocument(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_PurgeDocument(
      db,
      document,
      outError,
    );
  }

  late final _CBLDatabase_PurgeDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_PurgeDocument>>(
          'CBLDatabase_PurgeDocument');
  late final _CBLDatabase_PurgeDocument =
      _CBLDatabase_PurgeDocumentPtr.asFunction<DartCBLDatabase_PurgeDocument>();

  bool CBLDatabase_PurgeDocumentByID(
    ffi.Pointer<CBLDatabase> database,
    FLString docID,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_PurgeDocumentByID(
      database,
      docID,
      outError,
    );
  }

  late final _CBLDatabase_PurgeDocumentByIDPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_PurgeDocumentByID>>(
          'CBLDatabase_PurgeDocumentByID');
  late final _CBLDatabase_PurgeDocumentByID = _CBLDatabase_PurgeDocumentByIDPtr
      .asFunction<DartCBLDatabase_PurgeDocumentByID>();

  ffi.Pointer<CBLDocument> CBLDatabase_GetMutableDocument(
    ffi.Pointer<CBLDatabase> database,
    FLString docID,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_GetMutableDocument(
      database,
      docID,
      outError,
    );
  }

  late final _CBLDatabase_GetMutableDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_GetMutableDocument>>(
          'CBLDatabase_GetMutableDocument');
  late final _CBLDatabase_GetMutableDocument =
      _CBLDatabase_GetMutableDocumentPtr.asFunction<
          DartCBLDatabase_GetMutableDocument>();

  ffi.Pointer<CBLDocument> CBLDocument_Create() {
    return _CBLDocument_Create();
  }

  late final _CBLDocument_CreatePtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_Create>>(
          'CBLDocument_Create');
  late final _CBLDocument_Create =
      _CBLDocument_CreatePtr.asFunction<DartCBLDocument_Create>();

  ffi.Pointer<CBLDocument> CBLDocument_CreateWithID(
    FLString docID,
  ) {
    return _CBLDocument_CreateWithID(
      docID,
    );
  }

  late final _CBLDocument_CreateWithIDPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_CreateWithID>>(
          'CBLDocument_CreateWithID');
  late final _CBLDocument_CreateWithID =
      _CBLDocument_CreateWithIDPtr.asFunction<DartCBLDocument_CreateWithID>();

  ffi.Pointer<CBLDocument> CBLDocument_MutableCopy(
    ffi.Pointer<CBLDocument> original,
  ) {
    return _CBLDocument_MutableCopy(
      original,
    );
  }

  late final _CBLDocument_MutableCopyPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_MutableCopy>>(
          'CBLDocument_MutableCopy');
  late final _CBLDocument_MutableCopy =
      _CBLDocument_MutableCopyPtr.asFunction<DartCBLDocument_MutableCopy>();

  FLString CBLDocument_ID(
    ffi.Pointer<CBLDocument> arg0,
  ) {
    return _CBLDocument_ID(
      arg0,
    );
  }

  late final _CBLDocument_IDPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_ID>>('CBLDocument_ID');
  late final _CBLDocument_ID =
      _CBLDocument_IDPtr.asFunction<DartCBLDocument_ID>();

  FLString CBLDocument_RevisionID(
    ffi.Pointer<CBLDocument> arg0,
  ) {
    return _CBLDocument_RevisionID(
      arg0,
    );
  }

  late final _CBLDocument_RevisionIDPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_RevisionID>>(
          'CBLDocument_RevisionID');
  late final _CBLDocument_RevisionID =
      _CBLDocument_RevisionIDPtr.asFunction<DartCBLDocument_RevisionID>();

  int CBLDocument_Sequence(
    ffi.Pointer<CBLDocument> arg0,
  ) {
    return _CBLDocument_Sequence(
      arg0,
    );
  }

  late final _CBLDocument_SequencePtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_Sequence>>(
          'CBLDocument_Sequence');
  late final _CBLDocument_Sequence =
      _CBLDocument_SequencePtr.asFunction<DartCBLDocument_Sequence>();

  ffi.Pointer<CBLCollection> CBLDocument_Collection(
    ffi.Pointer<CBLDocument> arg0,
  ) {
    return _CBLDocument_Collection(
      arg0,
    );
  }

  late final _CBLDocument_CollectionPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_Collection>>(
          'CBLDocument_Collection');
  late final _CBLDocument_Collection =
      _CBLDocument_CollectionPtr.asFunction<DartCBLDocument_Collection>();

  FLDict CBLDocument_Properties(
    ffi.Pointer<CBLDocument> arg0,
  ) {
    return _CBLDocument_Properties(
      arg0,
    );
  }

  late final _CBLDocument_PropertiesPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_Properties>>(
          'CBLDocument_Properties');
  late final _CBLDocument_Properties =
      _CBLDocument_PropertiesPtr.asFunction<DartCBLDocument_Properties>();

  FLMutableDict CBLDocument_MutableProperties(
    ffi.Pointer<CBLDocument> arg0,
  ) {
    return _CBLDocument_MutableProperties(
      arg0,
    );
  }

  late final _CBLDocument_MutablePropertiesPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_MutableProperties>>(
          'CBLDocument_MutableProperties');
  late final _CBLDocument_MutableProperties = _CBLDocument_MutablePropertiesPtr
      .asFunction<DartCBLDocument_MutableProperties>();

  void CBLDocument_SetProperties(
    ffi.Pointer<CBLDocument> arg0,
    FLMutableDict properties,
  ) {
    return _CBLDocument_SetProperties(
      arg0,
      properties,
    );
  }

  late final _CBLDocument_SetPropertiesPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_SetProperties>>(
          'CBLDocument_SetProperties');
  late final _CBLDocument_SetProperties =
      _CBLDocument_SetPropertiesPtr.asFunction<DartCBLDocument_SetProperties>();

  FLSliceResult CBLDocument_CreateJSON(
    ffi.Pointer<CBLDocument> arg0,
  ) {
    return _CBLDocument_CreateJSON(
      arg0,
    );
  }

  late final _CBLDocument_CreateJSONPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_CreateJSON>>(
          'CBLDocument_CreateJSON');
  late final _CBLDocument_CreateJSON =
      _CBLDocument_CreateJSONPtr.asFunction<DartCBLDocument_CreateJSON>();

  bool CBLDocument_SetJSON(
    ffi.Pointer<CBLDocument> arg0,
    FLSlice json,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDocument_SetJSON(
      arg0,
      json,
      outError,
    );
  }

  late final _CBLDocument_SetJSONPtr =
      _lookup<ffi.NativeFunction<NativeCBLDocument_SetJSON>>(
          'CBLDocument_SetJSON');
  late final _CBLDocument_SetJSON =
      _CBLDocument_SetJSONPtr.asFunction<DartCBLDocument_SetJSON>();

  int CBLDatabase_GetDocumentExpiration(
    ffi.Pointer<CBLDatabase> db,
    FLSlice docID,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_GetDocumentExpiration(
      db,
      docID,
      outError,
    );
  }

  late final _CBLDatabase_GetDocumentExpirationPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_GetDocumentExpiration>>(
          'CBLDatabase_GetDocumentExpiration');
  late final _CBLDatabase_GetDocumentExpiration =
      _CBLDatabase_GetDocumentExpirationPtr.asFunction<
          DartCBLDatabase_GetDocumentExpiration>();

  bool CBLDatabase_SetDocumentExpiration(
    ffi.Pointer<CBLDatabase> db,
    FLSlice docID,
    int expiration,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_SetDocumentExpiration(
      db,
      docID,
      expiration,
      outError,
    );
  }

  late final _CBLDatabase_SetDocumentExpirationPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_SetDocumentExpiration>>(
          'CBLDatabase_SetDocumentExpiration');
  late final _CBLDatabase_SetDocumentExpiration =
      _CBLDatabase_SetDocumentExpirationPtr.asFunction<
          DartCBLDatabase_SetDocumentExpiration>();

  ffi.Pointer<CBLListenerToken> CBLDatabase_AddDocumentChangeListener(
    ffi.Pointer<CBLDatabase> db,
    FLString docID,
    CBLDocumentChangeListener listener,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CBLDatabase_AddDocumentChangeListener(
      db,
      docID,
      listener,
      context,
    );
  }

  late final _CBLDatabase_AddDocumentChangeListenerPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_AddDocumentChangeListener>>(
          'CBLDatabase_AddDocumentChangeListener');
  late final _CBLDatabase_AddDocumentChangeListener =
      _CBLDatabase_AddDocumentChangeListenerPtr.asFunction<
          DartCBLDatabase_AddDocumentChangeListener>();

  ffi.Pointer<CBLVectorEncoding> CBLVectorEncoding_CreateNone() {
    return _CBLVectorEncoding_CreateNone();
  }

  late final _CBLVectorEncoding_CreateNonePtr =
      _lookup<ffi.NativeFunction<NativeCBLVectorEncoding_CreateNone>>(
          'CBLVectorEncoding_CreateNone');
  late final _CBLVectorEncoding_CreateNone = _CBLVectorEncoding_CreateNonePtr
      .asFunction<DartCBLVectorEncoding_CreateNone>();

  ffi.Pointer<CBLVectorEncoding> CBLVectorEncoding_CreateScalarQuantizer(
    int type,
  ) {
    return _CBLVectorEncoding_CreateScalarQuantizer(
      type,
    );
  }

  late final _CBLVectorEncoding_CreateScalarQuantizerPtr = _lookup<
          ffi.NativeFunction<NativeCBLVectorEncoding_CreateScalarQuantizer>>(
      'CBLVectorEncoding_CreateScalarQuantizer');
  late final _CBLVectorEncoding_CreateScalarQuantizer =
      _CBLVectorEncoding_CreateScalarQuantizerPtr.asFunction<
          DartCBLVectorEncoding_CreateScalarQuantizer>();

  ffi.Pointer<CBLVectorEncoding> CBLVectorEncoding_CreateProductQuantizer(
    int subquantizers,
    int bits,
  ) {
    return _CBLVectorEncoding_CreateProductQuantizer(
      subquantizers,
      bits,
    );
  }

  late final _CBLVectorEncoding_CreateProductQuantizerPtr = _lookup<
          ffi.NativeFunction<NativeCBLVectorEncoding_CreateProductQuantizer>>(
      'CBLVectorEncoding_CreateProductQuantizer');
  late final _CBLVectorEncoding_CreateProductQuantizer =
      _CBLVectorEncoding_CreateProductQuantizerPtr.asFunction<
          DartCBLVectorEncoding_CreateProductQuantizer>();

  void CBLVectorEncoding_Free(
    ffi.Pointer<CBLVectorEncoding> arg0,
  ) {
    return _CBLVectorEncoding_Free(
      arg0,
    );
  }

  late final _CBLVectorEncoding_FreePtr =
      _lookup<ffi.NativeFunction<NativeCBLVectorEncoding_Free>>(
          'CBLVectorEncoding_Free');
  late final _CBLVectorEncoding_Free =
      _CBLVectorEncoding_FreePtr.asFunction<DartCBLVectorEncoding_Free>();

  late final ffi.Pointer<FLString> _kCBLDefaultCollectionName =
      _lookup<FLString>('kCBLDefaultCollectionName');

  FLString get kCBLDefaultCollectionName => _kCBLDefaultCollectionName.ref;

  FLMutableArray CBLDatabase_ScopeNames(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_ScopeNames(
      db,
      outError,
    );
  }

  late final _CBLDatabase_ScopeNamesPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_ScopeNames>>(
          'CBLDatabase_ScopeNames');
  late final _CBLDatabase_ScopeNames =
      _CBLDatabase_ScopeNamesPtr.asFunction<DartCBLDatabase_ScopeNames>();

  FLMutableArray CBLDatabase_CollectionNames(
    ffi.Pointer<CBLDatabase> db,
    FLString scopeName,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_CollectionNames(
      db,
      scopeName,
      outError,
    );
  }

  late final _CBLDatabase_CollectionNamesPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_CollectionNames>>(
          'CBLDatabase_CollectionNames');
  late final _CBLDatabase_CollectionNames = _CBLDatabase_CollectionNamesPtr
      .asFunction<DartCBLDatabase_CollectionNames>();

  ffi.Pointer<CBLScope> CBLDatabase_Scope(
    ffi.Pointer<CBLDatabase> db,
    FLString scopeName,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_Scope(
      db,
      scopeName,
      outError,
    );
  }

  late final _CBLDatabase_ScopePtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_Scope>>('CBLDatabase_Scope');
  late final _CBLDatabase_Scope =
      _CBLDatabase_ScopePtr.asFunction<DartCBLDatabase_Scope>();

  ffi.Pointer<CBLCollection> CBLDatabase_Collection(
    ffi.Pointer<CBLDatabase> db,
    FLString collectionName,
    FLString scopeName,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_Collection(
      db,
      collectionName,
      scopeName,
      outError,
    );
  }

  late final _CBLDatabase_CollectionPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_Collection>>(
          'CBLDatabase_Collection');
  late final _CBLDatabase_Collection =
      _CBLDatabase_CollectionPtr.asFunction<DartCBLDatabase_Collection>();

  ffi.Pointer<CBLCollection> CBLDatabase_CreateCollection(
    ffi.Pointer<CBLDatabase> db,
    FLString collectionName,
    FLString scopeName,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_CreateCollection(
      db,
      collectionName,
      scopeName,
      outError,
    );
  }

  late final _CBLDatabase_CreateCollectionPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_CreateCollection>>(
          'CBLDatabase_CreateCollection');
  late final _CBLDatabase_CreateCollection = _CBLDatabase_CreateCollectionPtr
      .asFunction<DartCBLDatabase_CreateCollection>();

  bool CBLDatabase_DeleteCollection(
    ffi.Pointer<CBLDatabase> db,
    FLString collectionName,
    FLString scopeName,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_DeleteCollection(
      db,
      collectionName,
      scopeName,
      outError,
    );
  }

  late final _CBLDatabase_DeleteCollectionPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_DeleteCollection>>(
          'CBLDatabase_DeleteCollection');
  late final _CBLDatabase_DeleteCollection = _CBLDatabase_DeleteCollectionPtr
      .asFunction<DartCBLDatabase_DeleteCollection>();

  ffi.Pointer<CBLScope> CBLDatabase_DefaultScope(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_DefaultScope(
      db,
      outError,
    );
  }

  late final _CBLDatabase_DefaultScopePtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_DefaultScope>>(
          'CBLDatabase_DefaultScope');
  late final _CBLDatabase_DefaultScope =
      _CBLDatabase_DefaultScopePtr.asFunction<DartCBLDatabase_DefaultScope>();

  ffi.Pointer<CBLCollection> CBLDatabase_DefaultCollection(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_DefaultCollection(
      db,
      outError,
    );
  }

  late final _CBLDatabase_DefaultCollectionPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_DefaultCollection>>(
          'CBLDatabase_DefaultCollection');
  late final _CBLDatabase_DefaultCollection = _CBLDatabase_DefaultCollectionPtr
      .asFunction<DartCBLDatabase_DefaultCollection>();

  ffi.Pointer<CBLScope> CBLCollection_Scope(
    ffi.Pointer<CBLCollection> collection,
  ) {
    return _CBLCollection_Scope(
      collection,
    );
  }

  late final _CBLCollection_ScopePtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_Scope>>(
          'CBLCollection_Scope');
  late final _CBLCollection_Scope =
      _CBLCollection_ScopePtr.asFunction<DartCBLCollection_Scope>();

  FLString CBLCollection_Name(
    ffi.Pointer<CBLCollection> collection,
  ) {
    return _CBLCollection_Name(
      collection,
    );
  }

  late final _CBLCollection_NamePtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_Name>>(
          'CBLCollection_Name');
  late final _CBLCollection_Name =
      _CBLCollection_NamePtr.asFunction<DartCBLCollection_Name>();

  FLString CBLCollection_FullName(
    ffi.Pointer<CBLCollection> collection,
  ) {
    return _CBLCollection_FullName(
      collection,
    );
  }

  late final _CBLCollection_FullNamePtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_FullName>>(
          'CBLCollection_FullName');
  late final _CBLCollection_FullName =
      _CBLCollection_FullNamePtr.asFunction<DartCBLCollection_FullName>();

  ffi.Pointer<CBLDatabase> CBLCollection_Database(
    ffi.Pointer<CBLCollection> collection,
  ) {
    return _CBLCollection_Database(
      collection,
    );
  }

  late final _CBLCollection_DatabasePtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_Database>>(
          'CBLCollection_Database');
  late final _CBLCollection_Database =
      _CBLCollection_DatabasePtr.asFunction<DartCBLCollection_Database>();

  int CBLCollection_Count(
    ffi.Pointer<CBLCollection> collection,
  ) {
    return _CBLCollection_Count(
      collection,
    );
  }

  late final _CBLCollection_CountPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_Count>>(
          'CBLCollection_Count');
  late final _CBLCollection_Count =
      _CBLCollection_CountPtr.asFunction<DartCBLCollection_Count>();

  ffi.Pointer<CBLDocument> CBLCollection_GetDocument(
    ffi.Pointer<CBLCollection> collection,
    FLString docID,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_GetDocument(
      collection,
      docID,
      outError,
    );
  }

  late final _CBLCollection_GetDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_GetDocument>>(
          'CBLCollection_GetDocument');
  late final _CBLCollection_GetDocument =
      _CBLCollection_GetDocumentPtr.asFunction<DartCBLCollection_GetDocument>();

  bool CBLCollection_SaveDocument(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_SaveDocument(
      collection,
      doc,
      outError,
    );
  }

  late final _CBLCollection_SaveDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_SaveDocument>>(
          'CBLCollection_SaveDocument');
  late final _CBLCollection_SaveDocument = _CBLCollection_SaveDocumentPtr
      .asFunction<DartCBLCollection_SaveDocument>();

  bool CBLCollection_SaveDocumentWithConcurrencyControl(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    int concurrency,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_SaveDocumentWithConcurrencyControl(
      collection,
      doc,
      concurrency,
      outError,
    );
  }

  late final _CBLCollection_SaveDocumentWithConcurrencyControlPtr = _lookup<
          ffi.NativeFunction<
              NativeCBLCollection_SaveDocumentWithConcurrencyControl>>(
      'CBLCollection_SaveDocumentWithConcurrencyControl');
  late final _CBLCollection_SaveDocumentWithConcurrencyControl =
      _CBLCollection_SaveDocumentWithConcurrencyControlPtr.asFunction<
          DartCBLCollection_SaveDocumentWithConcurrencyControl>();

  bool CBLCollection_SaveDocumentWithConflictHandler(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_SaveDocumentWithConflictHandler(
      collection,
      doc,
      conflictHandler,
      context,
      outError,
    );
  }

  late final _CBLCollection_SaveDocumentWithConflictHandlerPtr = _lookup<
          ffi
          .NativeFunction<NativeCBLCollection_SaveDocumentWithConflictHandler>>(
      'CBLCollection_SaveDocumentWithConflictHandler');
  late final _CBLCollection_SaveDocumentWithConflictHandler =
      _CBLCollection_SaveDocumentWithConflictHandlerPtr.asFunction<
          DartCBLCollection_SaveDocumentWithConflictHandler>();

  bool CBLCollection_DeleteDocument(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_DeleteDocument(
      collection,
      document,
      outError,
    );
  }

  late final _CBLCollection_DeleteDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_DeleteDocument>>(
          'CBLCollection_DeleteDocument');
  late final _CBLCollection_DeleteDocument = _CBLCollection_DeleteDocumentPtr
      .asFunction<DartCBLCollection_DeleteDocument>();

  bool CBLCollection_DeleteDocumentWithConcurrencyControl(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    int concurrency,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_DeleteDocumentWithConcurrencyControl(
      collection,
      document,
      concurrency,
      outError,
    );
  }

  late final _CBLCollection_DeleteDocumentWithConcurrencyControlPtr = _lookup<
          ffi.NativeFunction<
              NativeCBLCollection_DeleteDocumentWithConcurrencyControl>>(
      'CBLCollection_DeleteDocumentWithConcurrencyControl');
  late final _CBLCollection_DeleteDocumentWithConcurrencyControl =
      _CBLCollection_DeleteDocumentWithConcurrencyControlPtr.asFunction<
          DartCBLCollection_DeleteDocumentWithConcurrencyControl>();

  bool CBLCollection_PurgeDocument(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_PurgeDocument(
      collection,
      document,
      outError,
    );
  }

  late final _CBLCollection_PurgeDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_PurgeDocument>>(
          'CBLCollection_PurgeDocument');
  late final _CBLCollection_PurgeDocument = _CBLCollection_PurgeDocumentPtr
      .asFunction<DartCBLCollection_PurgeDocument>();

  bool CBLCollection_PurgeDocumentByID(
    ffi.Pointer<CBLCollection> collection,
    FLString docID,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_PurgeDocumentByID(
      collection,
      docID,
      outError,
    );
  }

  late final _CBLCollection_PurgeDocumentByIDPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_PurgeDocumentByID>>(
          'CBLCollection_PurgeDocumentByID');
  late final _CBLCollection_PurgeDocumentByID =
      _CBLCollection_PurgeDocumentByIDPtr.asFunction<
          DartCBLCollection_PurgeDocumentByID>();

  int CBLCollection_GetDocumentExpiration(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_GetDocumentExpiration(
      collection,
      docID,
      outError,
    );
  }

  late final _CBLCollection_GetDocumentExpirationPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_GetDocumentExpiration>>(
          'CBLCollection_GetDocumentExpiration');
  late final _CBLCollection_GetDocumentExpiration =
      _CBLCollection_GetDocumentExpirationPtr.asFunction<
          DartCBLCollection_GetDocumentExpiration>();

  bool CBLCollection_SetDocumentExpiration(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    int expiration,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_SetDocumentExpiration(
      collection,
      docID,
      expiration,
      outError,
    );
  }

  late final _CBLCollection_SetDocumentExpirationPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_SetDocumentExpiration>>(
          'CBLCollection_SetDocumentExpiration');
  late final _CBLCollection_SetDocumentExpiration =
      _CBLCollection_SetDocumentExpirationPtr.asFunction<
          DartCBLCollection_SetDocumentExpiration>();

  ffi.Pointer<CBLDocument> CBLCollection_GetMutableDocument(
    ffi.Pointer<CBLCollection> collection,
    FLString docID,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_GetMutableDocument(
      collection,
      docID,
      outError,
    );
  }

  late final _CBLCollection_GetMutableDocumentPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_GetMutableDocument>>(
          'CBLCollection_GetMutableDocument');
  late final _CBLCollection_GetMutableDocument =
      _CBLCollection_GetMutableDocumentPtr.asFunction<
          DartCBLCollection_GetMutableDocument>();

  bool CBLCollection_CreateValueIndex(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_CreateValueIndex(
      collection,
      name,
      config,
      outError,
    );
  }

  late final _CBLCollection_CreateValueIndexPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_CreateValueIndex>>(
          'CBLCollection_CreateValueIndex');
  late final _CBLCollection_CreateValueIndex =
      _CBLCollection_CreateValueIndexPtr.asFunction<
          DartCBLCollection_CreateValueIndex>();

  bool CBLCollection_CreateFullTextIndex(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_CreateFullTextIndex(
      collection,
      name,
      config,
      outError,
    );
  }

  late final _CBLCollection_CreateFullTextIndexPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_CreateFullTextIndex>>(
          'CBLCollection_CreateFullTextIndex');
  late final _CBLCollection_CreateFullTextIndex =
      _CBLCollection_CreateFullTextIndexPtr.asFunction<
          DartCBLCollection_CreateFullTextIndex>();

  bool CBLCollection_CreateVectorIndex(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    CBLVectorIndexConfiguration config,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_CreateVectorIndex(
      collection,
      name,
      config,
      outError,
    );
  }

  late final _CBLCollection_CreateVectorIndexPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_CreateVectorIndex>>(
          'CBLCollection_CreateVectorIndex');
  late final _CBLCollection_CreateVectorIndex =
      _CBLCollection_CreateVectorIndexPtr.asFunction<
          DartCBLCollection_CreateVectorIndex>();

  bool CBLCollection_DeleteIndex(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_DeleteIndex(
      collection,
      name,
      outError,
    );
  }

  late final _CBLCollection_DeleteIndexPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_DeleteIndex>>(
          'CBLCollection_DeleteIndex');
  late final _CBLCollection_DeleteIndex =
      _CBLCollection_DeleteIndexPtr.asFunction<DartCBLCollection_DeleteIndex>();

  FLMutableArray CBLCollection_GetIndexNames(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_GetIndexNames(
      collection,
      outError,
    );
  }

  late final _CBLCollection_GetIndexNamesPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_GetIndexNames>>(
          'CBLCollection_GetIndexNames');
  late final _CBLCollection_GetIndexNames = _CBLCollection_GetIndexNamesPtr
      .asFunction<DartCBLCollection_GetIndexNames>();

  ffi.Pointer<CBLQueryIndex> CBLCollection_GetIndex(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLCollection_GetIndex(
      collection,
      name,
      outError,
    );
  }

  late final _CBLCollection_GetIndexPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_GetIndex>>(
          'CBLCollection_GetIndex');
  late final _CBLCollection_GetIndex =
      _CBLCollection_GetIndexPtr.asFunction<DartCBLCollection_GetIndex>();

  ffi.Pointer<CBLListenerToken> CBLCollection_AddChangeListener(
    ffi.Pointer<CBLCollection> collection,
    CBLCollectionChangeListener listener,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CBLCollection_AddChangeListener(
      collection,
      listener,
      context,
    );
  }

  late final _CBLCollection_AddChangeListenerPtr =
      _lookup<ffi.NativeFunction<NativeCBLCollection_AddChangeListener>>(
          'CBLCollection_AddChangeListener');
  late final _CBLCollection_AddChangeListener =
      _CBLCollection_AddChangeListenerPtr.asFunction<
          DartCBLCollection_AddChangeListener>();

  ffi.Pointer<CBLListenerToken> CBLCollection_AddDocumentChangeListener(
    ffi.Pointer<CBLCollection> collection,
    FLString docID,
    CBLCollectionDocumentChangeListener listener,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CBLCollection_AddDocumentChangeListener(
      collection,
      docID,
      listener,
      context,
    );
  }

  late final _CBLCollection_AddDocumentChangeListenerPtr = _lookup<
          ffi.NativeFunction<NativeCBLCollection_AddDocumentChangeListener>>(
      'CBLCollection_AddDocumentChangeListener');
  late final _CBLCollection_AddDocumentChangeListener =
      _CBLCollection_AddDocumentChangeListenerPtr.asFunction<
          DartCBLCollection_AddDocumentChangeListener>();

  bool CBL_EnableVectorSearch(
    FLString path,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBL_EnableVectorSearch(
      path,
      outError,
    );
  }

  late final _CBL_EnableVectorSearchPtr =
      _lookup<ffi.NativeFunction<NativeCBL_EnableVectorSearch>>(
          'CBL_EnableVectorSearch');
  late final _CBL_EnableVectorSearch =
      _CBL_EnableVectorSearchPtr.asFunction<DartCBL_EnableVectorSearch>();

  CBLDatabaseConfiguration CBLDatabaseConfiguration_Default() {
    return _CBLDatabaseConfiguration_Default();
  }

  late final _CBLDatabaseConfiguration_DefaultPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabaseConfiguration_Default>>(
          'CBLDatabaseConfiguration_Default');
  late final _CBLDatabaseConfiguration_Default =
      _CBLDatabaseConfiguration_DefaultPtr.asFunction<
          DartCBLDatabaseConfiguration_Default>();

  bool CBLEncryptionKey_FromPassword(
    ffi.Pointer<CBLEncryptionKey> key,
    FLString password,
  ) {
    return _CBLEncryptionKey_FromPassword(
      key,
      password,
    );
  }

  late final _CBLEncryptionKey_FromPasswordPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptionKey_FromPassword>>(
          'CBLEncryptionKey_FromPassword');
  late final _CBLEncryptionKey_FromPassword = _CBLEncryptionKey_FromPasswordPtr
      .asFunction<DartCBLEncryptionKey_FromPassword>();

  bool CBLEncryptionKey_FromPasswordOld(
    ffi.Pointer<CBLEncryptionKey> key,
    FLString password,
  ) {
    return _CBLEncryptionKey_FromPasswordOld(
      key,
      password,
    );
  }

  late final _CBLEncryptionKey_FromPasswordOldPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptionKey_FromPasswordOld>>(
          'CBLEncryptionKey_FromPasswordOld');
  late final _CBLEncryptionKey_FromPasswordOld =
      _CBLEncryptionKey_FromPasswordOldPtr.asFunction<
          DartCBLEncryptionKey_FromPasswordOld>();

  bool CBL_DatabaseExists(
    FLString name,
    FLString inDirectory,
  ) {
    return _CBL_DatabaseExists(
      name,
      inDirectory,
    );
  }

  late final _CBL_DatabaseExistsPtr =
      _lookup<ffi.NativeFunction<NativeCBL_DatabaseExists>>(
          'CBL_DatabaseExists');
  late final _CBL_DatabaseExists =
      _CBL_DatabaseExistsPtr.asFunction<DartCBL_DatabaseExists>();

  bool CBL_CopyDatabase(
    FLString fromPath,
    FLString toName,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBL_CopyDatabase(
      fromPath,
      toName,
      config,
      outError,
    );
  }

  late final _CBL_CopyDatabasePtr =
      _lookup<ffi.NativeFunction<NativeCBL_CopyDatabase>>('CBL_CopyDatabase');
  late final _CBL_CopyDatabase =
      _CBL_CopyDatabasePtr.asFunction<DartCBL_CopyDatabase>();

  bool CBL_DeleteDatabase(
    FLString name,
    FLString inDirectory,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBL_DeleteDatabase(
      name,
      inDirectory,
      outError,
    );
  }

  late final _CBL_DeleteDatabasePtr =
      _lookup<ffi.NativeFunction<NativeCBL_DeleteDatabase>>(
          'CBL_DeleteDatabase');
  late final _CBL_DeleteDatabase =
      _CBL_DeleteDatabasePtr.asFunction<DartCBL_DeleteDatabase>();

  ffi.Pointer<CBLDatabase> CBLDatabase_Open(
    FLSlice name,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_Open(
      name,
      config,
      outError,
    );
  }

  late final _CBLDatabase_OpenPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_Open>>('CBLDatabase_Open');
  late final _CBLDatabase_Open =
      _CBLDatabase_OpenPtr.asFunction<DartCBLDatabase_Open>();

  bool CBLDatabase_Close(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_Close(
      arg0,
      outError,
    );
  }

  late final _CBLDatabase_ClosePtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_Close>>('CBLDatabase_Close');
  late final _CBLDatabase_Close =
      _CBLDatabase_ClosePtr.asFunction<DartCBLDatabase_Close>();

  bool CBLDatabase_Delete(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_Delete(
      arg0,
      outError,
    );
  }

  late final _CBLDatabase_DeletePtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_Delete>>(
          'CBLDatabase_Delete');
  late final _CBLDatabase_Delete =
      _CBLDatabase_DeletePtr.asFunction<DartCBLDatabase_Delete>();

  bool CBLDatabase_BeginTransaction(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_BeginTransaction(
      arg0,
      outError,
    );
  }

  late final _CBLDatabase_BeginTransactionPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_BeginTransaction>>(
          'CBLDatabase_BeginTransaction');
  late final _CBLDatabase_BeginTransaction = _CBLDatabase_BeginTransactionPtr
      .asFunction<DartCBLDatabase_BeginTransaction>();

  bool CBLDatabase_EndTransaction(
    ffi.Pointer<CBLDatabase> arg0,
    bool commit,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_EndTransaction(
      arg0,
      commit,
      outError,
    );
  }

  late final _CBLDatabase_EndTransactionPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_EndTransaction>>(
          'CBLDatabase_EndTransaction');
  late final _CBLDatabase_EndTransaction = _CBLDatabase_EndTransactionPtr
      .asFunction<DartCBLDatabase_EndTransaction>();

  bool CBLDatabase_ChangeEncryptionKey(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Pointer<CBLEncryptionKey> newKey,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_ChangeEncryptionKey(
      arg0,
      newKey,
      outError,
    );
  }

  late final _CBLDatabase_ChangeEncryptionKeyPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_ChangeEncryptionKey>>(
          'CBLDatabase_ChangeEncryptionKey');
  late final _CBLDatabase_ChangeEncryptionKey =
      _CBLDatabase_ChangeEncryptionKeyPtr.asFunction<
          DartCBLDatabase_ChangeEncryptionKey>();

  bool CBLDatabase_PerformMaintenance(
    ffi.Pointer<CBLDatabase> db,
    int type,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_PerformMaintenance(
      db,
      type,
      outError,
    );
  }

  late final _CBLDatabase_PerformMaintenancePtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_PerformMaintenance>>(
          'CBLDatabase_PerformMaintenance');
  late final _CBLDatabase_PerformMaintenance =
      _CBLDatabase_PerformMaintenancePtr.asFunction<
          DartCBLDatabase_PerformMaintenance>();

  FLString CBLDatabase_Name(
    ffi.Pointer<CBLDatabase> arg0,
  ) {
    return _CBLDatabase_Name(
      arg0,
    );
  }

  late final _CBLDatabase_NamePtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_Name>>('CBLDatabase_Name');
  late final _CBLDatabase_Name =
      _CBLDatabase_NamePtr.asFunction<DartCBLDatabase_Name>();

  FLStringResult CBLDatabase_Path(
    ffi.Pointer<CBLDatabase> arg0,
  ) {
    return _CBLDatabase_Path(
      arg0,
    );
  }

  late final _CBLDatabase_PathPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_Path>>('CBLDatabase_Path');
  late final _CBLDatabase_Path =
      _CBLDatabase_PathPtr.asFunction<DartCBLDatabase_Path>();

  int CBLDatabase_Count(
    ffi.Pointer<CBLDatabase> arg0,
  ) {
    return _CBLDatabase_Count(
      arg0,
    );
  }

  late final _CBLDatabase_CountPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_Count>>('CBLDatabase_Count');
  late final _CBLDatabase_Count =
      _CBLDatabase_CountPtr.asFunction<DartCBLDatabase_Count>();

  CBLDatabaseConfiguration CBLDatabase_Config(
    ffi.Pointer<CBLDatabase> arg0,
  ) {
    return _CBLDatabase_Config(
      arg0,
    );
  }

  late final _CBLDatabase_ConfigPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_Config>>(
          'CBLDatabase_Config');
  late final _CBLDatabase_Config =
      _CBLDatabase_ConfigPtr.asFunction<DartCBLDatabase_Config>();

  bool CBLDatabase_CreateValueIndex(
    ffi.Pointer<CBLDatabase> db,
    FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_CreateValueIndex(
      db,
      name,
      config,
      outError,
    );
  }

  late final _CBLDatabase_CreateValueIndexPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_CreateValueIndex>>(
          'CBLDatabase_CreateValueIndex');
  late final _CBLDatabase_CreateValueIndex = _CBLDatabase_CreateValueIndexPtr
      .asFunction<DartCBLDatabase_CreateValueIndex>();

  bool CBLDatabase_CreateFullTextIndex(
    ffi.Pointer<CBLDatabase> db,
    FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_CreateFullTextIndex(
      db,
      name,
      config,
      outError,
    );
  }

  late final _CBLDatabase_CreateFullTextIndexPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_CreateFullTextIndex>>(
          'CBLDatabase_CreateFullTextIndex');
  late final _CBLDatabase_CreateFullTextIndex =
      _CBLDatabase_CreateFullTextIndexPtr.asFunction<
          DartCBLDatabase_CreateFullTextIndex>();

  bool CBLDatabase_DeleteIndex(
    ffi.Pointer<CBLDatabase> db,
    FLString name,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_DeleteIndex(
      db,
      name,
      outError,
    );
  }

  late final _CBLDatabase_DeleteIndexPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_DeleteIndex>>(
          'CBLDatabase_DeleteIndex');
  late final _CBLDatabase_DeleteIndex =
      _CBLDatabase_DeleteIndexPtr.asFunction<DartCBLDatabase_DeleteIndex>();

  FLArray CBLDatabase_GetIndexNames(
    ffi.Pointer<CBLDatabase> db,
  ) {
    return _CBLDatabase_GetIndexNames(
      db,
    );
  }

  late final _CBLDatabase_GetIndexNamesPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_GetIndexNames>>(
          'CBLDatabase_GetIndexNames');
  late final _CBLDatabase_GetIndexNames =
      _CBLDatabase_GetIndexNamesPtr.asFunction<DartCBLDatabase_GetIndexNames>();

  ffi.Pointer<CBLListenerToken> CBLDatabase_AddChangeListener(
    ffi.Pointer<CBLDatabase> db,
    CBLDatabaseChangeListener listener,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CBLDatabase_AddChangeListener(
      db,
      listener,
      context,
    );
  }

  late final _CBLDatabase_AddChangeListenerPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_AddChangeListener>>(
          'CBLDatabase_AddChangeListener');
  late final _CBLDatabase_AddChangeListener = _CBLDatabase_AddChangeListenerPtr
      .asFunction<DartCBLDatabase_AddChangeListener>();

  void CBLDatabase_BufferNotifications(
    ffi.Pointer<CBLDatabase> db,
    CBLNotificationsReadyCallback callback,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CBLDatabase_BufferNotifications(
      db,
      callback,
      context,
    );
  }

  late final _CBLDatabase_BufferNotificationsPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_BufferNotifications>>(
          'CBLDatabase_BufferNotifications');
  late final _CBLDatabase_BufferNotifications =
      _CBLDatabase_BufferNotificationsPtr.asFunction<
          DartCBLDatabase_BufferNotifications>();

  void CBLDatabase_SendNotifications(
    ffi.Pointer<CBLDatabase> db,
  ) {
    return _CBLDatabase_SendNotifications(
      db,
    );
  }

  late final _CBLDatabase_SendNotificationsPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_SendNotifications>>(
          'CBLDatabase_SendNotifications');
  late final _CBLDatabase_SendNotifications = _CBLDatabase_SendNotificationsPtr
      .asFunction<DartCBLDatabase_SendNotifications>();

  late final ffi.Pointer<FLString> _kCBLAuthDefaultCookieName =
      _lookup<FLString>('kCBLAuthDefaultCookieName');

  FLString get kCBLAuthDefaultCookieName => _kCBLAuthDefaultCookieName.ref;

  ffi.Pointer<CBLEndpoint> CBLEndpoint_CreateWithURL(
    FLString url,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLEndpoint_CreateWithURL(
      url,
      outError,
    );
  }

  late final _CBLEndpoint_CreateWithURLPtr =
      _lookup<ffi.NativeFunction<NativeCBLEndpoint_CreateWithURL>>(
          'CBLEndpoint_CreateWithURL');
  late final _CBLEndpoint_CreateWithURL =
      _CBLEndpoint_CreateWithURLPtr.asFunction<DartCBLEndpoint_CreateWithURL>();

  ffi.Pointer<CBLEndpoint> CBLEndpoint_CreateWithLocalDB(
    ffi.Pointer<CBLDatabase> arg0,
  ) {
    return _CBLEndpoint_CreateWithLocalDB(
      arg0,
    );
  }

  late final _CBLEndpoint_CreateWithLocalDBPtr =
      _lookup<ffi.NativeFunction<NativeCBLEndpoint_CreateWithLocalDB>>(
          'CBLEndpoint_CreateWithLocalDB');
  late final _CBLEndpoint_CreateWithLocalDB = _CBLEndpoint_CreateWithLocalDBPtr
      .asFunction<DartCBLEndpoint_CreateWithLocalDB>();

  void CBLEndpoint_Free(
    ffi.Pointer<CBLEndpoint> arg0,
  ) {
    return _CBLEndpoint_Free(
      arg0,
    );
  }

  late final _CBLEndpoint_FreePtr =
      _lookup<ffi.NativeFunction<NativeCBLEndpoint_Free>>('CBLEndpoint_Free');
  late final _CBLEndpoint_Free =
      _CBLEndpoint_FreePtr.asFunction<DartCBLEndpoint_Free>();

  ffi.Pointer<CBLAuthenticator> CBLAuth_CreatePassword(
    FLString username,
    FLString password,
  ) {
    return _CBLAuth_CreatePassword(
      username,
      password,
    );
  }

  late final _CBLAuth_CreatePasswordPtr =
      _lookup<ffi.NativeFunction<NativeCBLAuth_CreatePassword>>(
          'CBLAuth_CreatePassword');
  late final _CBLAuth_CreatePassword =
      _CBLAuth_CreatePasswordPtr.asFunction<DartCBLAuth_CreatePassword>();

  ffi.Pointer<CBLAuthenticator> CBLAuth_CreateSession(
    FLString sessionID,
    FLString cookieName,
  ) {
    return _CBLAuth_CreateSession(
      sessionID,
      cookieName,
    );
  }

  late final _CBLAuth_CreateSessionPtr =
      _lookup<ffi.NativeFunction<NativeCBLAuth_CreateSession>>(
          'CBLAuth_CreateSession');
  late final _CBLAuth_CreateSession =
      _CBLAuth_CreateSessionPtr.asFunction<DartCBLAuth_CreateSession>();

  void CBLAuth_Free(
    ffi.Pointer<CBLAuthenticator> arg0,
  ) {
    return _CBLAuth_Free(
      arg0,
    );
  }

  late final _CBLAuth_FreePtr =
      _lookup<ffi.NativeFunction<NativeCBLAuth_Free>>('CBLAuth_Free');
  late final _CBLAuth_Free = _CBLAuth_FreePtr.asFunction<DartCBLAuth_Free>();

  late final ffi.Pointer<CBLConflictResolver> _CBLDefaultConflictResolver =
      _lookup<CBLConflictResolver>('CBLDefaultConflictResolver');

  CBLConflictResolver get CBLDefaultConflictResolver =>
      _CBLDefaultConflictResolver.value;

  set CBLDefaultConflictResolver(CBLConflictResolver value) =>
      _CBLDefaultConflictResolver.value = value;

  ffi.Pointer<CBLReplicator> CBLReplicator_Create(
    ffi.Pointer<CBLReplicatorConfiguration> arg0,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLReplicator_Create(
      arg0,
      outError,
    );
  }

  late final _CBLReplicator_CreatePtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_Create>>(
          'CBLReplicator_Create');
  late final _CBLReplicator_Create =
      _CBLReplicator_CreatePtr.asFunction<DartCBLReplicator_Create>();

  ffi.Pointer<CBLReplicatorConfiguration> CBLReplicator_Config(
    ffi.Pointer<CBLReplicator> arg0,
  ) {
    return _CBLReplicator_Config(
      arg0,
    );
  }

  late final _CBLReplicator_ConfigPtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_Config>>(
          'CBLReplicator_Config');
  late final _CBLReplicator_Config =
      _CBLReplicator_ConfigPtr.asFunction<DartCBLReplicator_Config>();

  void CBLReplicator_Start(
    ffi.Pointer<CBLReplicator> replicator,
    bool resetCheckpoint,
  ) {
    return _CBLReplicator_Start(
      replicator,
      resetCheckpoint,
    );
  }

  late final _CBLReplicator_StartPtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_Start>>(
          'CBLReplicator_Start');
  late final _CBLReplicator_Start =
      _CBLReplicator_StartPtr.asFunction<DartCBLReplicator_Start>();

  void CBLReplicator_Stop(
    ffi.Pointer<CBLReplicator> arg0,
  ) {
    return _CBLReplicator_Stop(
      arg0,
    );
  }

  late final _CBLReplicator_StopPtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_Stop>>(
          'CBLReplicator_Stop');
  late final _CBLReplicator_Stop =
      _CBLReplicator_StopPtr.asFunction<DartCBLReplicator_Stop>();

  void CBLReplicator_SetHostReachable(
    ffi.Pointer<CBLReplicator> arg0,
    bool reachable,
  ) {
    return _CBLReplicator_SetHostReachable(
      arg0,
      reachable,
    );
  }

  late final _CBLReplicator_SetHostReachablePtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_SetHostReachable>>(
          'CBLReplicator_SetHostReachable');
  late final _CBLReplicator_SetHostReachable =
      _CBLReplicator_SetHostReachablePtr.asFunction<
          DartCBLReplicator_SetHostReachable>();

  void CBLReplicator_SetSuspended(
    ffi.Pointer<CBLReplicator> repl,
    bool suspended,
  ) {
    return _CBLReplicator_SetSuspended(
      repl,
      suspended,
    );
  }

  late final _CBLReplicator_SetSuspendedPtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_SetSuspended>>(
          'CBLReplicator_SetSuspended');
  late final _CBLReplicator_SetSuspended = _CBLReplicator_SetSuspendedPtr
      .asFunction<DartCBLReplicator_SetSuspended>();

  CBLReplicatorStatus CBLReplicator_Status(
    ffi.Pointer<CBLReplicator> arg0,
  ) {
    return _CBLReplicator_Status(
      arg0,
    );
  }

  late final _CBLReplicator_StatusPtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_Status>>(
          'CBLReplicator_Status');
  late final _CBLReplicator_Status =
      _CBLReplicator_StatusPtr.asFunction<DartCBLReplicator_Status>();

  FLDict CBLReplicator_PendingDocumentIDs(
    ffi.Pointer<CBLReplicator> arg0,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLReplicator_PendingDocumentIDs(
      arg0,
      outError,
    );
  }

  late final _CBLReplicator_PendingDocumentIDsPtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_PendingDocumentIDs>>(
          'CBLReplicator_PendingDocumentIDs');
  late final _CBLReplicator_PendingDocumentIDs =
      _CBLReplicator_PendingDocumentIDsPtr.asFunction<
          DartCBLReplicator_PendingDocumentIDs>();

  bool CBLReplicator_IsDocumentPending(
    ffi.Pointer<CBLReplicator> repl,
    FLString docID,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLReplicator_IsDocumentPending(
      repl,
      docID,
      outError,
    );
  }

  late final _CBLReplicator_IsDocumentPendingPtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_IsDocumentPending>>(
          'CBLReplicator_IsDocumentPending');
  late final _CBLReplicator_IsDocumentPending =
      _CBLReplicator_IsDocumentPendingPtr.asFunction<
          DartCBLReplicator_IsDocumentPending>();

  FLDict CBLReplicator_PendingDocumentIDs2(
    ffi.Pointer<CBLReplicator> arg0,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLReplicator_PendingDocumentIDs2(
      arg0,
      collection,
      outError,
    );
  }

  late final _CBLReplicator_PendingDocumentIDs2Ptr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_PendingDocumentIDs2>>(
          'CBLReplicator_PendingDocumentIDs2');
  late final _CBLReplicator_PendingDocumentIDs2 =
      _CBLReplicator_PendingDocumentIDs2Ptr.asFunction<
          DartCBLReplicator_PendingDocumentIDs2>();

  bool CBLReplicator_IsDocumentPending2(
    ffi.Pointer<CBLReplicator> repl,
    FLString docID,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLReplicator_IsDocumentPending2(
      repl,
      docID,
      collection,
      outError,
    );
  }

  late final _CBLReplicator_IsDocumentPending2Ptr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_IsDocumentPending2>>(
          'CBLReplicator_IsDocumentPending2');
  late final _CBLReplicator_IsDocumentPending2 =
      _CBLReplicator_IsDocumentPending2Ptr.asFunction<
          DartCBLReplicator_IsDocumentPending2>();

  ffi.Pointer<CBLListenerToken> CBLReplicator_AddChangeListener(
    ffi.Pointer<CBLReplicator> arg0,
    CBLReplicatorChangeListener arg1,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CBLReplicator_AddChangeListener(
      arg0,
      arg1,
      context,
    );
  }

  late final _CBLReplicator_AddChangeListenerPtr =
      _lookup<ffi.NativeFunction<NativeCBLReplicator_AddChangeListener>>(
          'CBLReplicator_AddChangeListener');
  late final _CBLReplicator_AddChangeListener =
      _CBLReplicator_AddChangeListenerPtr.asFunction<
          DartCBLReplicator_AddChangeListener>();

  ffi.Pointer<CBLListenerToken> CBLReplicator_AddDocumentReplicationListener(
    ffi.Pointer<CBLReplicator> arg0,
    CBLDocumentReplicationListener arg1,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CBLReplicator_AddDocumentReplicationListener(
      arg0,
      arg1,
      context,
    );
  }

  late final _CBLReplicator_AddDocumentReplicationListenerPtr = _lookup<
          ffi
          .NativeFunction<NativeCBLReplicator_AddDocumentReplicationListener>>(
      'CBLReplicator_AddDocumentReplicationListener');
  late final _CBLReplicator_AddDocumentReplicationListener =
      _CBLReplicator_AddDocumentReplicationListenerPtr.asFunction<
          DartCBLReplicator_AddDocumentReplicationListener>();

  late final ffi.Pointer<ffi.Bool> _kCBLDefaultLogFileUsePlaintext =
      _lookup<ffi.Bool>('kCBLDefaultLogFileUsePlaintext');

  bool get kCBLDefaultLogFileUsePlaintext =>
      _kCBLDefaultLogFileUsePlaintext.value;

  late final ffi.Pointer<ffi.Bool> _kCBLDefaultLogFileUsePlainText =
      _lookup<ffi.Bool>('kCBLDefaultLogFileUsePlainText');

  bool get kCBLDefaultLogFileUsePlainText =>
      _kCBLDefaultLogFileUsePlainText.value;

  late final ffi.Pointer<ffi.Size> _kCBLDefaultLogFileMaxSize =
      _lookup<ffi.Size>('kCBLDefaultLogFileMaxSize');

  int get kCBLDefaultLogFileMaxSize => _kCBLDefaultLogFileMaxSize.value;

  late final ffi.Pointer<ffi.Uint32> _kCBLDefaultLogFileMaxRotateCount =
      _lookup<ffi.Uint32>('kCBLDefaultLogFileMaxRotateCount');

  int get kCBLDefaultLogFileMaxRotateCount =>
      _kCBLDefaultLogFileMaxRotateCount.value;

  late final ffi.Pointer<ffi.Bool> _kCBLDefaultFullTextIndexIgnoreAccents =
      _lookup<ffi.Bool>('kCBLDefaultFullTextIndexIgnoreAccents');

  bool get kCBLDefaultFullTextIndexIgnoreAccents =>
      _kCBLDefaultFullTextIndexIgnoreAccents.value;

  late final ffi.Pointer<CBLReplicatorType> _kCBLDefaultReplicatorType =
      _lookup<CBLReplicatorType>('kCBLDefaultReplicatorType');

  DartCBLReplicatorType get kCBLDefaultReplicatorType =>
      _kCBLDefaultReplicatorType.value;

  late final ffi.Pointer<ffi.Bool> _kCBLDefaultReplicatorContinuous =
      _lookup<ffi.Bool>('kCBLDefaultReplicatorContinuous');

  bool get kCBLDefaultReplicatorContinuous =>
      _kCBLDefaultReplicatorContinuous.value;

  late final ffi.Pointer<ffi.UnsignedInt> _kCBLDefaultReplicatorHeartbeat =
      _lookup<ffi.UnsignedInt>('kCBLDefaultReplicatorHeartbeat');

  int get kCBLDefaultReplicatorHeartbeat =>
      _kCBLDefaultReplicatorHeartbeat.value;

  late final ffi.Pointer<ffi.UnsignedInt>
      _kCBLDefaultReplicatorMaxAttemptsSingleShot =
      _lookup<ffi.UnsignedInt>('kCBLDefaultReplicatorMaxAttemptsSingleShot');

  int get kCBLDefaultReplicatorMaxAttemptsSingleShot =>
      _kCBLDefaultReplicatorMaxAttemptsSingleShot.value;

  late final ffi.Pointer<ffi.UnsignedInt>
      _kCBLDefaultReplicatorMaxAttemptsContinuous =
      _lookup<ffi.UnsignedInt>('kCBLDefaultReplicatorMaxAttemptsContinuous');

  int get kCBLDefaultReplicatorMaxAttemptsContinuous =>
      _kCBLDefaultReplicatorMaxAttemptsContinuous.value;

  late final ffi.Pointer<ffi.UnsignedInt>
      _kCBLDefaultReplicatorMaxAttemptsWaitTime =
      _lookup<ffi.UnsignedInt>('kCBLDefaultReplicatorMaxAttemptsWaitTime');

  int get kCBLDefaultReplicatorMaxAttemptsWaitTime =>
      _kCBLDefaultReplicatorMaxAttemptsWaitTime.value;

  late final ffi.Pointer<ffi.UnsignedInt>
      _kCBLDefaultReplicatorMaxAttemptWaitTime =
      _lookup<ffi.UnsignedInt>('kCBLDefaultReplicatorMaxAttemptWaitTime');

  int get kCBLDefaultReplicatorMaxAttemptWaitTime =>
      _kCBLDefaultReplicatorMaxAttemptWaitTime.value;

  late final ffi.Pointer<ffi.Bool> _kCBLDefaultReplicatorDisableAutoPurge =
      _lookup<ffi.Bool>('kCBLDefaultReplicatorDisableAutoPurge');

  bool get kCBLDefaultReplicatorDisableAutoPurge =>
      _kCBLDefaultReplicatorDisableAutoPurge.value;

  late final ffi.Pointer<ffi.Bool> _kCBLDefaultReplicatorAcceptParentCookies =
      _lookup<ffi.Bool>('kCBLDefaultReplicatorAcceptParentCookies');

  bool get kCBLDefaultReplicatorAcceptParentCookies =>
      _kCBLDefaultReplicatorAcceptParentCookies.value;

  late final ffi.Pointer<ffi.Bool> _kCBLDefaultVectorIndexLazy =
      _lookup<ffi.Bool>('kCBLDefaultVectorIndexLazy');

  bool get kCBLDefaultVectorIndexLazy => _kCBLDefaultVectorIndexLazy.value;

  late final ffi.Pointer<CBLDistanceMetric>
      _kCBLDefaultVectorIndexDistanceMetric =
      _lookup<CBLDistanceMetric>('kCBLDefaultVectorIndexDistanceMetric');

  DartCBLDistanceMetric get kCBLDefaultVectorIndexDistanceMetric =>
      _kCBLDefaultVectorIndexDistanceMetric.value;

  late final ffi.Pointer<ffi.UnsignedInt>
      _kCBLDefaultVectorIndexMinTrainingSize =
      _lookup<ffi.UnsignedInt>('kCBLDefaultVectorIndexMinTrainingSize');

  int get kCBLDefaultVectorIndexMinTrainingSize =>
      _kCBLDefaultVectorIndexMinTrainingSize.value;

  late final ffi.Pointer<ffi.UnsignedInt>
      _kCBLDefaultVectorIndexMaxTrainingSize =
      _lookup<ffi.UnsignedInt>('kCBLDefaultVectorIndexMaxTrainingSize');

  int get kCBLDefaultVectorIndexMaxTrainingSize =>
      _kCBLDefaultVectorIndexMaxTrainingSize.value;

  late final ffi.Pointer<ffi.UnsignedInt> _kCBLDefaultVectorIndexNumProbes =
      _lookup<ffi.UnsignedInt>('kCBLDefaultVectorIndexNumProbes');

  int get kCBLDefaultVectorIndexNumProbes =>
      _kCBLDefaultVectorIndexNumProbes.value;

  late final ffi.Pointer<FLSlice> _kCBLEncryptableType =
      _lookup<FLSlice>('kCBLEncryptableType');

  FLSlice get kCBLEncryptableType => _kCBLEncryptableType.ref;

  late final ffi.Pointer<FLSlice> _kCBLEncryptableValueProperty =
      _lookup<FLSlice>('kCBLEncryptableValueProperty');

  FLSlice get kCBLEncryptableValueProperty => _kCBLEncryptableValueProperty.ref;

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithNull() {
    return _CBLEncryptable_CreateWithNull();
  }

  late final _CBLEncryptable_CreateWithNullPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithNull>>(
          'CBLEncryptable_CreateWithNull');
  late final _CBLEncryptable_CreateWithNull = _CBLEncryptable_CreateWithNullPtr
      .asFunction<DartCBLEncryptable_CreateWithNull>();

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithBool(
    bool value,
  ) {
    return _CBLEncryptable_CreateWithBool(
      value,
    );
  }

  late final _CBLEncryptable_CreateWithBoolPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithBool>>(
          'CBLEncryptable_CreateWithBool');
  late final _CBLEncryptable_CreateWithBool = _CBLEncryptable_CreateWithBoolPtr
      .asFunction<DartCBLEncryptable_CreateWithBool>();

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithInt(
    int value,
  ) {
    return _CBLEncryptable_CreateWithInt(
      value,
    );
  }

  late final _CBLEncryptable_CreateWithIntPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithInt>>(
          'CBLEncryptable_CreateWithInt');
  late final _CBLEncryptable_CreateWithInt = _CBLEncryptable_CreateWithIntPtr
      .asFunction<DartCBLEncryptable_CreateWithInt>();

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithUInt(
    int value,
  ) {
    return _CBLEncryptable_CreateWithUInt(
      value,
    );
  }

  late final _CBLEncryptable_CreateWithUIntPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithUInt>>(
          'CBLEncryptable_CreateWithUInt');
  late final _CBLEncryptable_CreateWithUInt = _CBLEncryptable_CreateWithUIntPtr
      .asFunction<DartCBLEncryptable_CreateWithUInt>();

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithFloat(
    double value,
  ) {
    return _CBLEncryptable_CreateWithFloat(
      value,
    );
  }

  late final _CBLEncryptable_CreateWithFloatPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithFloat>>(
          'CBLEncryptable_CreateWithFloat');
  late final _CBLEncryptable_CreateWithFloat =
      _CBLEncryptable_CreateWithFloatPtr.asFunction<
          DartCBLEncryptable_CreateWithFloat>();

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithDouble(
    double value,
  ) {
    return _CBLEncryptable_CreateWithDouble(
      value,
    );
  }

  late final _CBLEncryptable_CreateWithDoublePtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithDouble>>(
          'CBLEncryptable_CreateWithDouble');
  late final _CBLEncryptable_CreateWithDouble =
      _CBLEncryptable_CreateWithDoublePtr.asFunction<
          DartCBLEncryptable_CreateWithDouble>();

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithString(
    FLString value,
  ) {
    return _CBLEncryptable_CreateWithString(
      value,
    );
  }

  late final _CBLEncryptable_CreateWithStringPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithString>>(
          'CBLEncryptable_CreateWithString');
  late final _CBLEncryptable_CreateWithString =
      _CBLEncryptable_CreateWithStringPtr.asFunction<
          DartCBLEncryptable_CreateWithString>();

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithValue(
    FLValue value,
  ) {
    return _CBLEncryptable_CreateWithValue(
      value,
    );
  }

  late final _CBLEncryptable_CreateWithValuePtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithValue>>(
          'CBLEncryptable_CreateWithValue');
  late final _CBLEncryptable_CreateWithValue =
      _CBLEncryptable_CreateWithValuePtr.asFunction<
          DartCBLEncryptable_CreateWithValue>();

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithArray(
    FLArray value,
  ) {
    return _CBLEncryptable_CreateWithArray(
      value,
    );
  }

  late final _CBLEncryptable_CreateWithArrayPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithArray>>(
          'CBLEncryptable_CreateWithArray');
  late final _CBLEncryptable_CreateWithArray =
      _CBLEncryptable_CreateWithArrayPtr.asFunction<
          DartCBLEncryptable_CreateWithArray>();

  ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithDict(
    FLDict value,
  ) {
    return _CBLEncryptable_CreateWithDict(
      value,
    );
  }

  late final _CBLEncryptable_CreateWithDictPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_CreateWithDict>>(
          'CBLEncryptable_CreateWithDict');
  late final _CBLEncryptable_CreateWithDict = _CBLEncryptable_CreateWithDictPtr
      .asFunction<DartCBLEncryptable_CreateWithDict>();

  FLValue CBLEncryptable_Value(
    ffi.Pointer<CBLEncryptable> encryptable,
  ) {
    return _CBLEncryptable_Value(
      encryptable,
    );
  }

  late final _CBLEncryptable_ValuePtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_Value>>(
          'CBLEncryptable_Value');
  late final _CBLEncryptable_Value =
      _CBLEncryptable_ValuePtr.asFunction<DartCBLEncryptable_Value>();

  FLDict CBLEncryptable_Properties(
    ffi.Pointer<CBLEncryptable> encryptable,
  ) {
    return _CBLEncryptable_Properties(
      encryptable,
    );
  }

  late final _CBLEncryptable_PropertiesPtr =
      _lookup<ffi.NativeFunction<NativeCBLEncryptable_Properties>>(
          'CBLEncryptable_Properties');
  late final _CBLEncryptable_Properties =
      _CBLEncryptable_PropertiesPtr.asFunction<DartCBLEncryptable_Properties>();

  bool FLDict_IsEncryptableValue(
    FLDict arg0,
  ) {
    return _FLDict_IsEncryptableValue(
      arg0,
    );
  }

  late final _FLDict_IsEncryptableValuePtr =
      _lookup<ffi.NativeFunction<NativeFLDict_IsEncryptableValue>>(
          'FLDict_IsEncryptableValue');
  late final _FLDict_IsEncryptableValue =
      _FLDict_IsEncryptableValuePtr.asFunction<DartFLDict_IsEncryptableValue>();

  ffi.Pointer<CBLEncryptable> FLDict_GetEncryptableValue(
    FLDict encryptableDict,
  ) {
    return _FLDict_GetEncryptableValue(
      encryptableDict,
    );
  }

  late final _FLDict_GetEncryptableValuePtr =
      _lookup<ffi.NativeFunction<NativeFLDict_GetEncryptableValue>>(
          'FLDict_GetEncryptableValue');
  late final _FLDict_GetEncryptableValue = _FLDict_GetEncryptableValuePtr
      .asFunction<DartFLDict_GetEncryptableValue>();

  void FLSlot_SetEncryptableValue(
    FLSlot slot,
    ffi.Pointer<CBLEncryptable> encryptable,
  ) {
    return _FLSlot_SetEncryptableValue(
      slot,
      encryptable,
    );
  }

  late final _FLSlot_SetEncryptableValuePtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetEncryptableValue>>(
          'FLSlot_SetEncryptableValue');
  late final _FLSlot_SetEncryptableValue = _FLSlot_SetEncryptableValuePtr
      .asFunction<DartFLSlot_SetEncryptableValue>();

  void CBL_Log(
    int domain,
    int level,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _CBL_Log(
      domain,
      level,
      format,
    );
  }

  late final _CBL_LogPtr =
      _lookup<ffi.NativeFunction<NativeCBL_Log>>('CBL_Log');
  late final _CBL_Log = _CBL_LogPtr.asFunction<DartCBL_Log>();

  void CBL_LogMessage(
    int domain,
    int level,
    FLSlice message,
  ) {
    return _CBL_LogMessage(
      domain,
      level,
      message,
    );
  }

  late final _CBL_LogMessagePtr =
      _lookup<ffi.NativeFunction<NativeCBL_LogMessage>>('CBL_LogMessage');
  late final _CBL_LogMessage =
      _CBL_LogMessagePtr.asFunction<DartCBL_LogMessage>();

  int CBLLog_ConsoleLevel() {
    return _CBLLog_ConsoleLevel();
  }

  late final _CBLLog_ConsoleLevelPtr =
      _lookup<ffi.NativeFunction<NativeCBLLog_ConsoleLevel>>(
          'CBLLog_ConsoleLevel');
  late final _CBLLog_ConsoleLevel =
      _CBLLog_ConsoleLevelPtr.asFunction<DartCBLLog_ConsoleLevel>();

  void CBLLog_SetConsoleLevel(
    int arg0,
  ) {
    return _CBLLog_SetConsoleLevel(
      arg0,
    );
  }

  late final _CBLLog_SetConsoleLevelPtr =
      _lookup<ffi.NativeFunction<NativeCBLLog_SetConsoleLevel>>(
          'CBLLog_SetConsoleLevel');
  late final _CBLLog_SetConsoleLevel =
      _CBLLog_SetConsoleLevelPtr.asFunction<DartCBLLog_SetConsoleLevel>();

  int CBLLog_CallbackLevel() {
    return _CBLLog_CallbackLevel();
  }

  late final _CBLLog_CallbackLevelPtr =
      _lookup<ffi.NativeFunction<NativeCBLLog_CallbackLevel>>(
          'CBLLog_CallbackLevel');
  late final _CBLLog_CallbackLevel =
      _CBLLog_CallbackLevelPtr.asFunction<DartCBLLog_CallbackLevel>();

  void CBLLog_SetCallbackLevel(
    int arg0,
  ) {
    return _CBLLog_SetCallbackLevel(
      arg0,
    );
  }

  late final _CBLLog_SetCallbackLevelPtr =
      _lookup<ffi.NativeFunction<NativeCBLLog_SetCallbackLevel>>(
          'CBLLog_SetCallbackLevel');
  late final _CBLLog_SetCallbackLevel =
      _CBLLog_SetCallbackLevelPtr.asFunction<DartCBLLog_SetCallbackLevel>();

  CBLLogCallback CBLLog_Callback() {
    return _CBLLog_Callback();
  }

  late final _CBLLog_CallbackPtr =
      _lookup<ffi.NativeFunction<NativeCBLLog_Callback>>('CBLLog_Callback');
  late final _CBLLog_Callback =
      _CBLLog_CallbackPtr.asFunction<DartCBLLog_Callback>();

  void CBLLog_SetCallback(
    CBLLogCallback callback,
  ) {
    return _CBLLog_SetCallback(
      callback,
    );
  }

  late final _CBLLog_SetCallbackPtr =
      _lookup<ffi.NativeFunction<NativeCBLLog_SetCallback>>(
          'CBLLog_SetCallback');
  late final _CBLLog_SetCallback =
      _CBLLog_SetCallbackPtr.asFunction<DartCBLLog_SetCallback>();

  ffi.Pointer<CBLLogFileConfiguration> CBLLog_FileConfig() {
    return _CBLLog_FileConfig();
  }

  late final _CBLLog_FileConfigPtr =
      _lookup<ffi.NativeFunction<NativeCBLLog_FileConfig>>('CBLLog_FileConfig');
  late final _CBLLog_FileConfig =
      _CBLLog_FileConfigPtr.asFunction<DartCBLLog_FileConfig>();

  bool CBLLog_SetFileConfig(
    CBLLogFileConfiguration arg0,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLLog_SetFileConfig(
      arg0,
      outError,
    );
  }

  late final _CBLLog_SetFileConfigPtr =
      _lookup<ffi.NativeFunction<NativeCBLLog_SetFileConfig>>(
          'CBLLog_SetFileConfig');
  late final _CBLLog_SetFileConfig =
      _CBLLog_SetFileConfigPtr.asFunction<DartCBLLog_SetFileConfig>();

  void CBL_RegisterPredictiveModel(
    FLString name,
    CBLPredictiveModel model,
  ) {
    return _CBL_RegisterPredictiveModel(
      name,
      model,
    );
  }

  late final _CBL_RegisterPredictiveModelPtr =
      _lookup<ffi.NativeFunction<NativeCBL_RegisterPredictiveModel>>(
          'CBL_RegisterPredictiveModel');
  late final _CBL_RegisterPredictiveModel = _CBL_RegisterPredictiveModelPtr
      .asFunction<DartCBL_RegisterPredictiveModel>();

  void CBL_UnregisterPredictiveModel(
    FLString name,
  ) {
    return _CBL_UnregisterPredictiveModel(
      name,
    );
  }

  late final _CBL_UnregisterPredictiveModelPtr =
      _lookup<ffi.NativeFunction<NativeCBL_UnregisterPredictiveModel>>(
          'CBL_UnregisterPredictiveModel');
  late final _CBL_UnregisterPredictiveModel = _CBL_UnregisterPredictiveModelPtr
      .asFunction<DartCBL_UnregisterPredictiveModel>();

  ffi.Pointer<CBLQuery> CBLDatabase_CreateQuery(
    ffi.Pointer<CBLDatabase> db,
    int language,
    FLString queryString,
    ffi.Pointer<ffi.Int> outErrorPos,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLDatabase_CreateQuery(
      db,
      language,
      queryString,
      outErrorPos,
      outError,
    );
  }

  late final _CBLDatabase_CreateQueryPtr =
      _lookup<ffi.NativeFunction<NativeCBLDatabase_CreateQuery>>(
          'CBLDatabase_CreateQuery');
  late final _CBLDatabase_CreateQuery =
      _CBLDatabase_CreateQueryPtr.asFunction<DartCBLDatabase_CreateQuery>();

  void CBLQuery_SetParameters(
    ffi.Pointer<CBLQuery> query,
    FLDict parameters,
  ) {
    return _CBLQuery_SetParameters(
      query,
      parameters,
    );
  }

  late final _CBLQuery_SetParametersPtr =
      _lookup<ffi.NativeFunction<NativeCBLQuery_SetParameters>>(
          'CBLQuery_SetParameters');
  late final _CBLQuery_SetParameters =
      _CBLQuery_SetParametersPtr.asFunction<DartCBLQuery_SetParameters>();

  FLDict CBLQuery_Parameters(
    ffi.Pointer<CBLQuery> query,
  ) {
    return _CBLQuery_Parameters(
      query,
    );
  }

  late final _CBLQuery_ParametersPtr =
      _lookup<ffi.NativeFunction<NativeCBLQuery_Parameters>>(
          'CBLQuery_Parameters');
  late final _CBLQuery_Parameters =
      _CBLQuery_ParametersPtr.asFunction<DartCBLQuery_Parameters>();

  ffi.Pointer<CBLResultSet> CBLQuery_Execute(
    ffi.Pointer<CBLQuery> arg0,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLQuery_Execute(
      arg0,
      outError,
    );
  }

  late final _CBLQuery_ExecutePtr =
      _lookup<ffi.NativeFunction<NativeCBLQuery_Execute>>('CBLQuery_Execute');
  late final _CBLQuery_Execute =
      _CBLQuery_ExecutePtr.asFunction<DartCBLQuery_Execute>();

  FLSliceResult CBLQuery_Explain(
    ffi.Pointer<CBLQuery> arg0,
  ) {
    return _CBLQuery_Explain(
      arg0,
    );
  }

  late final _CBLQuery_ExplainPtr =
      _lookup<ffi.NativeFunction<NativeCBLQuery_Explain>>('CBLQuery_Explain');
  late final _CBLQuery_Explain =
      _CBLQuery_ExplainPtr.asFunction<DartCBLQuery_Explain>();

  int CBLQuery_ColumnCount(
    ffi.Pointer<CBLQuery> arg0,
  ) {
    return _CBLQuery_ColumnCount(
      arg0,
    );
  }

  late final _CBLQuery_ColumnCountPtr =
      _lookup<ffi.NativeFunction<NativeCBLQuery_ColumnCount>>(
          'CBLQuery_ColumnCount');
  late final _CBLQuery_ColumnCount =
      _CBLQuery_ColumnCountPtr.asFunction<DartCBLQuery_ColumnCount>();

  FLSlice CBLQuery_ColumnName(
    ffi.Pointer<CBLQuery> arg0,
    int columnIndex,
  ) {
    return _CBLQuery_ColumnName(
      arg0,
      columnIndex,
    );
  }

  late final _CBLQuery_ColumnNamePtr =
      _lookup<ffi.NativeFunction<NativeCBLQuery_ColumnName>>(
          'CBLQuery_ColumnName');
  late final _CBLQuery_ColumnName =
      _CBLQuery_ColumnNamePtr.asFunction<DartCBLQuery_ColumnName>();

  bool CBLResultSet_Next(
    ffi.Pointer<CBLResultSet> arg0,
  ) {
    return _CBLResultSet_Next(
      arg0,
    );
  }

  late final _CBLResultSet_NextPtr =
      _lookup<ffi.NativeFunction<NativeCBLResultSet_Next>>('CBLResultSet_Next');
  late final _CBLResultSet_Next =
      _CBLResultSet_NextPtr.asFunction<DartCBLResultSet_Next>();

  FLValue CBLResultSet_ValueAtIndex(
    ffi.Pointer<CBLResultSet> arg0,
    int index,
  ) {
    return _CBLResultSet_ValueAtIndex(
      arg0,
      index,
    );
  }

  late final _CBLResultSet_ValueAtIndexPtr =
      _lookup<ffi.NativeFunction<NativeCBLResultSet_ValueAtIndex>>(
          'CBLResultSet_ValueAtIndex');
  late final _CBLResultSet_ValueAtIndex =
      _CBLResultSet_ValueAtIndexPtr.asFunction<DartCBLResultSet_ValueAtIndex>();

  FLValue CBLResultSet_ValueForKey(
    ffi.Pointer<CBLResultSet> arg0,
    FLString key,
  ) {
    return _CBLResultSet_ValueForKey(
      arg0,
      key,
    );
  }

  late final _CBLResultSet_ValueForKeyPtr =
      _lookup<ffi.NativeFunction<NativeCBLResultSet_ValueForKey>>(
          'CBLResultSet_ValueForKey');
  late final _CBLResultSet_ValueForKey =
      _CBLResultSet_ValueForKeyPtr.asFunction<DartCBLResultSet_ValueForKey>();

  FLArray CBLResultSet_ResultArray(
    ffi.Pointer<CBLResultSet> arg0,
  ) {
    return _CBLResultSet_ResultArray(
      arg0,
    );
  }

  late final _CBLResultSet_ResultArrayPtr =
      _lookup<ffi.NativeFunction<NativeCBLResultSet_ResultArray>>(
          'CBLResultSet_ResultArray');
  late final _CBLResultSet_ResultArray =
      _CBLResultSet_ResultArrayPtr.asFunction<DartCBLResultSet_ResultArray>();

  FLDict CBLResultSet_ResultDict(
    ffi.Pointer<CBLResultSet> arg0,
  ) {
    return _CBLResultSet_ResultDict(
      arg0,
    );
  }

  late final _CBLResultSet_ResultDictPtr =
      _lookup<ffi.NativeFunction<NativeCBLResultSet_ResultDict>>(
          'CBLResultSet_ResultDict');
  late final _CBLResultSet_ResultDict =
      _CBLResultSet_ResultDictPtr.asFunction<DartCBLResultSet_ResultDict>();

  ffi.Pointer<CBLQuery> CBLResultSet_GetQuery(
    ffi.Pointer<CBLResultSet> rs,
  ) {
    return _CBLResultSet_GetQuery(
      rs,
    );
  }

  late final _CBLResultSet_GetQueryPtr =
      _lookup<ffi.NativeFunction<NativeCBLResultSet_GetQuery>>(
          'CBLResultSet_GetQuery');
  late final _CBLResultSet_GetQuery =
      _CBLResultSet_GetQueryPtr.asFunction<DartCBLResultSet_GetQuery>();

  ffi.Pointer<CBLListenerToken> CBLQuery_AddChangeListener(
    ffi.Pointer<CBLQuery> query,
    CBLQueryChangeListener listener,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CBLQuery_AddChangeListener(
      query,
      listener,
      context,
    );
  }

  late final _CBLQuery_AddChangeListenerPtr =
      _lookup<ffi.NativeFunction<NativeCBLQuery_AddChangeListener>>(
          'CBLQuery_AddChangeListener');
  late final _CBLQuery_AddChangeListener = _CBLQuery_AddChangeListenerPtr
      .asFunction<DartCBLQuery_AddChangeListener>();

  ffi.Pointer<CBLResultSet> CBLQuery_CopyCurrentResults(
    ffi.Pointer<CBLQuery> query,
    ffi.Pointer<CBLListenerToken> listener,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLQuery_CopyCurrentResults(
      query,
      listener,
      outError,
    );
  }

  late final _CBLQuery_CopyCurrentResultsPtr =
      _lookup<ffi.NativeFunction<NativeCBLQuery_CopyCurrentResults>>(
          'CBLQuery_CopyCurrentResults');
  late final _CBLQuery_CopyCurrentResults = _CBLQuery_CopyCurrentResultsPtr
      .asFunction<DartCBLQuery_CopyCurrentResults>();

  FLString CBLQueryIndex_Name(
    ffi.Pointer<CBLQueryIndex> index,
  ) {
    return _CBLQueryIndex_Name(
      index,
    );
  }

  late final _CBLQueryIndex_NamePtr =
      _lookup<ffi.NativeFunction<NativeCBLQueryIndex_Name>>(
          'CBLQueryIndex_Name');
  late final _CBLQueryIndex_Name =
      _CBLQueryIndex_NamePtr.asFunction<DartCBLQueryIndex_Name>();

  ffi.Pointer<CBLCollection> CBLQueryIndex_Collection(
    ffi.Pointer<CBLQueryIndex> index,
  ) {
    return _CBLQueryIndex_Collection(
      index,
    );
  }

  late final _CBLQueryIndex_CollectionPtr =
      _lookup<ffi.NativeFunction<NativeCBLQueryIndex_Collection>>(
          'CBLQueryIndex_Collection');
  late final _CBLQueryIndex_Collection =
      _CBLQueryIndex_CollectionPtr.asFunction<DartCBLQueryIndex_Collection>();

  ffi.Pointer<CBLIndexUpdater> CBLQueryIndex_BeginUpdate(
    ffi.Pointer<CBLQueryIndex> index,
    int limit,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLQueryIndex_BeginUpdate(
      index,
      limit,
      outError,
    );
  }

  late final _CBLQueryIndex_BeginUpdatePtr =
      _lookup<ffi.NativeFunction<NativeCBLQueryIndex_BeginUpdate>>(
          'CBLQueryIndex_BeginUpdate');
  late final _CBLQueryIndex_BeginUpdate =
      _CBLQueryIndex_BeginUpdatePtr.asFunction<DartCBLQueryIndex_BeginUpdate>();

  int CBLIndexUpdater_Count(
    ffi.Pointer<CBLIndexUpdater> updater,
  ) {
    return _CBLIndexUpdater_Count(
      updater,
    );
  }

  late final _CBLIndexUpdater_CountPtr =
      _lookup<ffi.NativeFunction<NativeCBLIndexUpdater_Count>>(
          'CBLIndexUpdater_Count');
  late final _CBLIndexUpdater_Count =
      _CBLIndexUpdater_CountPtr.asFunction<DartCBLIndexUpdater_Count>();

  FLValue CBLIndexUpdater_Value(
    ffi.Pointer<CBLIndexUpdater> updater,
    int index,
  ) {
    return _CBLIndexUpdater_Value(
      updater,
      index,
    );
  }

  late final _CBLIndexUpdater_ValuePtr =
      _lookup<ffi.NativeFunction<NativeCBLIndexUpdater_Value>>(
          'CBLIndexUpdater_Value');
  late final _CBLIndexUpdater_Value =
      _CBLIndexUpdater_ValuePtr.asFunction<DartCBLIndexUpdater_Value>();

  bool CBLIndexUpdater_SetVector(
    ffi.Pointer<CBLIndexUpdater> updater,
    int index,
    ffi.Pointer<ffi.Float> vector,
    int dimension,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLIndexUpdater_SetVector(
      updater,
      index,
      vector,
      dimension,
      outError,
    );
  }

  late final _CBLIndexUpdater_SetVectorPtr =
      _lookup<ffi.NativeFunction<NativeCBLIndexUpdater_SetVector>>(
          'CBLIndexUpdater_SetVector');
  late final _CBLIndexUpdater_SetVector =
      _CBLIndexUpdater_SetVectorPtr.asFunction<DartCBLIndexUpdater_SetVector>();

  void CBLIndexUpdater_SkipVector(
    ffi.Pointer<CBLIndexUpdater> updater,
    int index,
  ) {
    return _CBLIndexUpdater_SkipVector(
      updater,
      index,
    );
  }

  late final _CBLIndexUpdater_SkipVectorPtr =
      _lookup<ffi.NativeFunction<NativeCBLIndexUpdater_SkipVector>>(
          'CBLIndexUpdater_SkipVector');
  late final _CBLIndexUpdater_SkipVector = _CBLIndexUpdater_SkipVectorPtr
      .asFunction<DartCBLIndexUpdater_SkipVector>();

  bool CBLIndexUpdater_Finish(
    ffi.Pointer<CBLIndexUpdater> updater,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLIndexUpdater_Finish(
      updater,
      outError,
    );
  }

  late final _CBLIndexUpdater_FinishPtr =
      _lookup<ffi.NativeFunction<NativeCBLIndexUpdater_Finish>>(
          'CBLIndexUpdater_Finish');
  late final _CBLIndexUpdater_Finish =
      _CBLIndexUpdater_FinishPtr.asFunction<DartCBLIndexUpdater_Finish>();

  late final ffi.Pointer<FLString> _kCBLDefaultScopeName =
      _lookup<FLString>('kCBLDefaultScopeName');

  FLString get kCBLDefaultScopeName => _kCBLDefaultScopeName.ref;

  FLString CBLScope_Name(
    ffi.Pointer<CBLScope> scope,
  ) {
    return _CBLScope_Name(
      scope,
    );
  }

  late final _CBLScope_NamePtr =
      _lookup<ffi.NativeFunction<NativeCBLScope_Name>>('CBLScope_Name');
  late final _CBLScope_Name = _CBLScope_NamePtr.asFunction<DartCBLScope_Name>();

  ffi.Pointer<CBLDatabase> CBLScope_Database(
    ffi.Pointer<CBLScope> scope,
  ) {
    return _CBLScope_Database(
      scope,
    );
  }

  late final _CBLScope_DatabasePtr =
      _lookup<ffi.NativeFunction<NativeCBLScope_Database>>('CBLScope_Database');
  late final _CBLScope_Database =
      _CBLScope_DatabasePtr.asFunction<DartCBLScope_Database>();

  FLMutableArray CBLScope_CollectionNames(
    ffi.Pointer<CBLScope> scope,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLScope_CollectionNames(
      scope,
      outError,
    );
  }

  late final _CBLScope_CollectionNamesPtr =
      _lookup<ffi.NativeFunction<NativeCBLScope_CollectionNames>>(
          'CBLScope_CollectionNames');
  late final _CBLScope_CollectionNames =
      _CBLScope_CollectionNamesPtr.asFunction<DartCBLScope_CollectionNames>();

  ffi.Pointer<CBLCollection> CBLScope_Collection(
    ffi.Pointer<CBLScope> scope,
    FLString collectionName,
    ffi.Pointer<CBLError> outError,
  ) {
    return _CBLScope_Collection(
      scope,
      collectionName,
      outError,
    );
  }

  late final _CBLScope_CollectionPtr =
      _lookup<ffi.NativeFunction<NativeCBLScope_Collection>>(
          'CBLScope_Collection');
  late final _CBLScope_Collection =
      _CBLScope_CollectionPtr.asFunction<DartCBLScope_Collection>();

  bool FLSlice_Equal(
    FLSlice a,
    FLSlice b,
  ) {
    return _FLSlice_Equal(
      a,
      b,
    );
  }

  late final _FLSlice_EqualPtr =
      _lookup<ffi.NativeFunction<NativeFLSlice_Equal>>('FLSlice_Equal');
  late final _FLSlice_Equal = _FLSlice_EqualPtr.asFunction<DartFLSlice_Equal>();

  int FLSlice_Compare(
    FLSlice arg0,
    FLSlice arg1,
  ) {
    return _FLSlice_Compare(
      arg0,
      arg1,
    );
  }

  late final _FLSlice_ComparePtr =
      _lookup<ffi.NativeFunction<NativeFLSlice_Compare>>('FLSlice_Compare');
  late final _FLSlice_Compare =
      _FLSlice_ComparePtr.asFunction<DartFLSlice_Compare>();

  int FLSlice_Hash(
    FLSlice s,
  ) {
    return _FLSlice_Hash(
      s,
    );
  }

  late final _FLSlice_HashPtr =
      _lookup<ffi.NativeFunction<NativeFLSlice_Hash>>('FLSlice_Hash');
  late final _FLSlice_Hash = _FLSlice_HashPtr.asFunction<DartFLSlice_Hash>();

  bool FLSlice_ToCString(
    FLSlice s,
    ffi.Pointer<ffi.Char> buffer,
    int capacity,
  ) {
    return _FLSlice_ToCString(
      s,
      buffer,
      capacity,
    );
  }

  late final _FLSlice_ToCStringPtr =
      _lookup<ffi.NativeFunction<NativeFLSlice_ToCString>>('FLSlice_ToCString');
  late final _FLSlice_ToCString =
      _FLSlice_ToCStringPtr.asFunction<DartFLSlice_ToCString>();

  FLSliceResult FLSliceResult_New(
    int arg0,
  ) {
    return _FLSliceResult_New(
      arg0,
    );
  }

  late final _FLSliceResult_NewPtr =
      _lookup<ffi.NativeFunction<NativeFLSliceResult_New>>('FLSliceResult_New');
  late final _FLSliceResult_New =
      _FLSliceResult_NewPtr.asFunction<DartFLSliceResult_New>();

  FLSliceResult FLSlice_Copy(
    FLSlice arg0,
  ) {
    return _FLSlice_Copy(
      arg0,
    );
  }

  late final _FLSlice_CopyPtr =
      _lookup<ffi.NativeFunction<NativeFLSlice_Copy>>('FLSlice_Copy');
  late final _FLSlice_Copy = _FLSlice_CopyPtr.asFunction<DartFLSlice_Copy>();

  void FLBuf_Retain(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _FLBuf_Retain(
      arg0,
    );
  }

  late final _FLBuf_RetainPtr =
      _lookup<ffi.NativeFunction<NativeFLBuf_Retain>>('_FLBuf_Retain');
  late final _FLBuf_Retain = _FLBuf_RetainPtr.asFunction<DartFLBuf_Retain>();

  void FLBuf_Release(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _FLBuf_Release(
      arg0,
    );
  }

  late final _FLBuf_ReleasePtr =
      _lookup<ffi.NativeFunction<NativeFLBuf_Release>>('_FLBuf_Release');
  late final _FLBuf_Release = _FLBuf_ReleasePtr.asFunction<DartFLBuf_Release>();

  void FL_WipeMemory(
    ffi.Pointer<ffi.Void> dst,
    int size,
  ) {
    return _FL_WipeMemory(
      dst,
      size,
    );
  }

  late final _FL_WipeMemoryPtr =
      _lookup<ffi.NativeFunction<NativeFL_WipeMemory>>('FL_WipeMemory');
  late final _FL_WipeMemory = _FL_WipeMemoryPtr.asFunction<DartFL_WipeMemory>();

  int FLTimestamp_Now() {
    return _FLTimestamp_Now();
  }

  late final _FLTimestamp_NowPtr =
      _lookup<ffi.NativeFunction<NativeFLTimestamp_Now>>('FLTimestamp_Now');
  late final _FLTimestamp_Now =
      _FLTimestamp_NowPtr.asFunction<DartFLTimestamp_Now>();

  FLStringResult FLTimestamp_ToString(
    int timestamp,
    bool asUTC,
  ) {
    return _FLTimestamp_ToString(
      timestamp,
      asUTC,
    );
  }

  late final _FLTimestamp_ToStringPtr =
      _lookup<ffi.NativeFunction<NativeFLTimestamp_ToString>>(
          'FLTimestamp_ToString');
  late final _FLTimestamp_ToString =
      _FLTimestamp_ToStringPtr.asFunction<DartFLTimestamp_ToString>();

  int FLTimestamp_FromString(
    FLString str,
  ) {
    return _FLTimestamp_FromString(
      str,
    );
  }

  late final _FLTimestamp_FromStringPtr =
      _lookup<ffi.NativeFunction<NativeFLTimestamp_FromString>>(
          'FLTimestamp_FromString');
  late final _FLTimestamp_FromString =
      _FLTimestamp_FromStringPtr.asFunction<DartFLTimestamp_FromString>();

  late final ffi.Pointer<FLArray> _kFLEmptyArray =
      _lookup<FLArray>('kFLEmptyArray');

  FLArray get kFLEmptyArray => _kFLEmptyArray.value;

  set kFLEmptyArray(FLArray value) => _kFLEmptyArray.value = value;

  int FLArray_Count(
    FLArray arg0,
  ) {
    return _FLArray_Count(
      arg0,
    );
  }

  late final _FLArray_CountPtr =
      _lookup<ffi.NativeFunction<NativeFLArray_Count>>('FLArray_Count');
  late final _FLArray_Count = _FLArray_CountPtr.asFunction<DartFLArray_Count>();

  bool FLArray_IsEmpty(
    FLArray arg0,
  ) {
    return _FLArray_IsEmpty(
      arg0,
    );
  }

  late final _FLArray_IsEmptyPtr =
      _lookup<ffi.NativeFunction<NativeFLArray_IsEmpty>>('FLArray_IsEmpty');
  late final _FLArray_IsEmpty =
      _FLArray_IsEmptyPtr.asFunction<DartFLArray_IsEmpty>();

  FLMutableArray FLArray_AsMutable(
    FLArray arg0,
  ) {
    return _FLArray_AsMutable(
      arg0,
    );
  }

  late final _FLArray_AsMutablePtr =
      _lookup<ffi.NativeFunction<NativeFLArray_AsMutable>>('FLArray_AsMutable');
  late final _FLArray_AsMutable =
      _FLArray_AsMutablePtr.asFunction<DartFLArray_AsMutable>();

  FLValue FLArray_Get(
    FLArray arg0,
    int index,
  ) {
    return _FLArray_Get(
      arg0,
      index,
    );
  }

  late final _FLArray_GetPtr =
      _lookup<ffi.NativeFunction<NativeFLArray_Get>>('FLArray_Get');
  late final _FLArray_Get = _FLArray_GetPtr.asFunction<DartFLArray_Get>();

  void FLArrayIterator_Begin(
    FLArray arg0,
    ffi.Pointer<FLArrayIterator> arg1,
  ) {
    return _FLArrayIterator_Begin(
      arg0,
      arg1,
    );
  }

  late final _FLArrayIterator_BeginPtr =
      _lookup<ffi.NativeFunction<NativeFLArrayIterator_Begin>>(
          'FLArrayIterator_Begin');
  late final _FLArrayIterator_Begin =
      _FLArrayIterator_BeginPtr.asFunction<DartFLArrayIterator_Begin>();

  FLValue FLArrayIterator_GetValue(
    ffi.Pointer<FLArrayIterator> arg0,
  ) {
    return _FLArrayIterator_GetValue(
      arg0,
    );
  }

  late final _FLArrayIterator_GetValuePtr =
      _lookup<ffi.NativeFunction<NativeFLArrayIterator_GetValue>>(
          'FLArrayIterator_GetValue');
  late final _FLArrayIterator_GetValue =
      _FLArrayIterator_GetValuePtr.asFunction<DartFLArrayIterator_GetValue>();

  FLValue FLArrayIterator_GetValueAt(
    ffi.Pointer<FLArrayIterator> arg0,
    int offset,
  ) {
    return _FLArrayIterator_GetValueAt(
      arg0,
      offset,
    );
  }

  late final _FLArrayIterator_GetValueAtPtr =
      _lookup<ffi.NativeFunction<NativeFLArrayIterator_GetValueAt>>(
          'FLArrayIterator_GetValueAt');
  late final _FLArrayIterator_GetValueAt = _FLArrayIterator_GetValueAtPtr
      .asFunction<DartFLArrayIterator_GetValueAt>();

  int FLArrayIterator_GetCount(
    ffi.Pointer<FLArrayIterator> arg0,
  ) {
    return _FLArrayIterator_GetCount(
      arg0,
    );
  }

  late final _FLArrayIterator_GetCountPtr =
      _lookup<ffi.NativeFunction<NativeFLArrayIterator_GetCount>>(
          'FLArrayIterator_GetCount');
  late final _FLArrayIterator_GetCount =
      _FLArrayIterator_GetCountPtr.asFunction<DartFLArrayIterator_GetCount>();

  bool FLArrayIterator_Next(
    ffi.Pointer<FLArrayIterator> arg0,
  ) {
    return _FLArrayIterator_Next(
      arg0,
    );
  }

  late final _FLArrayIterator_NextPtr =
      _lookup<ffi.NativeFunction<NativeFLArrayIterator_Next>>(
          'FLArrayIterator_Next');
  late final _FLArrayIterator_Next =
      _FLArrayIterator_NextPtr.asFunction<DartFLArrayIterator_Next>();

  late final ffi.Pointer<FLDict> _kFLEmptyDict =
      _lookup<FLDict>('kFLEmptyDict');

  FLDict get kFLEmptyDict => _kFLEmptyDict.value;

  set kFLEmptyDict(FLDict value) => _kFLEmptyDict.value = value;

  int FLDict_Count(
    FLDict arg0,
  ) {
    return _FLDict_Count(
      arg0,
    );
  }

  late final _FLDict_CountPtr =
      _lookup<ffi.NativeFunction<NativeFLDict_Count>>('FLDict_Count');
  late final _FLDict_Count = _FLDict_CountPtr.asFunction<DartFLDict_Count>();

  bool FLDict_IsEmpty(
    FLDict arg0,
  ) {
    return _FLDict_IsEmpty(
      arg0,
    );
  }

  late final _FLDict_IsEmptyPtr =
      _lookup<ffi.NativeFunction<NativeFLDict_IsEmpty>>('FLDict_IsEmpty');
  late final _FLDict_IsEmpty =
      _FLDict_IsEmptyPtr.asFunction<DartFLDict_IsEmpty>();

  FLMutableDict FLDict_AsMutable(
    FLDict arg0,
  ) {
    return _FLDict_AsMutable(
      arg0,
    );
  }

  late final _FLDict_AsMutablePtr =
      _lookup<ffi.NativeFunction<NativeFLDict_AsMutable>>('FLDict_AsMutable');
  late final _FLDict_AsMutable =
      _FLDict_AsMutablePtr.asFunction<DartFLDict_AsMutable>();

  FLValue FLDict_Get(
    FLDict arg0,
    FLSlice keyString,
  ) {
    return _FLDict_Get(
      arg0,
      keyString,
    );
  }

  late final _FLDict_GetPtr =
      _lookup<ffi.NativeFunction<NativeFLDict_Get>>('FLDict_Get');
  late final _FLDict_Get = _FLDict_GetPtr.asFunction<DartFLDict_Get>();

  void FLDictIterator_Begin(
    FLDict arg0,
    ffi.Pointer<FLDictIterator> arg1,
  ) {
    return _FLDictIterator_Begin(
      arg0,
      arg1,
    );
  }

  late final _FLDictIterator_BeginPtr =
      _lookup<ffi.NativeFunction<NativeFLDictIterator_Begin>>(
          'FLDictIterator_Begin');
  late final _FLDictIterator_Begin =
      _FLDictIterator_BeginPtr.asFunction<DartFLDictIterator_Begin>();

  FLValue FLDictIterator_GetKey(
    ffi.Pointer<FLDictIterator> arg0,
  ) {
    return _FLDictIterator_GetKey(
      arg0,
    );
  }

  late final _FLDictIterator_GetKeyPtr =
      _lookup<ffi.NativeFunction<NativeFLDictIterator_GetKey>>(
          'FLDictIterator_GetKey');
  late final _FLDictIterator_GetKey =
      _FLDictIterator_GetKeyPtr.asFunction<DartFLDictIterator_GetKey>();

  FLString FLDictIterator_GetKeyString(
    ffi.Pointer<FLDictIterator> arg0,
  ) {
    return _FLDictIterator_GetKeyString(
      arg0,
    );
  }

  late final _FLDictIterator_GetKeyStringPtr =
      _lookup<ffi.NativeFunction<NativeFLDictIterator_GetKeyString>>(
          'FLDictIterator_GetKeyString');
  late final _FLDictIterator_GetKeyString = _FLDictIterator_GetKeyStringPtr
      .asFunction<DartFLDictIterator_GetKeyString>();

  FLValue FLDictIterator_GetValue(
    ffi.Pointer<FLDictIterator> arg0,
  ) {
    return _FLDictIterator_GetValue(
      arg0,
    );
  }

  late final _FLDictIterator_GetValuePtr =
      _lookup<ffi.NativeFunction<NativeFLDictIterator_GetValue>>(
          'FLDictIterator_GetValue');
  late final _FLDictIterator_GetValue =
      _FLDictIterator_GetValuePtr.asFunction<DartFLDictIterator_GetValue>();

  int FLDictIterator_GetCount(
    ffi.Pointer<FLDictIterator> arg0,
  ) {
    return _FLDictIterator_GetCount(
      arg0,
    );
  }

  late final _FLDictIterator_GetCountPtr =
      _lookup<ffi.NativeFunction<NativeFLDictIterator_GetCount>>(
          'FLDictIterator_GetCount');
  late final _FLDictIterator_GetCount =
      _FLDictIterator_GetCountPtr.asFunction<DartFLDictIterator_GetCount>();

  bool FLDictIterator_Next(
    ffi.Pointer<FLDictIterator> arg0,
  ) {
    return _FLDictIterator_Next(
      arg0,
    );
  }

  late final _FLDictIterator_NextPtr =
      _lookup<ffi.NativeFunction<NativeFLDictIterator_Next>>(
          'FLDictIterator_Next');
  late final _FLDictIterator_Next =
      _FLDictIterator_NextPtr.asFunction<DartFLDictIterator_Next>();

  void FLDictIterator_End(
    ffi.Pointer<FLDictIterator> arg0,
  ) {
    return _FLDictIterator_End(
      arg0,
    );
  }

  late final _FLDictIterator_EndPtr =
      _lookup<ffi.NativeFunction<NativeFLDictIterator_End>>(
          'FLDictIterator_End');
  late final _FLDictIterator_End =
      _FLDictIterator_EndPtr.asFunction<DartFLDictIterator_End>();

  FLDictKey FLDictKey_Init(
    FLSlice string,
  ) {
    return _FLDictKey_Init(
      string,
    );
  }

  late final _FLDictKey_InitPtr =
      _lookup<ffi.NativeFunction<NativeFLDictKey_Init>>('FLDictKey_Init');
  late final _FLDictKey_Init =
      _FLDictKey_InitPtr.asFunction<DartFLDictKey_Init>();

  FLString FLDictKey_GetString(
    ffi.Pointer<FLDictKey> arg0,
  ) {
    return _FLDictKey_GetString(
      arg0,
    );
  }

  late final _FLDictKey_GetStringPtr =
      _lookup<ffi.NativeFunction<NativeFLDictKey_GetString>>(
          'FLDictKey_GetString');
  late final _FLDictKey_GetString =
      _FLDictKey_GetStringPtr.asFunction<DartFLDictKey_GetString>();

  FLValue FLDict_GetWithKey(
    FLDict arg0,
    ffi.Pointer<FLDictKey> arg1,
  ) {
    return _FLDict_GetWithKey(
      arg0,
      arg1,
    );
  }

  late final _FLDict_GetWithKeyPtr =
      _lookup<ffi.NativeFunction<NativeFLDict_GetWithKey>>('FLDict_GetWithKey');
  late final _FLDict_GetWithKey =
      _FLDict_GetWithKeyPtr.asFunction<DartFLDict_GetWithKey>();

  FLDeepIterator FLDeepIterator_New(
    FLValue arg0,
  ) {
    return _FLDeepIterator_New(
      arg0,
    );
  }

  late final _FLDeepIterator_NewPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_New>>(
          'FLDeepIterator_New');
  late final _FLDeepIterator_New =
      _FLDeepIterator_NewPtr.asFunction<DartFLDeepIterator_New>();

  void FLDeepIterator_Free(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_Free(
      arg0,
    );
  }

  late final _FLDeepIterator_FreePtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_Free>>(
          'FLDeepIterator_Free');
  late final _FLDeepIterator_Free =
      _FLDeepIterator_FreePtr.asFunction<DartFLDeepIterator_Free>();

  FLValue FLDeepIterator_GetValue(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_GetValue(
      arg0,
    );
  }

  late final _FLDeepIterator_GetValuePtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_GetValue>>(
          'FLDeepIterator_GetValue');
  late final _FLDeepIterator_GetValue =
      _FLDeepIterator_GetValuePtr.asFunction<DartFLDeepIterator_GetValue>();

  FLValue FLDeepIterator_GetParent(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_GetParent(
      arg0,
    );
  }

  late final _FLDeepIterator_GetParentPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_GetParent>>(
          'FLDeepIterator_GetParent');
  late final _FLDeepIterator_GetParent =
      _FLDeepIterator_GetParentPtr.asFunction<DartFLDeepIterator_GetParent>();

  FLSlice FLDeepIterator_GetKey(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_GetKey(
      arg0,
    );
  }

  late final _FLDeepIterator_GetKeyPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_GetKey>>(
          'FLDeepIterator_GetKey');
  late final _FLDeepIterator_GetKey =
      _FLDeepIterator_GetKeyPtr.asFunction<DartFLDeepIterator_GetKey>();

  int FLDeepIterator_GetIndex(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_GetIndex(
      arg0,
    );
  }

  late final _FLDeepIterator_GetIndexPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_GetIndex>>(
          'FLDeepIterator_GetIndex');
  late final _FLDeepIterator_GetIndex =
      _FLDeepIterator_GetIndexPtr.asFunction<DartFLDeepIterator_GetIndex>();

  int FLDeepIterator_GetDepth(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_GetDepth(
      arg0,
    );
  }

  late final _FLDeepIterator_GetDepthPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_GetDepth>>(
          'FLDeepIterator_GetDepth');
  late final _FLDeepIterator_GetDepth =
      _FLDeepIterator_GetDepthPtr.asFunction<DartFLDeepIterator_GetDepth>();

  void FLDeepIterator_SkipChildren(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_SkipChildren(
      arg0,
    );
  }

  late final _FLDeepIterator_SkipChildrenPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_SkipChildren>>(
          'FLDeepIterator_SkipChildren');
  late final _FLDeepIterator_SkipChildren = _FLDeepIterator_SkipChildrenPtr
      .asFunction<DartFLDeepIterator_SkipChildren>();

  bool FLDeepIterator_Next(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_Next(
      arg0,
    );
  }

  late final _FLDeepIterator_NextPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_Next>>(
          'FLDeepIterator_Next');
  late final _FLDeepIterator_Next =
      _FLDeepIterator_NextPtr.asFunction<DartFLDeepIterator_Next>();

  void FLDeepIterator_GetPath(
    FLDeepIterator arg0,
    ffi.Pointer<ffi.Pointer<FLPathComponent>> outPath,
    ffi.Pointer<ffi.Size> outDepth,
  ) {
    return _FLDeepIterator_GetPath(
      arg0,
      outPath,
      outDepth,
    );
  }

  late final _FLDeepIterator_GetPathPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_GetPath>>(
          'FLDeepIterator_GetPath');
  late final _FLDeepIterator_GetPath =
      _FLDeepIterator_GetPathPtr.asFunction<DartFLDeepIterator_GetPath>();

  FLSliceResult FLDeepIterator_GetPathString(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_GetPathString(
      arg0,
    );
  }

  late final _FLDeepIterator_GetPathStringPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_GetPathString>>(
          'FLDeepIterator_GetPathString');
  late final _FLDeepIterator_GetPathString = _FLDeepIterator_GetPathStringPtr
      .asFunction<DartFLDeepIterator_GetPathString>();

  FLSliceResult FLDeepIterator_GetJSONPointer(
    FLDeepIterator arg0,
  ) {
    return _FLDeepIterator_GetJSONPointer(
      arg0,
    );
  }

  late final _FLDeepIterator_GetJSONPointerPtr =
      _lookup<ffi.NativeFunction<NativeFLDeepIterator_GetJSONPointer>>(
          'FLDeepIterator_GetJSONPointer');
  late final _FLDeepIterator_GetJSONPointer = _FLDeepIterator_GetJSONPointerPtr
      .asFunction<DartFLDeepIterator_GetJSONPointer>();

  FLDoc FLDoc_FromResultData(
    FLSliceResult data,
    int arg1,
    FLSharedKeys arg2,
    FLSlice externData,
  ) {
    return _FLDoc_FromResultData(
      data,
      arg1,
      arg2,
      externData,
    );
  }

  late final _FLDoc_FromResultDataPtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_FromResultData>>(
          'FLDoc_FromResultData');
  late final _FLDoc_FromResultData =
      _FLDoc_FromResultDataPtr.asFunction<DartFLDoc_FromResultData>();

  void FLDoc_Release(
    FLDoc arg0,
  ) {
    return _FLDoc_Release(
      arg0,
    );
  }

  late final _FLDoc_ReleasePtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_Release>>('FLDoc_Release');
  late final _FLDoc_Release = _FLDoc_ReleasePtr.asFunction<DartFLDoc_Release>();

  FLDoc FLDoc_Retain(
    FLDoc arg0,
  ) {
    return _FLDoc_Retain(
      arg0,
    );
  }

  late final _FLDoc_RetainPtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_Retain>>('FLDoc_Retain');
  late final _FLDoc_Retain = _FLDoc_RetainPtr.asFunction<DartFLDoc_Retain>();

  FLSlice FLDoc_GetData(
    FLDoc arg0,
  ) {
    return _FLDoc_GetData(
      arg0,
    );
  }

  late final _FLDoc_GetDataPtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_GetData>>('FLDoc_GetData');
  late final _FLDoc_GetData = _FLDoc_GetDataPtr.asFunction<DartFLDoc_GetData>();

  FLSliceResult FLDoc_GetAllocedData(
    FLDoc arg0,
  ) {
    return _FLDoc_GetAllocedData(
      arg0,
    );
  }

  late final _FLDoc_GetAllocedDataPtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_GetAllocedData>>(
          'FLDoc_GetAllocedData');
  late final _FLDoc_GetAllocedData =
      _FLDoc_GetAllocedDataPtr.asFunction<DartFLDoc_GetAllocedData>();

  FLValue FLDoc_GetRoot(
    FLDoc arg0,
  ) {
    return _FLDoc_GetRoot(
      arg0,
    );
  }

  late final _FLDoc_GetRootPtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_GetRoot>>('FLDoc_GetRoot');
  late final _FLDoc_GetRoot = _FLDoc_GetRootPtr.asFunction<DartFLDoc_GetRoot>();

  FLSharedKeys FLDoc_GetSharedKeys(
    FLDoc arg0,
  ) {
    return _FLDoc_GetSharedKeys(
      arg0,
    );
  }

  late final _FLDoc_GetSharedKeysPtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_GetSharedKeys>>(
          'FLDoc_GetSharedKeys');
  late final _FLDoc_GetSharedKeys =
      _FLDoc_GetSharedKeysPtr.asFunction<DartFLDoc_GetSharedKeys>();

  FLDoc FLValue_FindDoc(
    FLValue arg0,
  ) {
    return _FLValue_FindDoc(
      arg0,
    );
  }

  late final _FLValue_FindDocPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_FindDoc>>('FLValue_FindDoc');
  late final _FLValue_FindDoc =
      _FLValue_FindDocPtr.asFunction<DartFLValue_FindDoc>();

  bool FLDoc_SetAssociated(
    FLDoc doc,
    ffi.Pointer<ffi.Void> pointer,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _FLDoc_SetAssociated(
      doc,
      pointer,
      type,
    );
  }

  late final _FLDoc_SetAssociatedPtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_SetAssociated>>(
          'FLDoc_SetAssociated');
  late final _FLDoc_SetAssociated =
      _FLDoc_SetAssociatedPtr.asFunction<DartFLDoc_SetAssociated>();

  ffi.Pointer<ffi.Void> FLDoc_GetAssociated(
    FLDoc doc,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _FLDoc_GetAssociated(
      doc,
      type,
    );
  }

  late final _FLDoc_GetAssociatedPtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_GetAssociated>>(
          'FLDoc_GetAssociated');
  late final _FLDoc_GetAssociated =
      _FLDoc_GetAssociatedPtr.asFunction<DartFLDoc_GetAssociated>();

  FLEncoder FLEncoder_New() {
    return _FLEncoder_New();
  }

  late final _FLEncoder_NewPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_New>>('FLEncoder_New');
  late final _FLEncoder_New = _FLEncoder_NewPtr.asFunction<DartFLEncoder_New>();

  FLEncoder FLEncoder_NewWithOptions(
    int format,
    int reserveSize,
    bool uniqueStrings,
  ) {
    return _FLEncoder_NewWithOptions(
      format,
      reserveSize,
      uniqueStrings,
    );
  }

  late final _FLEncoder_NewWithOptionsPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_NewWithOptions>>(
          'FLEncoder_NewWithOptions');
  late final _FLEncoder_NewWithOptions =
      _FLEncoder_NewWithOptionsPtr.asFunction<DartFLEncoder_NewWithOptions>();

  FLEncoder FLEncoder_NewWritingToFile(
    ffi.Pointer<FILE> arg0,
    bool uniqueStrings,
  ) {
    return _FLEncoder_NewWritingToFile(
      arg0,
      uniqueStrings,
    );
  }

  late final _FLEncoder_NewWritingToFilePtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_NewWritingToFile>>(
          'FLEncoder_NewWritingToFile');
  late final _FLEncoder_NewWritingToFile = _FLEncoder_NewWritingToFilePtr
      .asFunction<DartFLEncoder_NewWritingToFile>();

  void FLEncoder_Free(
    FLEncoder arg0,
  ) {
    return _FLEncoder_Free(
      arg0,
    );
  }

  late final _FLEncoder_FreePtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_Free>>('FLEncoder_Free');
  late final _FLEncoder_Free =
      _FLEncoder_FreePtr.asFunction<DartFLEncoder_Free>();

  void FLEncoder_SetSharedKeys(
    FLEncoder arg0,
    FLSharedKeys arg1,
  ) {
    return _FLEncoder_SetSharedKeys(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_SetSharedKeysPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_SetSharedKeys>>(
          'FLEncoder_SetSharedKeys');
  late final _FLEncoder_SetSharedKeys =
      _FLEncoder_SetSharedKeysPtr.asFunction<DartFLEncoder_SetSharedKeys>();

  void FLEncoder_SetExtraInfo(
    FLEncoder arg0,
    ffi.Pointer<ffi.Void> info,
  ) {
    return _FLEncoder_SetExtraInfo(
      arg0,
      info,
    );
  }

  late final _FLEncoder_SetExtraInfoPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_SetExtraInfo>>(
          'FLEncoder_SetExtraInfo');
  late final _FLEncoder_SetExtraInfo =
      _FLEncoder_SetExtraInfoPtr.asFunction<DartFLEncoder_SetExtraInfo>();

  ffi.Pointer<ffi.Void> FLEncoder_GetExtraInfo(
    FLEncoder arg0,
  ) {
    return _FLEncoder_GetExtraInfo(
      arg0,
    );
  }

  late final _FLEncoder_GetExtraInfoPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_GetExtraInfo>>(
          'FLEncoder_GetExtraInfo');
  late final _FLEncoder_GetExtraInfo =
      _FLEncoder_GetExtraInfoPtr.asFunction<DartFLEncoder_GetExtraInfo>();

  void FLEncoder_Reset(
    FLEncoder arg0,
  ) {
    return _FLEncoder_Reset(
      arg0,
    );
  }

  late final _FLEncoder_ResetPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_Reset>>('FLEncoder_Reset');
  late final _FLEncoder_Reset =
      _FLEncoder_ResetPtr.asFunction<DartFLEncoder_Reset>();

  int FLEncoder_BytesWritten(
    FLEncoder arg0,
  ) {
    return _FLEncoder_BytesWritten(
      arg0,
    );
  }

  late final _FLEncoder_BytesWrittenPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_BytesWritten>>(
          'FLEncoder_BytesWritten');
  late final _FLEncoder_BytesWritten =
      _FLEncoder_BytesWrittenPtr.asFunction<DartFLEncoder_BytesWritten>();

  bool FLEncoder_WriteNull(
    FLEncoder arg0,
  ) {
    return _FLEncoder_WriteNull(
      arg0,
    );
  }

  late final _FLEncoder_WriteNullPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteNull>>(
          'FLEncoder_WriteNull');
  late final _FLEncoder_WriteNull =
      _FLEncoder_WriteNullPtr.asFunction<DartFLEncoder_WriteNull>();

  bool FLEncoder_WriteUndefined(
    FLEncoder arg0,
  ) {
    return _FLEncoder_WriteUndefined(
      arg0,
    );
  }

  late final _FLEncoder_WriteUndefinedPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteUndefined>>(
          'FLEncoder_WriteUndefined');
  late final _FLEncoder_WriteUndefined =
      _FLEncoder_WriteUndefinedPtr.asFunction<DartFLEncoder_WriteUndefined>();

  bool FLEncoder_WriteBool(
    FLEncoder arg0,
    bool arg1,
  ) {
    return _FLEncoder_WriteBool(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteBoolPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteBool>>(
          'FLEncoder_WriteBool');
  late final _FLEncoder_WriteBool =
      _FLEncoder_WriteBoolPtr.asFunction<DartFLEncoder_WriteBool>();

  bool FLEncoder_WriteInt(
    FLEncoder arg0,
    int arg1,
  ) {
    return _FLEncoder_WriteInt(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteIntPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteInt>>(
          'FLEncoder_WriteInt');
  late final _FLEncoder_WriteInt =
      _FLEncoder_WriteIntPtr.asFunction<DartFLEncoder_WriteInt>();

  bool FLEncoder_WriteUInt(
    FLEncoder arg0,
    int arg1,
  ) {
    return _FLEncoder_WriteUInt(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteUIntPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteUInt>>(
          'FLEncoder_WriteUInt');
  late final _FLEncoder_WriteUInt =
      _FLEncoder_WriteUIntPtr.asFunction<DartFLEncoder_WriteUInt>();

  bool FLEncoder_WriteFloat(
    FLEncoder arg0,
    double arg1,
  ) {
    return _FLEncoder_WriteFloat(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteFloatPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteFloat>>(
          'FLEncoder_WriteFloat');
  late final _FLEncoder_WriteFloat =
      _FLEncoder_WriteFloatPtr.asFunction<DartFLEncoder_WriteFloat>();

  bool FLEncoder_WriteDouble(
    FLEncoder arg0,
    double arg1,
  ) {
    return _FLEncoder_WriteDouble(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteDoublePtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteDouble>>(
          'FLEncoder_WriteDouble');
  late final _FLEncoder_WriteDouble =
      _FLEncoder_WriteDoublePtr.asFunction<DartFLEncoder_WriteDouble>();

  bool FLEncoder_WriteString(
    FLEncoder arg0,
    FLString arg1,
  ) {
    return _FLEncoder_WriteString(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteStringPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteString>>(
          'FLEncoder_WriteString');
  late final _FLEncoder_WriteString =
      _FLEncoder_WriteStringPtr.asFunction<DartFLEncoder_WriteString>();

  bool FLEncoder_WriteDateString(
    FLEncoder encoder,
    int ts,
    bool asUTC,
  ) {
    return _FLEncoder_WriteDateString(
      encoder,
      ts,
      asUTC,
    );
  }

  late final _FLEncoder_WriteDateStringPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteDateString>>(
          'FLEncoder_WriteDateString');
  late final _FLEncoder_WriteDateString =
      _FLEncoder_WriteDateStringPtr.asFunction<DartFLEncoder_WriteDateString>();

  bool FLEncoder_WriteData(
    FLEncoder arg0,
    FLSlice arg1,
  ) {
    return _FLEncoder_WriteData(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteDataPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteData>>(
          'FLEncoder_WriteData');
  late final _FLEncoder_WriteData =
      _FLEncoder_WriteDataPtr.asFunction<DartFLEncoder_WriteData>();

  bool FLEncoder_WriteValue(
    FLEncoder arg0,
    FLValue arg1,
  ) {
    return _FLEncoder_WriteValue(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteValuePtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteValue>>(
          'FLEncoder_WriteValue');
  late final _FLEncoder_WriteValue =
      _FLEncoder_WriteValuePtr.asFunction<DartFLEncoder_WriteValue>();

  bool FLEncoder_BeginArray(
    FLEncoder arg0,
    int reserveCount,
  ) {
    return _FLEncoder_BeginArray(
      arg0,
      reserveCount,
    );
  }

  late final _FLEncoder_BeginArrayPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_BeginArray>>(
          'FLEncoder_BeginArray');
  late final _FLEncoder_BeginArray =
      _FLEncoder_BeginArrayPtr.asFunction<DartFLEncoder_BeginArray>();

  bool FLEncoder_EndArray(
    FLEncoder arg0,
  ) {
    return _FLEncoder_EndArray(
      arg0,
    );
  }

  late final _FLEncoder_EndArrayPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_EndArray>>(
          'FLEncoder_EndArray');
  late final _FLEncoder_EndArray =
      _FLEncoder_EndArrayPtr.asFunction<DartFLEncoder_EndArray>();

  bool FLEncoder_BeginDict(
    FLEncoder arg0,
    int reserveCount,
  ) {
    return _FLEncoder_BeginDict(
      arg0,
      reserveCount,
    );
  }

  late final _FLEncoder_BeginDictPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_BeginDict>>(
          'FLEncoder_BeginDict');
  late final _FLEncoder_BeginDict =
      _FLEncoder_BeginDictPtr.asFunction<DartFLEncoder_BeginDict>();

  bool FLEncoder_WriteKey(
    FLEncoder arg0,
    FLString arg1,
  ) {
    return _FLEncoder_WriteKey(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteKeyPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteKey>>(
          'FLEncoder_WriteKey');
  late final _FLEncoder_WriteKey =
      _FLEncoder_WriteKeyPtr.asFunction<DartFLEncoder_WriteKey>();

  bool FLEncoder_WriteKeyValue(
    FLEncoder arg0,
    FLValue arg1,
  ) {
    return _FLEncoder_WriteKeyValue(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteKeyValuePtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteKeyValue>>(
          'FLEncoder_WriteKeyValue');
  late final _FLEncoder_WriteKeyValue =
      _FLEncoder_WriteKeyValuePtr.asFunction<DartFLEncoder_WriteKeyValue>();

  bool FLEncoder_EndDict(
    FLEncoder arg0,
  ) {
    return _FLEncoder_EndDict(
      arg0,
    );
  }

  late final _FLEncoder_EndDictPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_EndDict>>('FLEncoder_EndDict');
  late final _FLEncoder_EndDict =
      _FLEncoder_EndDictPtr.asFunction<DartFLEncoder_EndDict>();

  bool FLEncoder_WriteRaw(
    FLEncoder arg0,
    FLSlice arg1,
  ) {
    return _FLEncoder_WriteRaw(
      arg0,
      arg1,
    );
  }

  late final _FLEncoder_WriteRawPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteRaw>>(
          'FLEncoder_WriteRaw');
  late final _FLEncoder_WriteRaw =
      _FLEncoder_WriteRawPtr.asFunction<DartFLEncoder_WriteRaw>();

  FLDoc FLEncoder_FinishDoc(
    FLEncoder arg0,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLEncoder_FinishDoc(
      arg0,
      outError,
    );
  }

  late final _FLEncoder_FinishDocPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_FinishDoc>>(
          'FLEncoder_FinishDoc');
  late final _FLEncoder_FinishDoc =
      _FLEncoder_FinishDocPtr.asFunction<DartFLEncoder_FinishDoc>();

  FLSliceResult FLEncoder_Finish(
    FLEncoder arg0,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLEncoder_Finish(
      arg0,
      outError,
    );
  }

  late final _FLEncoder_FinishPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_Finish>>('FLEncoder_Finish');
  late final _FLEncoder_Finish =
      _FLEncoder_FinishPtr.asFunction<DartFLEncoder_Finish>();

  int FLEncoder_GetError(
    FLEncoder arg0,
  ) {
    return _FLEncoder_GetError(
      arg0,
    );
  }

  late final _FLEncoder_GetErrorPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_GetError>>(
          'FLEncoder_GetError');
  late final _FLEncoder_GetError =
      _FLEncoder_GetErrorPtr.asFunction<DartFLEncoder_GetError>();

  ffi.Pointer<ffi.Char> FLEncoder_GetErrorMessage(
    FLEncoder arg0,
  ) {
    return _FLEncoder_GetErrorMessage(
      arg0,
    );
  }

  late final _FLEncoder_GetErrorMessagePtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_GetErrorMessage>>(
          'FLEncoder_GetErrorMessage');
  late final _FLEncoder_GetErrorMessage =
      _FLEncoder_GetErrorMessagePtr.asFunction<DartFLEncoder_GetErrorMessage>();

  FLStringResult FLValue_ToJSON(
    FLValue arg0,
  ) {
    return _FLValue_ToJSON(
      arg0,
    );
  }

  late final _FLValue_ToJSONPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_ToJSON>>('FLValue_ToJSON');
  late final _FLValue_ToJSON =
      _FLValue_ToJSONPtr.asFunction<DartFLValue_ToJSON>();

  FLStringResult FLValue_ToJSON5(
    FLValue arg0,
  ) {
    return _FLValue_ToJSON5(
      arg0,
    );
  }

  late final _FLValue_ToJSON5Ptr =
      _lookup<ffi.NativeFunction<NativeFLValue_ToJSON5>>('FLValue_ToJSON5');
  late final _FLValue_ToJSON5 =
      _FLValue_ToJSON5Ptr.asFunction<DartFLValue_ToJSON5>();

  FLStringResult FLValue_ToJSONX(
    FLValue v,
    bool json5,
    bool canonicalForm,
  ) {
    return _FLValue_ToJSONX(
      v,
      json5,
      canonicalForm,
    );
  }

  late final _FLValue_ToJSONXPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_ToJSONX>>('FLValue_ToJSONX');
  late final _FLValue_ToJSONX =
      _FLValue_ToJSONXPtr.asFunction<DartFLValue_ToJSONX>();

  FLDoc FLDoc_FromJSON(
    FLSlice json,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLDoc_FromJSON(
      json,
      outError,
    );
  }

  late final _FLDoc_FromJSONPtr =
      _lookup<ffi.NativeFunction<NativeFLDoc_FromJSON>>('FLDoc_FromJSON');
  late final _FLDoc_FromJSON =
      _FLDoc_FromJSONPtr.asFunction<DartFLDoc_FromJSON>();

  FLMutableArray FLMutableArray_NewFromJSON(
    FLString json,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLMutableArray_NewFromJSON(
      json,
      outError,
    );
  }

  late final _FLMutableArray_NewFromJSONPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_NewFromJSON>>(
          'FLMutableArray_NewFromJSON');
  late final _FLMutableArray_NewFromJSON = _FLMutableArray_NewFromJSONPtr
      .asFunction<DartFLMutableArray_NewFromJSON>();

  FLMutableDict FLMutableDict_NewFromJSON(
    FLString json,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLMutableDict_NewFromJSON(
      json,
      outError,
    );
  }

  late final _FLMutableDict_NewFromJSONPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_NewFromJSON>>(
          'FLMutableDict_NewFromJSON');
  late final _FLMutableDict_NewFromJSON =
      _FLMutableDict_NewFromJSONPtr.asFunction<DartFLMutableDict_NewFromJSON>();

  bool FLEncoder_ConvertJSON(
    FLEncoder arg0,
    FLSlice json,
  ) {
    return _FLEncoder_ConvertJSON(
      arg0,
      json,
    );
  }

  late final _FLEncoder_ConvertJSONPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_ConvertJSON>>(
          'FLEncoder_ConvertJSON');
  late final _FLEncoder_ConvertJSON =
      _FLEncoder_ConvertJSONPtr.asFunction<DartFLEncoder_ConvertJSON>();

  FLKeyPath FLKeyPath_New(
    FLSlice specifier,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLKeyPath_New(
      specifier,
      outError,
    );
  }

  late final _FLKeyPath_NewPtr =
      _lookup<ffi.NativeFunction<NativeFLKeyPath_New>>('FLKeyPath_New');
  late final _FLKeyPath_New = _FLKeyPath_NewPtr.asFunction<DartFLKeyPath_New>();

  void FLKeyPath_Free(
    FLKeyPath arg0,
  ) {
    return _FLKeyPath_Free(
      arg0,
    );
  }

  late final _FLKeyPath_FreePtr =
      _lookup<ffi.NativeFunction<NativeFLKeyPath_Free>>('FLKeyPath_Free');
  late final _FLKeyPath_Free =
      _FLKeyPath_FreePtr.asFunction<DartFLKeyPath_Free>();

  FLValue FLKeyPath_Eval(
    FLKeyPath arg0,
    FLValue root,
  ) {
    return _FLKeyPath_Eval(
      arg0,
      root,
    );
  }

  late final _FLKeyPath_EvalPtr =
      _lookup<ffi.NativeFunction<NativeFLKeyPath_Eval>>('FLKeyPath_Eval');
  late final _FLKeyPath_Eval =
      _FLKeyPath_EvalPtr.asFunction<DartFLKeyPath_Eval>();

  FLValue FLKeyPath_EvalOnce(
    FLSlice specifier,
    FLValue root,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLKeyPath_EvalOnce(
      specifier,
      root,
      outError,
    );
  }

  late final _FLKeyPath_EvalOncePtr =
      _lookup<ffi.NativeFunction<NativeFLKeyPath_EvalOnce>>(
          'FLKeyPath_EvalOnce');
  late final _FLKeyPath_EvalOnce =
      _FLKeyPath_EvalOncePtr.asFunction<DartFLKeyPath_EvalOnce>();

  FLStringResult FLKeyPath_ToString(
    FLKeyPath path,
  ) {
    return _FLKeyPath_ToString(
      path,
    );
  }

  late final _FLKeyPath_ToStringPtr =
      _lookup<ffi.NativeFunction<NativeFLKeyPath_ToString>>(
          'FLKeyPath_ToString');
  late final _FLKeyPath_ToString =
      _FLKeyPath_ToStringPtr.asFunction<DartFLKeyPath_ToString>();

  bool FLKeyPath_Equals(
    FLKeyPath path1,
    FLKeyPath path2,
  ) {
    return _FLKeyPath_Equals(
      path1,
      path2,
    );
  }

  late final _FLKeyPath_EqualsPtr =
      _lookup<ffi.NativeFunction<NativeFLKeyPath_Equals>>('FLKeyPath_Equals');
  late final _FLKeyPath_Equals =
      _FLKeyPath_EqualsPtr.asFunction<DartFLKeyPath_Equals>();

  bool FLKeyPath_GetElement(
    FLKeyPath arg0,
    int i,
    ffi.Pointer<FLSlice> outDictKey,
    ffi.Pointer<ffi.Int32> outArrayIndex,
  ) {
    return _FLKeyPath_GetElement(
      arg0,
      i,
      outDictKey,
      outArrayIndex,
    );
  }

  late final _FLKeyPath_GetElementPtr =
      _lookup<ffi.NativeFunction<NativeFLKeyPath_GetElement>>(
          'FLKeyPath_GetElement');
  late final _FLKeyPath_GetElement =
      _FLKeyPath_GetElementPtr.asFunction<DartFLKeyPath_GetElement>();

  late final ffi.Pointer<FLValue> _kFLNullValue =
      _lookup<FLValue>('kFLNullValue');

  FLValue get kFLNullValue => _kFLNullValue.value;

  set kFLNullValue(FLValue value) => _kFLNullValue.value = value;

  late final ffi.Pointer<FLValue> _kFLUndefinedValue =
      _lookup<FLValue>('kFLUndefinedValue');

  FLValue get kFLUndefinedValue => _kFLUndefinedValue.value;

  set kFLUndefinedValue(FLValue value) => _kFLUndefinedValue.value = value;

  int FLValue_GetType(
    FLValue arg0,
  ) {
    return _FLValue_GetType(
      arg0,
    );
  }

  late final _FLValue_GetTypePtr =
      _lookup<ffi.NativeFunction<NativeFLValue_GetType>>('FLValue_GetType');
  late final _FLValue_GetType =
      _FLValue_GetTypePtr.asFunction<DartFLValue_GetType>();

  bool FLValue_IsInteger(
    FLValue arg0,
  ) {
    return _FLValue_IsInteger(
      arg0,
    );
  }

  late final _FLValue_IsIntegerPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_IsInteger>>('FLValue_IsInteger');
  late final _FLValue_IsInteger =
      _FLValue_IsIntegerPtr.asFunction<DartFLValue_IsInteger>();

  bool FLValue_IsUnsigned(
    FLValue arg0,
  ) {
    return _FLValue_IsUnsigned(
      arg0,
    );
  }

  late final _FLValue_IsUnsignedPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_IsUnsigned>>(
          'FLValue_IsUnsigned');
  late final _FLValue_IsUnsigned =
      _FLValue_IsUnsignedPtr.asFunction<DartFLValue_IsUnsigned>();

  bool FLValue_IsDouble(
    FLValue arg0,
  ) {
    return _FLValue_IsDouble(
      arg0,
    );
  }

  late final _FLValue_IsDoublePtr =
      _lookup<ffi.NativeFunction<NativeFLValue_IsDouble>>('FLValue_IsDouble');
  late final _FLValue_IsDouble =
      _FLValue_IsDoublePtr.asFunction<DartFLValue_IsDouble>();

  bool FLValue_AsBool(
    FLValue arg0,
  ) {
    return _FLValue_AsBool(
      arg0,
    );
  }

  late final _FLValue_AsBoolPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsBool>>('FLValue_AsBool');
  late final _FLValue_AsBool =
      _FLValue_AsBoolPtr.asFunction<DartFLValue_AsBool>();

  int FLValue_AsInt(
    FLValue arg0,
  ) {
    return _FLValue_AsInt(
      arg0,
    );
  }

  late final _FLValue_AsIntPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsInt>>('FLValue_AsInt');
  late final _FLValue_AsInt = _FLValue_AsIntPtr.asFunction<DartFLValue_AsInt>();

  int FLValue_AsUnsigned(
    FLValue arg0,
  ) {
    return _FLValue_AsUnsigned(
      arg0,
    );
  }

  late final _FLValue_AsUnsignedPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsUnsigned>>(
          'FLValue_AsUnsigned');
  late final _FLValue_AsUnsigned =
      _FLValue_AsUnsignedPtr.asFunction<DartFLValue_AsUnsigned>();

  double FLValue_AsFloat(
    FLValue arg0,
  ) {
    return _FLValue_AsFloat(
      arg0,
    );
  }

  late final _FLValue_AsFloatPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsFloat>>('FLValue_AsFloat');
  late final _FLValue_AsFloat =
      _FLValue_AsFloatPtr.asFunction<DartFLValue_AsFloat>();

  double FLValue_AsDouble(
    FLValue arg0,
  ) {
    return _FLValue_AsDouble(
      arg0,
    );
  }

  late final _FLValue_AsDoublePtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsDouble>>('FLValue_AsDouble');
  late final _FLValue_AsDouble =
      _FLValue_AsDoublePtr.asFunction<DartFLValue_AsDouble>();

  FLString FLValue_AsString(
    FLValue arg0,
  ) {
    return _FLValue_AsString(
      arg0,
    );
  }

  late final _FLValue_AsStringPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsString>>('FLValue_AsString');
  late final _FLValue_AsString =
      _FLValue_AsStringPtr.asFunction<DartFLValue_AsString>();

  int FLValue_AsTimestamp(
    FLValue arg0,
  ) {
    return _FLValue_AsTimestamp(
      arg0,
    );
  }

  late final _FLValue_AsTimestampPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsTimestamp>>(
          'FLValue_AsTimestamp');
  late final _FLValue_AsTimestamp =
      _FLValue_AsTimestampPtr.asFunction<DartFLValue_AsTimestamp>();

  FLSlice FLValue_AsData(
    FLValue arg0,
  ) {
    return _FLValue_AsData(
      arg0,
    );
  }

  late final _FLValue_AsDataPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsData>>('FLValue_AsData');
  late final _FLValue_AsData =
      _FLValue_AsDataPtr.asFunction<DartFLValue_AsData>();

  FLArray FLValue_AsArray(
    FLValue arg0,
  ) {
    return _FLValue_AsArray(
      arg0,
    );
  }

  late final _FLValue_AsArrayPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsArray>>('FLValue_AsArray');
  late final _FLValue_AsArray =
      _FLValue_AsArrayPtr.asFunction<DartFLValue_AsArray>();

  FLDict FLValue_AsDict(
    FLValue arg0,
  ) {
    return _FLValue_AsDict(
      arg0,
    );
  }

  late final _FLValue_AsDictPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_AsDict>>('FLValue_AsDict');
  late final _FLValue_AsDict =
      _FLValue_AsDictPtr.asFunction<DartFLValue_AsDict>();

  FLStringResult FLValue_ToString(
    FLValue arg0,
  ) {
    return _FLValue_ToString(
      arg0,
    );
  }

  late final _FLValue_ToStringPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_ToString>>('FLValue_ToString');
  late final _FLValue_ToString =
      _FLValue_ToStringPtr.asFunction<DartFLValue_ToString>();

  bool FLValue_IsEqual(
    FLValue v1,
    FLValue v2,
  ) {
    return _FLValue_IsEqual(
      v1,
      v2,
    );
  }

  late final _FLValue_IsEqualPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_IsEqual>>('FLValue_IsEqual');
  late final _FLValue_IsEqual =
      _FLValue_IsEqualPtr.asFunction<DartFLValue_IsEqual>();

  bool FLValue_IsMutable(
    FLValue arg0,
  ) {
    return _FLValue_IsMutable(
      arg0,
    );
  }

  late final _FLValue_IsMutablePtr =
      _lookup<ffi.NativeFunction<NativeFLValue_IsMutable>>('FLValue_IsMutable');
  late final _FLValue_IsMutable =
      _FLValue_IsMutablePtr.asFunction<DartFLValue_IsMutable>();

  FLValue FLValue_Retain(
    FLValue arg0,
  ) {
    return _FLValue_Retain(
      arg0,
    );
  }

  late final _FLValue_RetainPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_Retain>>('FLValue_Retain');
  late final _FLValue_Retain =
      _FLValue_RetainPtr.asFunction<DartFLValue_Retain>();

  void FLValue_Release(
    FLValue arg0,
  ) {
    return _FLValue_Release(
      arg0,
    );
  }

  late final _FLValue_ReleasePtr =
      _lookup<ffi.NativeFunction<NativeFLValue_Release>>('FLValue_Release');
  late final _FLValue_Release =
      _FLValue_ReleasePtr.asFunction<DartFLValue_Release>();

  FLMutableArray FLArray_MutableCopy(
    FLArray arg0,
    int arg1,
  ) {
    return _FLArray_MutableCopy(
      arg0,
      arg1,
    );
  }

  late final _FLArray_MutableCopyPtr =
      _lookup<ffi.NativeFunction<NativeFLArray_MutableCopy>>(
          'FLArray_MutableCopy');
  late final _FLArray_MutableCopy =
      _FLArray_MutableCopyPtr.asFunction<DartFLArray_MutableCopy>();

  FLMutableArray FLMutableArray_New() {
    return _FLMutableArray_New();
  }

  late final _FLMutableArray_NewPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_New>>(
          'FLMutableArray_New');
  late final _FLMutableArray_New =
      _FLMutableArray_NewPtr.asFunction<DartFLMutableArray_New>();

  FLArray FLMutableArray_GetSource(
    FLMutableArray arg0,
  ) {
    return _FLMutableArray_GetSource(
      arg0,
    );
  }

  late final _FLMutableArray_GetSourcePtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_GetSource>>(
          'FLMutableArray_GetSource');
  late final _FLMutableArray_GetSource =
      _FLMutableArray_GetSourcePtr.asFunction<DartFLMutableArray_GetSource>();

  bool FLMutableArray_IsChanged(
    FLMutableArray arg0,
  ) {
    return _FLMutableArray_IsChanged(
      arg0,
    );
  }

  late final _FLMutableArray_IsChangedPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_IsChanged>>(
          'FLMutableArray_IsChanged');
  late final _FLMutableArray_IsChanged =
      _FLMutableArray_IsChangedPtr.asFunction<DartFLMutableArray_IsChanged>();

  void FLMutableArray_SetChanged(
    FLMutableArray arg0,
    bool changed,
  ) {
    return _FLMutableArray_SetChanged(
      arg0,
      changed,
    );
  }

  late final _FLMutableArray_SetChangedPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_SetChanged>>(
          'FLMutableArray_SetChanged');
  late final _FLMutableArray_SetChanged =
      _FLMutableArray_SetChangedPtr.asFunction<DartFLMutableArray_SetChanged>();

  void FLMutableArray_Insert(
    FLMutableArray array,
    int firstIndex,
    int count,
  ) {
    return _FLMutableArray_Insert(
      array,
      firstIndex,
      count,
    );
  }

  late final _FLMutableArray_InsertPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_Insert>>(
          'FLMutableArray_Insert');
  late final _FLMutableArray_Insert =
      _FLMutableArray_InsertPtr.asFunction<DartFLMutableArray_Insert>();

  void FLMutableArray_Remove(
    FLMutableArray array,
    int firstIndex,
    int count,
  ) {
    return _FLMutableArray_Remove(
      array,
      firstIndex,
      count,
    );
  }

  late final _FLMutableArray_RemovePtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_Remove>>(
          'FLMutableArray_Remove');
  late final _FLMutableArray_Remove =
      _FLMutableArray_RemovePtr.asFunction<DartFLMutableArray_Remove>();

  void FLMutableArray_Resize(
    FLMutableArray array,
    int size,
  ) {
    return _FLMutableArray_Resize(
      array,
      size,
    );
  }

  late final _FLMutableArray_ResizePtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_Resize>>(
          'FLMutableArray_Resize');
  late final _FLMutableArray_Resize =
      _FLMutableArray_ResizePtr.asFunction<DartFLMutableArray_Resize>();

  FLMutableArray FLMutableArray_GetMutableArray(
    FLMutableArray arg0,
    int index,
  ) {
    return _FLMutableArray_GetMutableArray(
      arg0,
      index,
    );
  }

  late final _FLMutableArray_GetMutableArrayPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_GetMutableArray>>(
          'FLMutableArray_GetMutableArray');
  late final _FLMutableArray_GetMutableArray =
      _FLMutableArray_GetMutableArrayPtr.asFunction<
          DartFLMutableArray_GetMutableArray>();

  FLMutableDict FLMutableArray_GetMutableDict(
    FLMutableArray arg0,
    int index,
  ) {
    return _FLMutableArray_GetMutableDict(
      arg0,
      index,
    );
  }

  late final _FLMutableArray_GetMutableDictPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_GetMutableDict>>(
          'FLMutableArray_GetMutableDict');
  late final _FLMutableArray_GetMutableDict = _FLMutableArray_GetMutableDictPtr
      .asFunction<DartFLMutableArray_GetMutableDict>();

  FLMutableDict FLDict_MutableCopy(
    FLDict source,
    int arg1,
  ) {
    return _FLDict_MutableCopy(
      source,
      arg1,
    );
  }

  late final _FLDict_MutableCopyPtr =
      _lookup<ffi.NativeFunction<NativeFLDict_MutableCopy>>(
          'FLDict_MutableCopy');
  late final _FLDict_MutableCopy =
      _FLDict_MutableCopyPtr.asFunction<DartFLDict_MutableCopy>();

  FLMutableDict FLMutableDict_New() {
    return _FLMutableDict_New();
  }

  late final _FLMutableDict_NewPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_New>>('FLMutableDict_New');
  late final _FLMutableDict_New =
      _FLMutableDict_NewPtr.asFunction<DartFLMutableDict_New>();

  FLDict FLMutableDict_GetSource(
    FLMutableDict arg0,
  ) {
    return _FLMutableDict_GetSource(
      arg0,
    );
  }

  late final _FLMutableDict_GetSourcePtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_GetSource>>(
          'FLMutableDict_GetSource');
  late final _FLMutableDict_GetSource =
      _FLMutableDict_GetSourcePtr.asFunction<DartFLMutableDict_GetSource>();

  bool FLMutableDict_IsChanged(
    FLMutableDict arg0,
  ) {
    return _FLMutableDict_IsChanged(
      arg0,
    );
  }

  late final _FLMutableDict_IsChangedPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_IsChanged>>(
          'FLMutableDict_IsChanged');
  late final _FLMutableDict_IsChanged =
      _FLMutableDict_IsChangedPtr.asFunction<DartFLMutableDict_IsChanged>();

  void FLMutableDict_SetChanged(
    FLMutableDict arg0,
    bool arg1,
  ) {
    return _FLMutableDict_SetChanged(
      arg0,
      arg1,
    );
  }

  late final _FLMutableDict_SetChangedPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_SetChanged>>(
          'FLMutableDict_SetChanged');
  late final _FLMutableDict_SetChanged =
      _FLMutableDict_SetChangedPtr.asFunction<DartFLMutableDict_SetChanged>();

  void FLMutableDict_Remove(
    FLMutableDict arg0,
    FLString key,
  ) {
    return _FLMutableDict_Remove(
      arg0,
      key,
    );
  }

  late final _FLMutableDict_RemovePtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_Remove>>(
          'FLMutableDict_Remove');
  late final _FLMutableDict_Remove =
      _FLMutableDict_RemovePtr.asFunction<DartFLMutableDict_Remove>();

  void FLMutableDict_RemoveAll(
    FLMutableDict arg0,
  ) {
    return _FLMutableDict_RemoveAll(
      arg0,
    );
  }

  late final _FLMutableDict_RemoveAllPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_RemoveAll>>(
          'FLMutableDict_RemoveAll');
  late final _FLMutableDict_RemoveAll =
      _FLMutableDict_RemoveAllPtr.asFunction<DartFLMutableDict_RemoveAll>();

  FLMutableArray FLMutableDict_GetMutableArray(
    FLMutableDict arg0,
    FLString key,
  ) {
    return _FLMutableDict_GetMutableArray(
      arg0,
      key,
    );
  }

  late final _FLMutableDict_GetMutableArrayPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_GetMutableArray>>(
          'FLMutableDict_GetMutableArray');
  late final _FLMutableDict_GetMutableArray = _FLMutableDict_GetMutableArrayPtr
      .asFunction<DartFLMutableDict_GetMutableArray>();

  FLMutableDict FLMutableDict_GetMutableDict(
    FLMutableDict arg0,
    FLString key,
  ) {
    return _FLMutableDict_GetMutableDict(
      arg0,
      key,
    );
  }

  late final _FLMutableDict_GetMutableDictPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_GetMutableDict>>(
          'FLMutableDict_GetMutableDict');
  late final _FLMutableDict_GetMutableDict = _FLMutableDict_GetMutableDictPtr
      .asFunction<DartFLMutableDict_GetMutableDict>();

  FLValue FLValue_NewString(
    FLString arg0,
  ) {
    return _FLValue_NewString(
      arg0,
    );
  }

  late final _FLValue_NewStringPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_NewString>>('FLValue_NewString');
  late final _FLValue_NewString =
      _FLValue_NewStringPtr.asFunction<DartFLValue_NewString>();

  FLValue FLValue_NewData(
    FLSlice arg0,
  ) {
    return _FLValue_NewData(
      arg0,
    );
  }

  late final _FLValue_NewDataPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_NewData>>('FLValue_NewData');
  late final _FLValue_NewData =
      _FLValue_NewDataPtr.asFunction<DartFLValue_NewData>();

  FLSlot FLMutableArray_Set(
    FLMutableArray arg0,
    int index,
  ) {
    return _FLMutableArray_Set(
      arg0,
      index,
    );
  }

  late final _FLMutableArray_SetPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_Set>>(
          'FLMutableArray_Set');
  late final _FLMutableArray_Set =
      _FLMutableArray_SetPtr.asFunction<DartFLMutableArray_Set>();

  FLSlot FLMutableArray_Append(
    FLMutableArray arg0,
  ) {
    return _FLMutableArray_Append(
      arg0,
    );
  }

  late final _FLMutableArray_AppendPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableArray_Append>>(
          'FLMutableArray_Append');
  late final _FLMutableArray_Append =
      _FLMutableArray_AppendPtr.asFunction<DartFLMutableArray_Append>();

  FLSlot FLMutableDict_Set(
    FLMutableDict arg0,
    FLString key,
  ) {
    return _FLMutableDict_Set(
      arg0,
      key,
    );
  }

  late final _FLMutableDict_SetPtr =
      _lookup<ffi.NativeFunction<NativeFLMutableDict_Set>>('FLMutableDict_Set');
  late final _FLMutableDict_Set =
      _FLMutableDict_SetPtr.asFunction<DartFLMutableDict_Set>();

  void FLSlot_SetNull(
    FLSlot arg0,
  ) {
    return _FLSlot_SetNull(
      arg0,
    );
  }

  late final _FLSlot_SetNullPtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetNull>>('FLSlot_SetNull');
  late final _FLSlot_SetNull =
      _FLSlot_SetNullPtr.asFunction<DartFLSlot_SetNull>();

  void FLSlot_SetBool(
    FLSlot arg0,
    bool arg1,
  ) {
    return _FLSlot_SetBool(
      arg0,
      arg1,
    );
  }

  late final _FLSlot_SetBoolPtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetBool>>('FLSlot_SetBool');
  late final _FLSlot_SetBool =
      _FLSlot_SetBoolPtr.asFunction<DartFLSlot_SetBool>();

  void FLSlot_SetInt(
    FLSlot arg0,
    int arg1,
  ) {
    return _FLSlot_SetInt(
      arg0,
      arg1,
    );
  }

  late final _FLSlot_SetIntPtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetInt>>('FLSlot_SetInt');
  late final _FLSlot_SetInt = _FLSlot_SetIntPtr.asFunction<DartFLSlot_SetInt>();

  void FLSlot_SetUInt(
    FLSlot arg0,
    int arg1,
  ) {
    return _FLSlot_SetUInt(
      arg0,
      arg1,
    );
  }

  late final _FLSlot_SetUIntPtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetUInt>>('FLSlot_SetUInt');
  late final _FLSlot_SetUInt =
      _FLSlot_SetUIntPtr.asFunction<DartFLSlot_SetUInt>();

  void FLSlot_SetFloat(
    FLSlot arg0,
    double arg1,
  ) {
    return _FLSlot_SetFloat(
      arg0,
      arg1,
    );
  }

  late final _FLSlot_SetFloatPtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetFloat>>('FLSlot_SetFloat');
  late final _FLSlot_SetFloat =
      _FLSlot_SetFloatPtr.asFunction<DartFLSlot_SetFloat>();

  void FLSlot_SetDouble(
    FLSlot arg0,
    double arg1,
  ) {
    return _FLSlot_SetDouble(
      arg0,
      arg1,
    );
  }

  late final _FLSlot_SetDoublePtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetDouble>>('FLSlot_SetDouble');
  late final _FLSlot_SetDouble =
      _FLSlot_SetDoublePtr.asFunction<DartFLSlot_SetDouble>();

  void FLSlot_SetString(
    FLSlot arg0,
    FLString arg1,
  ) {
    return _FLSlot_SetString(
      arg0,
      arg1,
    );
  }

  late final _FLSlot_SetStringPtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetString>>('FLSlot_SetString');
  late final _FLSlot_SetString =
      _FLSlot_SetStringPtr.asFunction<DartFLSlot_SetString>();

  void FLSlot_SetData(
    FLSlot arg0,
    FLSlice arg1,
  ) {
    return _FLSlot_SetData(
      arg0,
      arg1,
    );
  }

  late final _FLSlot_SetDataPtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetData>>('FLSlot_SetData');
  late final _FLSlot_SetData =
      _FLSlot_SetDataPtr.asFunction<DartFLSlot_SetData>();

  void FLSlot_SetValue(
    FLSlot arg0,
    FLValue arg1,
  ) {
    return _FLSlot_SetValue(
      arg0,
      arg1,
    );
  }

  late final _FLSlot_SetValuePtr =
      _lookup<ffi.NativeFunction<NativeFLSlot_SetValue>>('FLSlot_SetValue');
  late final _FLSlot_SetValue =
      _FLSlot_SetValuePtr.asFunction<DartFLSlot_SetValue>();

  FLSliceResult FLCreateJSONDelta(
    FLValue old,
    FLValue nuu,
  ) {
    return _FLCreateJSONDelta(
      old,
      nuu,
    );
  }

  late final _FLCreateJSONDeltaPtr =
      _lookup<ffi.NativeFunction<NativeFLCreateJSONDelta>>('FLCreateJSONDelta');
  late final _FLCreateJSONDelta =
      _FLCreateJSONDeltaPtr.asFunction<DartFLCreateJSONDelta>();

  bool FLEncodeJSONDelta(
    FLValue old,
    FLValue nuu,
    FLEncoder jsonEncoder,
  ) {
    return _FLEncodeJSONDelta(
      old,
      nuu,
      jsonEncoder,
    );
  }

  late final _FLEncodeJSONDeltaPtr =
      _lookup<ffi.NativeFunction<NativeFLEncodeJSONDelta>>('FLEncodeJSONDelta');
  late final _FLEncodeJSONDelta =
      _FLEncodeJSONDeltaPtr.asFunction<DartFLEncodeJSONDelta>();

  FLSliceResult FLApplyJSONDelta(
    FLValue old,
    FLSlice jsonDelta,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLApplyJSONDelta(
      old,
      jsonDelta,
      outError,
    );
  }

  late final _FLApplyJSONDeltaPtr =
      _lookup<ffi.NativeFunction<NativeFLApplyJSONDelta>>('FLApplyJSONDelta');
  late final _FLApplyJSONDelta =
      _FLApplyJSONDeltaPtr.asFunction<DartFLApplyJSONDelta>();

  bool FLEncodeApplyingJSONDelta(
    FLValue old,
    FLSlice jsonDelta,
    FLEncoder encoder,
  ) {
    return _FLEncodeApplyingJSONDelta(
      old,
      jsonDelta,
      encoder,
    );
  }

  late final _FLEncodeApplyingJSONDeltaPtr =
      _lookup<ffi.NativeFunction<NativeFLEncodeApplyingJSONDelta>>(
          'FLEncodeApplyingJSONDelta');
  late final _FLEncodeApplyingJSONDelta =
      _FLEncodeApplyingJSONDeltaPtr.asFunction<DartFLEncodeApplyingJSONDelta>();

  FLSharedKeys FLSharedKeys_New() {
    return _FLSharedKeys_New();
  }

  late final _FLSharedKeys_NewPtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_New>>('FLSharedKeys_New');
  late final _FLSharedKeys_New =
      _FLSharedKeys_NewPtr.asFunction<DartFLSharedKeys_New>();

  FLSharedKeys FLSharedKeys_NewWithRead(
    FLSharedKeysReadCallback arg0,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _FLSharedKeys_NewWithRead(
      arg0,
      context,
    );
  }

  late final _FLSharedKeys_NewWithReadPtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_NewWithRead>>(
          'FLSharedKeys_NewWithRead');
  late final _FLSharedKeys_NewWithRead =
      _FLSharedKeys_NewWithReadPtr.asFunction<DartFLSharedKeys_NewWithRead>();

  FLSliceResult FLSharedKeys_GetStateData(
    FLSharedKeys arg0,
  ) {
    return _FLSharedKeys_GetStateData(
      arg0,
    );
  }

  late final _FLSharedKeys_GetStateDataPtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_GetStateData>>(
          'FLSharedKeys_GetStateData');
  late final _FLSharedKeys_GetStateData =
      _FLSharedKeys_GetStateDataPtr.asFunction<DartFLSharedKeys_GetStateData>();

  bool FLSharedKeys_LoadStateData(
    FLSharedKeys arg0,
    FLSlice arg1,
  ) {
    return _FLSharedKeys_LoadStateData(
      arg0,
      arg1,
    );
  }

  late final _FLSharedKeys_LoadStateDataPtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_LoadStateData>>(
          'FLSharedKeys_LoadStateData');
  late final _FLSharedKeys_LoadStateData = _FLSharedKeys_LoadStateDataPtr
      .asFunction<DartFLSharedKeys_LoadStateData>();

  void FLSharedKeys_WriteState(
    FLSharedKeys arg0,
    FLEncoder arg1,
  ) {
    return _FLSharedKeys_WriteState(
      arg0,
      arg1,
    );
  }

  late final _FLSharedKeys_WriteStatePtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_WriteState>>(
          'FLSharedKeys_WriteState');
  late final _FLSharedKeys_WriteState =
      _FLSharedKeys_WriteStatePtr.asFunction<DartFLSharedKeys_WriteState>();

  bool FLSharedKeys_LoadState(
    FLSharedKeys arg0,
    FLValue arg1,
  ) {
    return _FLSharedKeys_LoadState(
      arg0,
      arg1,
    );
  }

  late final _FLSharedKeys_LoadStatePtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_LoadState>>(
          'FLSharedKeys_LoadState');
  late final _FLSharedKeys_LoadState =
      _FLSharedKeys_LoadStatePtr.asFunction<DartFLSharedKeys_LoadState>();

  int FLSharedKeys_Encode(
    FLSharedKeys arg0,
    FLString arg1,
    bool add,
  ) {
    return _FLSharedKeys_Encode(
      arg0,
      arg1,
      add,
    );
  }

  late final _FLSharedKeys_EncodePtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_Encode>>(
          'FLSharedKeys_Encode');
  late final _FLSharedKeys_Encode =
      _FLSharedKeys_EncodePtr.asFunction<DartFLSharedKeys_Encode>();

  FLString FLSharedKeys_Decode(
    FLSharedKeys arg0,
    int key,
  ) {
    return _FLSharedKeys_Decode(
      arg0,
      key,
    );
  }

  late final _FLSharedKeys_DecodePtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_Decode>>(
          'FLSharedKeys_Decode');
  late final _FLSharedKeys_Decode =
      _FLSharedKeys_DecodePtr.asFunction<DartFLSharedKeys_Decode>();

  int FLSharedKeys_Count(
    FLSharedKeys arg0,
  ) {
    return _FLSharedKeys_Count(
      arg0,
    );
  }

  late final _FLSharedKeys_CountPtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_Count>>(
          'FLSharedKeys_Count');
  late final _FLSharedKeys_Count =
      _FLSharedKeys_CountPtr.asFunction<DartFLSharedKeys_Count>();

  void FLSharedKeys_RevertToCount(
    FLSharedKeys arg0,
    int oldCount,
  ) {
    return _FLSharedKeys_RevertToCount(
      arg0,
      oldCount,
    );
  }

  late final _FLSharedKeys_RevertToCountPtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_RevertToCount>>(
          'FLSharedKeys_RevertToCount');
  late final _FLSharedKeys_RevertToCount = _FLSharedKeys_RevertToCountPtr
      .asFunction<DartFLSharedKeys_RevertToCount>();

  void FLSharedKeys_DisableCaching(
    FLSharedKeys arg0,
  ) {
    return _FLSharedKeys_DisableCaching(
      arg0,
    );
  }

  late final _FLSharedKeys_DisableCachingPtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_DisableCaching>>(
          'FLSharedKeys_DisableCaching');
  late final _FLSharedKeys_DisableCaching = _FLSharedKeys_DisableCachingPtr
      .asFunction<DartFLSharedKeys_DisableCaching>();

  FLSharedKeys FLSharedKeys_Retain(
    FLSharedKeys arg0,
  ) {
    return _FLSharedKeys_Retain(
      arg0,
    );
  }

  late final _FLSharedKeys_RetainPtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_Retain>>(
          'FLSharedKeys_Retain');
  late final _FLSharedKeys_Retain =
      _FLSharedKeys_RetainPtr.asFunction<DartFLSharedKeys_Retain>();

  void FLSharedKeys_Release(
    FLSharedKeys arg0,
  ) {
    return _FLSharedKeys_Release(
      arg0,
    );
  }

  late final _FLSharedKeys_ReleasePtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeys_Release>>(
          'FLSharedKeys_Release');
  late final _FLSharedKeys_Release =
      _FLSharedKeys_ReleasePtr.asFunction<DartFLSharedKeys_Release>();

  FLSharedKeyScope FLSharedKeyScope_WithRange(
    FLSlice range,
    FLSharedKeys arg1,
  ) {
    return _FLSharedKeyScope_WithRange(
      range,
      arg1,
    );
  }

  late final _FLSharedKeyScope_WithRangePtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeyScope_WithRange>>(
          'FLSharedKeyScope_WithRange');
  late final _FLSharedKeyScope_WithRange = _FLSharedKeyScope_WithRangePtr
      .asFunction<DartFLSharedKeyScope_WithRange>();

  void FLSharedKeyScope_Free(
    FLSharedKeyScope arg0,
  ) {
    return _FLSharedKeyScope_Free(
      arg0,
    );
  }

  late final _FLSharedKeyScope_FreePtr =
      _lookup<ffi.NativeFunction<NativeFLSharedKeyScope_Free>>(
          'FLSharedKeyScope_Free');
  late final _FLSharedKeyScope_Free =
      _FLSharedKeyScope_FreePtr.asFunction<DartFLSharedKeyScope_Free>();

  FLValue FLValue_FromData(
    FLSlice data,
    int trust,
  ) {
    return _FLValue_FromData(
      data,
      trust,
    );
  }

  late final _FLValue_FromDataPtr =
      _lookup<ffi.NativeFunction<NativeFLValue_FromData>>('FLValue_FromData');
  late final _FLValue_FromData =
      _FLValue_FromDataPtr.asFunction<DartFLValue_FromData>();

  FLStringResult FLJSON5_ToJSON(
    FLString json5,
    ffi.Pointer<FLStringResult> outErrorMessage,
    ffi.Pointer<ffi.Size> outErrorPos,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLJSON5_ToJSON(
      json5,
      outErrorMessage,
      outErrorPos,
      outError,
    );
  }

  late final _FLJSON5_ToJSONPtr =
      _lookup<ffi.NativeFunction<NativeFLJSON5_ToJSON>>('FLJSON5_ToJSON');
  late final _FLJSON5_ToJSON =
      _FLJSON5_ToJSONPtr.asFunction<DartFLJSON5_ToJSON>();

  FLSliceResult FLData_ConvertJSON(
    FLSlice json,
    ffi.Pointer<ffi.UnsignedInt> outError,
  ) {
    return _FLData_ConvertJSON(
      json,
      outError,
    );
  }

  late final _FLData_ConvertJSONPtr =
      _lookup<ffi.NativeFunction<NativeFLData_ConvertJSON>>(
          'FLData_ConvertJSON');
  late final _FLData_ConvertJSON =
      _FLData_ConvertJSONPtr.asFunction<DartFLData_ConvertJSON>();

  void FLEncoder_Amend(
    FLEncoder e,
    FLSlice base,
    bool reuseStrings,
    bool externPointers,
  ) {
    return _FLEncoder_Amend(
      e,
      base,
      reuseStrings,
      externPointers,
    );
  }

  late final _FLEncoder_AmendPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_Amend>>('FLEncoder_Amend');
  late final _FLEncoder_Amend =
      _FLEncoder_AmendPtr.asFunction<DartFLEncoder_Amend>();

  FLSlice FLEncoder_GetBase(
    FLEncoder arg0,
  ) {
    return _FLEncoder_GetBase(
      arg0,
    );
  }

  late final _FLEncoder_GetBasePtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_GetBase>>('FLEncoder_GetBase');
  late final _FLEncoder_GetBase =
      _FLEncoder_GetBasePtr.asFunction<DartFLEncoder_GetBase>();

  void FLEncoder_SuppressTrailer(
    FLEncoder arg0,
  ) {
    return _FLEncoder_SuppressTrailer(
      arg0,
    );
  }

  late final _FLEncoder_SuppressTrailerPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_SuppressTrailer>>(
          'FLEncoder_SuppressTrailer');
  late final _FLEncoder_SuppressTrailer =
      _FLEncoder_SuppressTrailerPtr.asFunction<DartFLEncoder_SuppressTrailer>();

  int FLEncoder_GetNextWritePos(
    FLEncoder arg0,
  ) {
    return _FLEncoder_GetNextWritePos(
      arg0,
    );
  }

  late final _FLEncoder_GetNextWritePosPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_GetNextWritePos>>(
          'FLEncoder_GetNextWritePos');
  late final _FLEncoder_GetNextWritePos =
      _FLEncoder_GetNextWritePosPtr.asFunction<DartFLEncoder_GetNextWritePos>();

  int FLEncoder_LastValueWritten(
    FLEncoder arg0,
  ) {
    return _FLEncoder_LastValueWritten(
      arg0,
    );
  }

  late final _FLEncoder_LastValueWrittenPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_LastValueWritten>>(
          'FLEncoder_LastValueWritten');
  late final _FLEncoder_LastValueWritten = _FLEncoder_LastValueWrittenPtr
      .asFunction<DartFLEncoder_LastValueWritten>();

  bool FLEncoder_WriteValueAgain(
    FLEncoder arg0,
    int preWrittenValue,
  ) {
    return _FLEncoder_WriteValueAgain(
      arg0,
      preWrittenValue,
    );
  }

  late final _FLEncoder_WriteValueAgainPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_WriteValueAgain>>(
          'FLEncoder_WriteValueAgain');
  late final _FLEncoder_WriteValueAgain =
      _FLEncoder_WriteValueAgainPtr.asFunction<DartFLEncoder_WriteValueAgain>();

  FLSliceResult FLEncoder_Snip(
    FLEncoder arg0,
  ) {
    return _FLEncoder_Snip(
      arg0,
    );
  }

  late final _FLEncoder_SnipPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_Snip>>('FLEncoder_Snip');
  late final _FLEncoder_Snip =
      _FLEncoder_SnipPtr.asFunction<DartFLEncoder_Snip>();

  int FLEncoder_FinishItem(
    FLEncoder arg0,
  ) {
    return _FLEncoder_FinishItem(
      arg0,
    );
  }

  late final _FLEncoder_FinishItemPtr =
      _lookup<ffi.NativeFunction<NativeFLEncoder_FinishItem>>(
          'FLEncoder_FinishItem');
  late final _FLEncoder_FinishItem =
      _FLEncoder_FinishItemPtr.asFunction<DartFLEncoder_FinishItem>();

  void FLJSONEncoder_NextDocument(
    FLEncoder arg0,
  ) {
    return _FLJSONEncoder_NextDocument(
      arg0,
    );
  }

  late final _FLJSONEncoder_NextDocumentPtr =
      _lookup<ffi.NativeFunction<NativeFLJSONEncoder_NextDocument>>(
          'FLJSONEncoder_NextDocument');
  late final _FLJSONEncoder_NextDocument = _FLJSONEncoder_NextDocumentPtr
      .asFunction<DartFLJSONEncoder_NextDocument>();

  ffi.Pointer<ffi.Char> FLDump(
    FLValue arg0,
  ) {
    return _FLDump(
      arg0,
    );
  }

  late final _FLDumpPtr = _lookup<ffi.NativeFunction<NativeFLDump>>('FLDump');
  late final _FLDump = _FLDumpPtr.asFunction<DartFLDump>();

  ffi.Pointer<ffi.Char> FLDumpData(
    FLSlice data,
  ) {
    return _FLDumpData(
      data,
    );
  }

  late final _FLDumpDataPtr =
      _lookup<ffi.NativeFunction<NativeFLDumpData>>('FLDumpData');
  late final _FLDumpData = _FLDumpDataPtr.asFunction<DartFLDumpData>();

  FLStringResult FLData_Dump(
    FLSlice data,
  ) {
    return _FLData_Dump(
      data,
    );
  }

  late final _FLData_DumpPtr =
      _lookup<ffi.NativeFunction<NativeFLData_Dump>>('FLData_Dump');
  late final _FLData_Dump = _FLData_DumpPtr.asFunction<DartFLData_Dump>();

  late final addresses = SymbolAddresses(this);
}

class SymbolAddresses {
  final cblite _library;
  SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<NativeCBL_Release>> get CBL_Release =>
      _library._CBL_ReleasePtr;
  ffi.Pointer<ffi.NativeFunction<NativeCBLBlobReader_Close>>
      get CBLBlobReader_Close => _library._CBLBlobReader_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<NativeFLDoc_Release>> get FLDoc_Release =>
      _library._FLDoc_ReleasePtr;
  ffi.Pointer<ffi.NativeFunction<NativeFLEncoder_Free>> get FLEncoder_Free =>
      _library._FLEncoder_FreePtr;
  ffi.Pointer<ffi.NativeFunction<NativeFLValue_Release>> get FLValue_Release =>
      _library._FLValue_ReleasePtr;
  ffi.Pointer<ffi.NativeFunction<NativeFLSharedKeys_Release>>
      get FLSharedKeys_Release => _library._FLSharedKeys_ReleasePtr;
}

typedef CBLErrorDomain = ffi.Uint8;
typedef DartCBLErrorDomain = int;
typedef CBLErrorCode = ffi.Int32;
typedef DartCBLErrorCode = int;
typedef CBLNetworkErrorCode = ffi.Int32;
typedef DartCBLNetworkErrorCode = int;

final class CBLError extends ffi.Struct {
  @CBLErrorDomain()
  external int domain;

  @ffi.Int()
  external int code;

  @ffi.UnsignedInt()
  external int internal_info;
}

final class FLSliceResult extends ffi.Struct {
  external ffi.Pointer<ffi.Void> buf;

  @ffi.Size()
  external int size;
}

typedef NativeCBLError_Message = FLSliceResult Function(
    ffi.Pointer<CBLError> outError);
typedef DartCBLError_Message = FLSliceResult Function(
    ffi.Pointer<CBLError> outError);
typedef CBLTimestamp = ffi.Int64;
typedef DartCBLTimestamp = int;
typedef NativeCBL_Now = CBLTimestamp Function();
typedef DartCBL_Now = int Function();

final class CBLRefCounted extends ffi.Opaque {}

typedef NativeCBL_Retain = ffi.Pointer<CBLRefCounted> Function(
    ffi.Pointer<CBLRefCounted> arg0);
typedef DartCBL_Retain = ffi.Pointer<CBLRefCounted> Function(
    ffi.Pointer<CBLRefCounted> arg0);
typedef NativeCBL_Release = ffi.Void Function(ffi.Pointer<CBLRefCounted> arg0);
typedef DartCBL_Release = void Function(ffi.Pointer<CBLRefCounted> arg0);
typedef NativeCBL_InstanceCount = ffi.UnsignedInt Function();
typedef DartCBL_InstanceCount = int Function();
typedef NativeCBL_DumpInstances = ffi.Void Function();
typedef DartCBL_DumpInstances = void Function();

final class CBLDatabase extends ffi.Opaque {}

final class CBLScope extends ffi.Opaque {}

final class CBLCollection extends ffi.Opaque {}

final class CBLDocument extends ffi.Opaque {}

final class CBLBlob extends ffi.Opaque {}

final class CBLQuery extends ffi.Opaque {}

final class CBLResultSet extends ffi.Opaque {}

final class CBLQueryIndex extends ffi.Opaque {}

final class CBLIndexUpdater extends ffi.Opaque {}

final class CBLReplicator extends ffi.Opaque {}

final class CBLEncryptable extends ffi.Opaque {}

final class CBLListenerToken extends ffi.Opaque {}

typedef NativeCBLListener_Remove = ffi.Void Function(
    ffi.Pointer<CBLListenerToken> arg0);
typedef DartCBLListener_Remove = void Function(
    ffi.Pointer<CBLListenerToken> arg0);

final class FLSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> buf;

  @ffi.Size()
  external int size;
}

final class _FLDict extends ffi.Opaque {}

typedef FLDict = ffi.Pointer<_FLDict>;
typedef NativeFLDict_IsBlob = ffi.Bool Function(FLDict arg0);
typedef DartFLDict_IsBlob = bool Function(FLDict arg0);
typedef NativeFLDict_GetBlob = ffi.Pointer<CBLBlob> Function(FLDict blobDict);
typedef DartFLDict_GetBlob = ffi.Pointer<CBLBlob> Function(FLDict blobDict);
typedef NativeCBLBlob_Length = ffi.Uint64 Function(ffi.Pointer<CBLBlob> arg0);
typedef DartCBLBlob_Length = int Function(ffi.Pointer<CBLBlob> arg0);
typedef FLString = FLSlice;
typedef NativeCBLBlob_ContentType = FLString Function(
    ffi.Pointer<CBLBlob> arg0);
typedef DartCBLBlob_ContentType = FLString Function(ffi.Pointer<CBLBlob> arg0);
typedef NativeCBLBlob_Digest = FLString Function(ffi.Pointer<CBLBlob> arg0);
typedef DartCBLBlob_Digest = FLString Function(ffi.Pointer<CBLBlob> arg0);
typedef NativeCBLBlob_Properties = FLDict Function(ffi.Pointer<CBLBlob> arg0);
typedef DartCBLBlob_Properties = FLDict Function(ffi.Pointer<CBLBlob> arg0);
typedef FLStringResult = FLSliceResult;
typedef NativeCBLBlob_CreateJSON = FLStringResult Function(
    ffi.Pointer<CBLBlob> blob);
typedef DartCBLBlob_CreateJSON = FLStringResult Function(
    ffi.Pointer<CBLBlob> blob);
typedef NativeCBLBlob_Content = FLSliceResult Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> outError);
typedef DartCBLBlob_Content = FLSliceResult Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> outError);

final class CBLBlobReadStream extends ffi.Opaque {}

typedef NativeCBLBlob_OpenContentStream = ffi.Pointer<CBLBlobReadStream>
    Function(ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> arg1);
typedef DartCBLBlob_OpenContentStream = ffi.Pointer<CBLBlobReadStream> Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> arg1);
typedef NativeCBLBlobReader_Read = ffi.Int Function(
    ffi.Pointer<CBLBlobReadStream> stream,
    ffi.Pointer<ffi.Void> dst,
    ffi.Size maxLength,
    ffi.Pointer<CBLError> outError);
typedef DartCBLBlobReader_Read = int Function(
    ffi.Pointer<CBLBlobReadStream> stream,
    ffi.Pointer<ffi.Void> dst,
    int maxLength,
    ffi.Pointer<CBLError> outError);
typedef CBLSeekBase = ffi.Uint8;
typedef DartCBLSeekBase = int;
typedef NativeCBLBlobReader_Seek = ffi.Int64 Function(
    ffi.Pointer<CBLBlobReadStream> stream,
    ffi.Int64 offset,
    CBLSeekBase base,
    ffi.Pointer<CBLError> outError);
typedef DartCBLBlobReader_Seek = int Function(
    ffi.Pointer<CBLBlobReadStream> stream,
    int offset,
    int base,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLBlobReader_Position = ffi.Uint64 Function(
    ffi.Pointer<CBLBlobReadStream> stream);
typedef DartCBLBlobReader_Position = int Function(
    ffi.Pointer<CBLBlobReadStream> stream);
typedef NativeCBLBlobReader_Close = ffi.Void Function(
    ffi.Pointer<CBLBlobReadStream> arg0);
typedef DartCBLBlobReader_Close = void Function(
    ffi.Pointer<CBLBlobReadStream> arg0);
typedef NativeCBLBlob_Equals = ffi.Bool Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLBlob> anotherBlob);
typedef DartCBLBlob_Equals = bool Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLBlob> anotherBlob);
typedef NativeCBLBlob_CreateWithData = ffi.Pointer<CBLBlob> Function(
    FLString contentType, FLSlice contents);
typedef DartCBLBlob_CreateWithData = ffi.Pointer<CBLBlob> Function(
    FLString contentType, FLSlice contents);

final class CBLBlobWriteStream extends ffi.Opaque {}

typedef NativeCBLBlobWriter_Create = ffi.Pointer<CBLBlobWriteStream> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> arg1);
typedef DartCBLBlobWriter_Create = ffi.Pointer<CBLBlobWriteStream> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> arg1);
typedef NativeCBLBlobWriter_Close = ffi.Void Function(
    ffi.Pointer<CBLBlobWriteStream> arg0);
typedef DartCBLBlobWriter_Close = void Function(
    ffi.Pointer<CBLBlobWriteStream> arg0);
typedef NativeCBLBlobWriter_Write = ffi.Bool Function(
    ffi.Pointer<CBLBlobWriteStream> writer,
    ffi.Pointer<ffi.Void> data,
    ffi.Size length,
    ffi.Pointer<CBLError> outError);
typedef DartCBLBlobWriter_Write = bool Function(
    ffi.Pointer<CBLBlobWriteStream> writer,
    ffi.Pointer<ffi.Void> data,
    int length,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLBlob_CreateWithStream = ffi.Pointer<CBLBlob> Function(
    FLString contentType, ffi.Pointer<CBLBlobWriteStream> writer);
typedef DartCBLBlob_CreateWithStream = ffi.Pointer<CBLBlob> Function(
    FLString contentType, ffi.Pointer<CBLBlobWriteStream> writer);

final class _FLSlot extends ffi.Opaque {}

typedef FLSlot = ffi.Pointer<_FLSlot>;
typedef NativeFLSlot_SetBlob = ffi.Void Function(
    FLSlot slot, ffi.Pointer<CBLBlob> blob);
typedef DartFLSlot_SetBlob = void Function(
    FLSlot slot, ffi.Pointer<CBLBlob> blob);
typedef NativeCBLDatabase_GetBlob = ffi.Pointer<CBLBlob> Function(
    ffi.Pointer<CBLDatabase> db,
    FLDict properties,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_GetBlob = ffi.Pointer<CBLBlob> Function(
    ffi.Pointer<CBLDatabase> db,
    FLDict properties,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SaveBlob = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLBlob> blob,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SaveBlob = bool Function(ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> outError);
typedef CBLConcurrencyControl = ffi.Uint8;
typedef DartCBLConcurrencyControl = int;
typedef CBLConflictHandlerFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLDocument> documentBeingSaved,
    ffi.Pointer<CBLDocument> conflictingDocument);
typedef DartCBLConflictHandlerFunction = bool Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLDocument> documentBeingSaved,
    ffi.Pointer<CBLDocument> conflictingDocument);
typedef CBLConflictHandler
    = ffi.Pointer<ffi.NativeFunction<CBLConflictHandlerFunction>>;
typedef NativeCBLDatabase_GetDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDatabase> database,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_GetDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDatabase> database,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SaveDocument = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SaveDocument = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SaveDocumentWithConcurrencyControl
    = ffi.Bool Function(
        ffi.Pointer<CBLDatabase> db,
        ffi.Pointer<CBLDocument> doc,
        CBLConcurrencyControl concurrency,
        ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SaveDocumentWithConcurrencyControl = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    int concurrency,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SaveDocumentWithConflictHandler = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SaveDocumentWithConflictHandler = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DeleteDocument = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DeleteDocument = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DeleteDocumentWithConcurrencyControl
    = ffi.Bool Function(
        ffi.Pointer<CBLDatabase> db,
        ffi.Pointer<CBLDocument> document,
        CBLConcurrencyControl concurrency,
        ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DeleteDocumentWithConcurrencyControl = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    int concurrency,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_PurgeDocument = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_PurgeDocument = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_PurgeDocumentByID = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> database,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_PurgeDocumentByID = bool Function(
    ffi.Pointer<CBLDatabase> database,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_GetMutableDocument
    = ffi.Pointer<CBLDocument> Function(ffi.Pointer<CBLDatabase> database,
        FLString docID, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_GetMutableDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDatabase> database,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDocument_Create = ffi.Pointer<CBLDocument> Function();
typedef DartCBLDocument_Create = ffi.Pointer<CBLDocument> Function();
typedef NativeCBLDocument_CreateWithID = ffi.Pointer<CBLDocument> Function(
    FLString docID);
typedef DartCBLDocument_CreateWithID = ffi.Pointer<CBLDocument> Function(
    FLString docID);
typedef NativeCBLDocument_MutableCopy = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDocument> original);
typedef DartCBLDocument_MutableCopy = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDocument> original);
typedef NativeCBLDocument_ID = FLString Function(ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_ID = FLString Function(ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_RevisionID = FLString Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_RevisionID = FLString Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_Sequence = ffi.Uint64 Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_Sequence = int Function(ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_Properties = FLDict Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_Properties = FLDict Function(
    ffi.Pointer<CBLDocument> arg0);
typedef FLMutableDict = ffi.Pointer<_FLDict>;
typedef NativeCBLDocument_MutableProperties = FLMutableDict Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_MutableProperties = FLMutableDict Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_SetProperties = ffi.Void Function(
    ffi.Pointer<CBLDocument> arg0, FLMutableDict properties);
typedef DartCBLDocument_SetProperties = void Function(
    ffi.Pointer<CBLDocument> arg0, FLMutableDict properties);
typedef NativeCBLDocument_CreateJSON = FLSliceResult Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_CreateJSON = FLSliceResult Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_SetJSON = ffi.Bool Function(
    ffi.Pointer<CBLDocument> arg0,
    FLSlice json,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDocument_SetJSON = bool Function(ffi.Pointer<CBLDocument> arg0,
    FLSlice json, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_GetDocumentExpiration = CBLTimestamp Function(
    ffi.Pointer<CBLDatabase> db, FLSlice docID, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_GetDocumentExpiration = int Function(
    ffi.Pointer<CBLDatabase> db, FLSlice docID, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SetDocumentExpiration = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLSlice docID,
    CBLTimestamp expiration,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SetDocumentExpiration = bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLSlice docID,
    int expiration,
    ffi.Pointer<CBLError> outError);
typedef CBLDocumentChangeListenerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<CBLDatabase> db, FLString docID);
typedef DartCBLDocumentChangeListenerFunction = void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<CBLDatabase> db, FLString docID);
typedef CBLDocumentChangeListener
    = ffi.Pointer<ffi.NativeFunction<CBLDocumentChangeListenerFunction>>;
typedef NativeCBLDatabase_AddDocumentChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLDatabase> db,
        FLString docID,
        CBLDocumentChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef DartCBLDatabase_AddDocumentChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLDatabase> db,
        FLString docID,
        CBLDocumentChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef CBLQueryLanguage = ffi.Uint32;
typedef DartCBLQueryLanguage = int;

final class CBLValueIndexConfiguration extends ffi.Struct {
  @CBLQueryLanguage()
  external int expressionLanguage;

  external FLString expressions;
}

final class CBLFullTextIndexConfiguration extends ffi.Struct {
  @CBLQueryLanguage()
  external int expressionLanguage;

  external FLString expressions;

  @ffi.Bool()
  external bool ignoreAccents;

  external FLString language;
}

final class CBLVectorEncoding extends ffi.Opaque {}

typedef NativeCBLVectorEncoding_CreateNone = ffi.Pointer<CBLVectorEncoding>
    Function();
typedef DartCBLVectorEncoding_CreateNone = ffi.Pointer<CBLVectorEncoding>
    Function();
typedef CBLScalarQuantizerType = ffi.Uint32;
typedef DartCBLScalarQuantizerType = int;
typedef NativeCBLVectorEncoding_CreateScalarQuantizer
    = ffi.Pointer<CBLVectorEncoding> Function(CBLScalarQuantizerType type);
typedef DartCBLVectorEncoding_CreateScalarQuantizer
    = ffi.Pointer<CBLVectorEncoding> Function(int type);
typedef NativeCBLVectorEncoding_CreateProductQuantizer
    = ffi.Pointer<CBLVectorEncoding> Function(
        ffi.UnsignedInt subquantizers, ffi.UnsignedInt bits);
typedef DartCBLVectorEncoding_CreateProductQuantizer
    = ffi.Pointer<CBLVectorEncoding> Function(int subquantizers, int bits);
typedef NativeCBLVectorEncoding_Free = ffi.Void Function(
    ffi.Pointer<CBLVectorEncoding> arg0);
typedef DartCBLVectorEncoding_Free = void Function(
    ffi.Pointer<CBLVectorEncoding> arg0);
typedef CBLDistanceMetric = ffi.Uint32;
typedef DartCBLDistanceMetric = int;

final class CBLVectorIndexConfiguration extends ffi.Struct {
  @CBLQueryLanguage()
  external int expressionLanguage;

  external FLString expression;

  @ffi.UnsignedInt()
  external int dimensions;

  @ffi.UnsignedInt()
  external int centroids;

  @ffi.Bool()
  external bool isLazy;

  external ffi.Pointer<CBLVectorEncoding> encoding;

  @CBLDistanceMetric()
  external int metric;

  @ffi.UnsignedInt()
  external int minTrainingSize;

  @ffi.UnsignedInt()
  external int maxTrainingSize;

  @ffi.UnsignedInt()
  external int numProbes;
}

final class _FLArray extends ffi.Opaque {}

typedef FLMutableArray = ffi.Pointer<_FLArray>;
typedef NativeCBLDatabase_ScopeNames = FLMutableArray Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_ScopeNames = FLMutableArray Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_CollectionNames = FLMutableArray Function(
    ffi.Pointer<CBLDatabase> db,
    FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CollectionNames = FLMutableArray Function(
    ffi.Pointer<CBLDatabase> db,
    FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Scope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLDatabase> db,
    FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Scope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLDatabase> db,
    FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDatabase> db,
    FLString collectionName,
    FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDatabase> db,
    FLString collectionName,
    FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_CreateCollection
    = ffi.Pointer<CBLCollection> Function(
        ffi.Pointer<CBLDatabase> db,
        FLString collectionName,
        FLString scopeName,
        ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CreateCollection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDatabase> db,
    FLString collectionName,
    FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DeleteCollection = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLString collectionName,
    FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DeleteCollection = bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLString collectionName,
    FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DefaultScope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DefaultScope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DefaultCollection = ffi.Pointer<CBLCollection>
    Function(ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DefaultCollection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_Scope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_Scope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_Name = FLString Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_Name = FLString Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_FullName = FLString Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_FullName = FLString Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_Database = ffi.Pointer<CBLDatabase> Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_Database = ffi.Pointer<CBLDatabase> Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_Count = ffi.Uint64 Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_Count = int Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_GetDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLCollection> collection,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLCollection> collection,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_SaveDocument = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_SaveDocument = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_SaveDocumentWithConcurrencyControl
    = ffi.Bool Function(
        ffi.Pointer<CBLCollection> collection,
        ffi.Pointer<CBLDocument> doc,
        CBLConcurrencyControl concurrency,
        ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_SaveDocumentWithConcurrencyControl = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    int concurrency,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_SaveDocumentWithConflictHandler = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_SaveDocumentWithConflictHandler = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_DeleteDocument = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_DeleteDocument = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_DeleteDocumentWithConcurrencyControl
    = ffi.Bool Function(
        ffi.Pointer<CBLCollection> collection,
        ffi.Pointer<CBLDocument> document,
        CBLConcurrencyControl concurrency,
        ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_DeleteDocumentWithConcurrencyControl = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    int concurrency,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_PurgeDocument = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_PurgeDocument = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_PurgeDocumentByID = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_PurgeDocumentByID = bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_GetDocumentExpiration = CBLTimestamp Function(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetDocumentExpiration = int Function(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_SetDocumentExpiration = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    CBLTimestamp expiration,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_SetDocumentExpiration = bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    int expiration,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_GetMutableDocument
    = ffi.Pointer<CBLDocument> Function(ffi.Pointer<CBLCollection> collection,
        FLString docID, ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetMutableDocument
    = ffi.Pointer<CBLDocument> Function(ffi.Pointer<CBLCollection> collection,
        FLString docID, ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_CreateValueIndex = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_CreateValueIndex = bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_CreateFullTextIndex = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_CreateFullTextIndex = bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_CreateVectorIndex = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    CBLVectorIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_CreateVectorIndex = bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    CBLVectorIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_DeleteIndex = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_DeleteIndex = bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_GetIndexNames = FLMutableArray Function(
    ffi.Pointer<CBLCollection> collection, ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetIndexNames = FLMutableArray Function(
    ffi.Pointer<CBLCollection> collection, ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_GetIndex = ffi.Pointer<CBLQueryIndex> Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetIndex = ffi.Pointer<CBLQueryIndex> Function(
    ffi.Pointer<CBLCollection> collection,
    FLString name,
    ffi.Pointer<CBLError> outError);

final class CBLCollectionChange extends ffi.Struct {
  external ffi.Pointer<CBLCollection> collection;

  @ffi.UnsignedInt()
  external int numDocs;

  external ffi.Pointer<FLString> docIDs;
}

typedef CBLCollectionChangeListenerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<CBLCollectionChange> change);
typedef DartCBLCollectionChangeListenerFunction = void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<CBLCollectionChange> change);
typedef CBLCollectionChangeListener
    = ffi.Pointer<ffi.NativeFunction<CBLCollectionChangeListenerFunction>>;
typedef NativeCBLCollection_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLCollection> collection,
        CBLCollectionChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef DartCBLCollection_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLCollection> collection,
        CBLCollectionChangeListener listener,
        ffi.Pointer<ffi.Void> context);

final class CBLDocumentChange extends ffi.Struct {
  external ffi.Pointer<CBLCollection> collection;

  external FLString docID;
}

typedef CBLCollectionDocumentChangeListenerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<CBLDocumentChange> change);
typedef DartCBLCollectionDocumentChangeListenerFunction = void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<CBLDocumentChange> change);
typedef CBLCollectionDocumentChangeListener = ffi
    .Pointer<ffi.NativeFunction<CBLCollectionDocumentChangeListenerFunction>>;
typedef NativeCBLCollection_AddDocumentChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLCollection> collection,
        FLString docID,
        CBLCollectionDocumentChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef DartCBLCollection_AddDocumentChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLCollection> collection,
        FLString docID,
        CBLCollectionDocumentChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef NativeCBL_EnableVectorSearch = ffi.Bool Function(
    FLString path, ffi.Pointer<CBLError> outError);
typedef DartCBL_EnableVectorSearch = bool Function(
    FLString path, ffi.Pointer<CBLError> outError);
typedef CBLEncryptionAlgorithm = ffi.Uint32;
typedef DartCBLEncryptionAlgorithm = int;
typedef CBLEncryptionKeySize = ffi.Uint64;
typedef DartCBLEncryptionKeySize = int;

final class CBLEncryptionKey extends ffi.Struct {
  @CBLEncryptionAlgorithm()
  external int algorithm;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> bytes;
}

final class CBLDatabaseConfiguration extends ffi.Struct {
  external FLString directory;

  external CBLEncryptionKey encryptionKey;

  @ffi.Bool()
  external bool fullSync;
}

typedef NativeCBLDatabaseConfiguration_Default = CBLDatabaseConfiguration
    Function();
typedef DartCBLDatabaseConfiguration_Default = CBLDatabaseConfiguration
    Function();
typedef NativeCBLEncryptionKey_FromPassword = ffi.Bool Function(
    ffi.Pointer<CBLEncryptionKey> key, FLString password);
typedef DartCBLEncryptionKey_FromPassword = bool Function(
    ffi.Pointer<CBLEncryptionKey> key, FLString password);
typedef NativeCBLEncryptionKey_FromPasswordOld = ffi.Bool Function(
    ffi.Pointer<CBLEncryptionKey> key, FLString password);
typedef DartCBLEncryptionKey_FromPasswordOld = bool Function(
    ffi.Pointer<CBLEncryptionKey> key, FLString password);
typedef NativeCBL_DatabaseExists = ffi.Bool Function(
    FLString name, FLString inDirectory);
typedef DartCBL_DatabaseExists = bool Function(
    FLString name, FLString inDirectory);
typedef NativeCBL_CopyDatabase = ffi.Bool Function(
    FLString fromPath,
    FLString toName,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError);
typedef DartCBL_CopyDatabase = bool Function(
    FLString fromPath,
    FLString toName,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBL_DeleteDatabase = ffi.Bool Function(
    FLString name, FLString inDirectory, ffi.Pointer<CBLError> outError);
typedef DartCBL_DeleteDatabase = bool Function(
    FLString name, FLString inDirectory, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Open = ffi.Pointer<CBLDatabase> Function(
    FLSlice name,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Open = ffi.Pointer<CBLDatabase> Function(
    FLSlice name,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Close = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Close = bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Delete = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Delete = bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_BeginTransaction = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_BeginTransaction = bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_EndTransaction = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Bool commit,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_EndTransaction = bool Function(
    ffi.Pointer<CBLDatabase> arg0, bool commit, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_ChangeEncryptionKey = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Pointer<CBLEncryptionKey> newKey,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_ChangeEncryptionKey = bool Function(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Pointer<CBLEncryptionKey> newKey,
    ffi.Pointer<CBLError> outError);
typedef CBLMaintenanceType = ffi.Uint32;
typedef DartCBLMaintenanceType = int;
typedef NativeCBLDatabase_PerformMaintenance = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    CBLMaintenanceType type,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_PerformMaintenance = bool Function(
    ffi.Pointer<CBLDatabase> db, int type, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Name = FLString Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLDatabase_Name = FLString Function(ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLDatabase_Path = FLStringResult Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLDatabase_Path = FLStringResult Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLDatabase_Count = ffi.Uint64 Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLDatabase_Count = int Function(ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLDatabase_Config = CBLDatabaseConfiguration Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLDatabase_Config = CBLDatabaseConfiguration Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLDatabase_CreateValueIndex = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CreateValueIndex = bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_CreateFullTextIndex = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CreateFullTextIndex = bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DeleteIndex = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db, FLString name, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DeleteIndex = bool Function(
    ffi.Pointer<CBLDatabase> db, FLString name, ffi.Pointer<CBLError> outError);
typedef FLArray = ffi.Pointer<_FLArray>;
typedef NativeCBLDatabase_GetIndexNames = FLArray Function(
    ffi.Pointer<CBLDatabase> db);
typedef DartCBLDatabase_GetIndexNames = FLArray Function(
    ffi.Pointer<CBLDatabase> db);
typedef CBLDatabaseChangeListenerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLDatabase> db,
    ffi.UnsignedInt numDocs,
    ffi.Pointer<FLString> docIDs);
typedef DartCBLDatabaseChangeListenerFunction = void Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLDatabase> db,
    int numDocs,
    ffi.Pointer<FLString> docIDs);
typedef CBLDatabaseChangeListener
    = ffi.Pointer<ffi.NativeFunction<CBLDatabaseChangeListenerFunction>>;
typedef NativeCBLDatabase_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLDatabase> db,
        CBLDatabaseChangeListener listener, ffi.Pointer<ffi.Void> context);
typedef DartCBLDatabase_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLDatabase> db,
        CBLDatabaseChangeListener listener, ffi.Pointer<ffi.Void> context);
typedef CBLNotificationsReadyCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<CBLDatabase> db);
typedef DartCBLNotificationsReadyCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<CBLDatabase> db);
typedef CBLNotificationsReadyCallback
    = ffi.Pointer<ffi.NativeFunction<CBLNotificationsReadyCallbackFunction>>;
typedef NativeCBLDatabase_BufferNotifications = ffi.Void Function(
    ffi.Pointer<CBLDatabase> db,
    CBLNotificationsReadyCallback callback,
    ffi.Pointer<ffi.Void> context);
typedef DartCBLDatabase_BufferNotifications = void Function(
    ffi.Pointer<CBLDatabase> db,
    CBLNotificationsReadyCallback callback,
    ffi.Pointer<ffi.Void> context);
typedef NativeCBLDatabase_SendNotifications = ffi.Void Function(
    ffi.Pointer<CBLDatabase> db);
typedef DartCBLDatabase_SendNotifications = void Function(
    ffi.Pointer<CBLDatabase> db);

final class CBLEndpoint extends ffi.Opaque {}

typedef NativeCBLEndpoint_CreateWithURL = ffi.Pointer<CBLEndpoint> Function(
    FLString url, ffi.Pointer<CBLError> outError);
typedef DartCBLEndpoint_CreateWithURL = ffi.Pointer<CBLEndpoint> Function(
    FLString url, ffi.Pointer<CBLError> outError);
typedef NativeCBLEndpoint_CreateWithLocalDB = ffi.Pointer<CBLEndpoint> Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLEndpoint_CreateWithLocalDB = ffi.Pointer<CBLEndpoint> Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLEndpoint_Free = ffi.Void Function(
    ffi.Pointer<CBLEndpoint> arg0);
typedef DartCBLEndpoint_Free = void Function(ffi.Pointer<CBLEndpoint> arg0);

final class CBLAuthenticator extends ffi.Opaque {}

typedef NativeCBLAuth_CreatePassword = ffi.Pointer<CBLAuthenticator> Function(
    FLString username, FLString password);
typedef DartCBLAuth_CreatePassword = ffi.Pointer<CBLAuthenticator> Function(
    FLString username, FLString password);
typedef NativeCBLAuth_CreateSession = ffi.Pointer<CBLAuthenticator> Function(
    FLString sessionID, FLString cookieName);
typedef DartCBLAuth_CreateSession = ffi.Pointer<CBLAuthenticator> Function(
    FLString sessionID, FLString cookieName);
typedef NativeCBLAuth_Free = ffi.Void Function(
    ffi.Pointer<CBLAuthenticator> arg0);
typedef DartCBLAuth_Free = void Function(ffi.Pointer<CBLAuthenticator> arg0);
typedef CBLReplicatorType = ffi.Uint8;
typedef DartCBLReplicatorType = int;
typedef CBLDocumentFlags = ffi.UnsignedInt;
typedef DartCBLDocumentFlags = int;
typedef CBLReplicationFilterFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLDocument> document,
    CBLDocumentFlags flags);
typedef DartCBLReplicationFilterFunction = bool Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLDocument> document,
    DartCBLDocumentFlags flags);
typedef CBLReplicationFilter
    = ffi.Pointer<ffi.NativeFunction<CBLReplicationFilterFunction>>;
typedef CBLConflictResolverFunction = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<ffi.Void> context,
    FLString documentID,
    ffi.Pointer<CBLDocument> localDocument,
    ffi.Pointer<CBLDocument> remoteDocument);
typedef CBLConflictResolver
    = ffi.Pointer<ffi.NativeFunction<CBLConflictResolverFunction>>;
typedef CBLProxyType = ffi.Uint8;
typedef DartCBLProxyType = int;

final class CBLProxySettings extends ffi.Struct {
  @CBLProxyType()
  external int type;

  external FLString hostname;

  @ffi.Uint16()
  external int port;

  external FLString username;

  external FLString password;
}

typedef CBLPropertyEncryptorFunction = FLSliceResult Function(
    ffi.Pointer<ffi.Void> context,
    FLString documentID,
    FLDict properties,
    FLString keyPath,
    FLSlice input,
    ffi.Pointer<FLStringResult> algorithm,
    ffi.Pointer<FLStringResult> kid,
    ffi.Pointer<CBLError> error);
typedef CBLPropertyEncryptor
    = ffi.Pointer<ffi.NativeFunction<CBLPropertyEncryptorFunction>>;
typedef CBLPropertyDecryptorFunction = FLSliceResult Function(
    ffi.Pointer<ffi.Void> context,
    FLString documentID,
    FLDict properties,
    FLString keyPath,
    FLSlice input,
    FLString algorithm,
    FLString kid,
    ffi.Pointer<CBLError> error);
typedef CBLPropertyDecryptor
    = ffi.Pointer<ffi.NativeFunction<CBLPropertyDecryptorFunction>>;
typedef CBLDocumentPropertyEncryptorFunction = FLSliceResult Function(
    ffi.Pointer<ffi.Void> context,
    FLString scope,
    FLString collection,
    FLString documentID,
    FLDict properties,
    FLString keyPath,
    FLSlice input,
    ffi.Pointer<FLStringResult> algorithm,
    ffi.Pointer<FLStringResult> kid,
    ffi.Pointer<CBLError> error);
typedef CBLDocumentPropertyEncryptor
    = ffi.Pointer<ffi.NativeFunction<CBLDocumentPropertyEncryptorFunction>>;
typedef CBLDocumentPropertyDecryptorFunction = FLSliceResult Function(
    ffi.Pointer<ffi.Void> context,
    FLString scope,
    FLString collection,
    FLString documentID,
    FLDict properties,
    FLString keyPath,
    FLSlice input,
    FLString algorithm,
    FLString kid,
    ffi.Pointer<CBLError> error);
typedef CBLDocumentPropertyDecryptor
    = ffi.Pointer<ffi.NativeFunction<CBLDocumentPropertyDecryptorFunction>>;

final class CBLReplicationCollection extends ffi.Struct {
  external ffi.Pointer<CBLCollection> collection;

  external CBLConflictResolver conflictResolver;

  external CBLReplicationFilter pushFilter;

  external CBLReplicationFilter pullFilter;

  external FLArray channels;

  external FLArray documentIDs;
}

final class CBLReplicatorConfiguration extends ffi.Struct {
  external ffi.Pointer<CBLDatabase> database;

  external ffi.Pointer<CBLEndpoint> endpoint;

  @CBLReplicatorType()
  external int replicatorType;

  @ffi.Bool()
  external bool continuous;

  @ffi.Bool()
  external bool disableAutoPurge;

  @ffi.UnsignedInt()
  external int maxAttempts;

  @ffi.UnsignedInt()
  external int maxAttemptWaitTime;

  @ffi.UnsignedInt()
  external int heartbeat;

  external ffi.Pointer<CBLAuthenticator> authenticator;

  external ffi.Pointer<CBLProxySettings> proxy;

  external FLDict headers;

  external FLSlice pinnedServerCertificate;

  external FLSlice trustedRootCertificates;

  external FLArray channels;

  external FLArray documentIDs;

  external CBLReplicationFilter pushFilter;

  external CBLReplicationFilter pullFilter;

  external CBLConflictResolver conflictResolver;

  external ffi.Pointer<ffi.Void> context;

  external CBLPropertyEncryptor propertyEncryptor;

  external CBLPropertyDecryptor propertyDecryptor;

  external CBLDocumentPropertyEncryptor documentPropertyEncryptor;

  external CBLDocumentPropertyDecryptor documentPropertyDecryptor;

  external ffi.Pointer<CBLReplicationCollection> collections;

  @ffi.Size()
  external int collectionCount;

  @ffi.Bool()
  external bool acceptParentDomainCookies;
}

typedef NativeCBLReplicator_Create = ffi.Pointer<CBLReplicator> Function(
    ffi.Pointer<CBLReplicatorConfiguration> arg0,
    ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_Create = ffi.Pointer<CBLReplicator> Function(
    ffi.Pointer<CBLReplicatorConfiguration> arg0,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLReplicator_Config = ffi.Pointer<CBLReplicatorConfiguration>
    Function(ffi.Pointer<CBLReplicator> arg0);
typedef DartCBLReplicator_Config = ffi.Pointer<CBLReplicatorConfiguration>
    Function(ffi.Pointer<CBLReplicator> arg0);
typedef NativeCBLReplicator_Start = ffi.Void Function(
    ffi.Pointer<CBLReplicator> replicator, ffi.Bool resetCheckpoint);
typedef DartCBLReplicator_Start = void Function(
    ffi.Pointer<CBLReplicator> replicator, bool resetCheckpoint);
typedef NativeCBLReplicator_Stop = ffi.Void Function(
    ffi.Pointer<CBLReplicator> arg0);
typedef DartCBLReplicator_Stop = void Function(ffi.Pointer<CBLReplicator> arg0);
typedef NativeCBLReplicator_SetHostReachable = ffi.Void Function(
    ffi.Pointer<CBLReplicator> arg0, ffi.Bool reachable);
typedef DartCBLReplicator_SetHostReachable = void Function(
    ffi.Pointer<CBLReplicator> arg0, bool reachable);
typedef NativeCBLReplicator_SetSuspended = ffi.Void Function(
    ffi.Pointer<CBLReplicator> repl, ffi.Bool suspended);
typedef DartCBLReplicator_SetSuspended = void Function(
    ffi.Pointer<CBLReplicator> repl, bool suspended);
typedef CBLReplicatorActivityLevel = ffi.Uint8;
typedef DartCBLReplicatorActivityLevel = int;

final class CBLReplicatorProgress extends ffi.Struct {
  @ffi.Float()
  external double complete;

  @ffi.Uint64()
  external int documentCount;
}

final class CBLReplicatorStatus extends ffi.Struct {
  @CBLReplicatorActivityLevel()
  external int activity;

  external CBLReplicatorProgress progress;

  external CBLError error;
}

typedef NativeCBLReplicator_Status = CBLReplicatorStatus Function(
    ffi.Pointer<CBLReplicator> arg0);
typedef DartCBLReplicator_Status = CBLReplicatorStatus Function(
    ffi.Pointer<CBLReplicator> arg0);
typedef NativeCBLReplicator_PendingDocumentIDs = FLDict Function(
    ffi.Pointer<CBLReplicator> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_PendingDocumentIDs = FLDict Function(
    ffi.Pointer<CBLReplicator> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLReplicator_IsDocumentPending = ffi.Bool Function(
    ffi.Pointer<CBLReplicator> repl,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_IsDocumentPending = bool Function(
    ffi.Pointer<CBLReplicator> repl,
    FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLReplicator_PendingDocumentIDs2 = FLDict Function(
    ffi.Pointer<CBLReplicator> arg0,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_PendingDocumentIDs2 = FLDict Function(
    ffi.Pointer<CBLReplicator> arg0,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLReplicator_IsDocumentPending2 = ffi.Bool Function(
    ffi.Pointer<CBLReplicator> repl,
    FLString docID,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_IsDocumentPending2 = bool Function(
    ffi.Pointer<CBLReplicator> repl,
    FLString docID,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError);
typedef CBLReplicatorChangeListenerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLReplicator> replicator,
    ffi.Pointer<CBLReplicatorStatus> status);
typedef DartCBLReplicatorChangeListenerFunction = void Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLReplicator> replicator,
    ffi.Pointer<CBLReplicatorStatus> status);
typedef CBLReplicatorChangeListener
    = ffi.Pointer<ffi.NativeFunction<CBLReplicatorChangeListenerFunction>>;
typedef NativeCBLReplicator_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLReplicator> arg0,
        CBLReplicatorChangeListener arg1, ffi.Pointer<ffi.Void> context);
typedef DartCBLReplicator_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLReplicator> arg0,
        CBLReplicatorChangeListener arg1, ffi.Pointer<ffi.Void> context);

final class CBLReplicatedDocument extends ffi.Struct {
  external FLString ID;

  @CBLDocumentFlags()
  external int flags;

  external CBLError error;

  external FLString scope;

  external FLString collection;
}

typedef CBLDocumentReplicationListenerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLReplicator> replicator,
    ffi.Bool isPush,
    ffi.UnsignedInt numDocuments,
    ffi.Pointer<CBLReplicatedDocument> documents);
typedef DartCBLDocumentReplicationListenerFunction = void Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLReplicator> replicator,
    bool isPush,
    int numDocuments,
    ffi.Pointer<CBLReplicatedDocument> documents);
typedef CBLDocumentReplicationListener
    = ffi.Pointer<ffi.NativeFunction<CBLDocumentReplicationListenerFunction>>;
typedef NativeCBLReplicator_AddDocumentReplicationListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLReplicator> arg0,
        CBLDocumentReplicationListener arg1, ffi.Pointer<ffi.Void> context);
typedef DartCBLReplicator_AddDocumentReplicationListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLReplicator> arg0,
        CBLDocumentReplicationListener arg1, ffi.Pointer<ffi.Void> context);
typedef NativeCBLEncryptable_CreateWithNull = ffi.Pointer<CBLEncryptable>
    Function();
typedef DartCBLEncryptable_CreateWithNull = ffi.Pointer<CBLEncryptable>
    Function();
typedef NativeCBLEncryptable_CreateWithBool = ffi.Pointer<CBLEncryptable>
    Function(ffi.Bool value);
typedef DartCBLEncryptable_CreateWithBool = ffi.Pointer<CBLEncryptable>
    Function(bool value);
typedef NativeCBLEncryptable_CreateWithInt = ffi.Pointer<CBLEncryptable>
    Function(ffi.Int64 value);
typedef DartCBLEncryptable_CreateWithInt = ffi.Pointer<CBLEncryptable> Function(
    int value);
typedef NativeCBLEncryptable_CreateWithUInt = ffi.Pointer<CBLEncryptable>
    Function(ffi.Uint64 value);
typedef DartCBLEncryptable_CreateWithUInt = ffi.Pointer<CBLEncryptable>
    Function(int value);
typedef NativeCBLEncryptable_CreateWithFloat = ffi.Pointer<CBLEncryptable>
    Function(ffi.Float value);
typedef DartCBLEncryptable_CreateWithFloat = ffi.Pointer<CBLEncryptable>
    Function(double value);
typedef NativeCBLEncryptable_CreateWithDouble = ffi.Pointer<CBLEncryptable>
    Function(ffi.Double value);
typedef DartCBLEncryptable_CreateWithDouble = ffi.Pointer<CBLEncryptable>
    Function(double value);
typedef NativeCBLEncryptable_CreateWithString = ffi.Pointer<CBLEncryptable>
    Function(FLString value);
typedef DartCBLEncryptable_CreateWithString = ffi.Pointer<CBLEncryptable>
    Function(FLString value);

final class _FLValue extends ffi.Opaque {}

typedef FLValue = ffi.Pointer<_FLValue>;
typedef NativeCBLEncryptable_CreateWithValue = ffi.Pointer<CBLEncryptable>
    Function(FLValue value);
typedef DartCBLEncryptable_CreateWithValue = ffi.Pointer<CBLEncryptable>
    Function(FLValue value);
typedef NativeCBLEncryptable_CreateWithArray = ffi.Pointer<CBLEncryptable>
    Function(FLArray value);
typedef DartCBLEncryptable_CreateWithArray = ffi.Pointer<CBLEncryptable>
    Function(FLArray value);
typedef NativeCBLEncryptable_CreateWithDict = ffi.Pointer<CBLEncryptable>
    Function(FLDict value);
typedef DartCBLEncryptable_CreateWithDict = ffi.Pointer<CBLEncryptable>
    Function(FLDict value);
typedef NativeCBLEncryptable_Value = FLValue Function(
    ffi.Pointer<CBLEncryptable> encryptable);
typedef DartCBLEncryptable_Value = FLValue Function(
    ffi.Pointer<CBLEncryptable> encryptable);
typedef NativeCBLEncryptable_Properties = FLDict Function(
    ffi.Pointer<CBLEncryptable> encryptable);
typedef DartCBLEncryptable_Properties = FLDict Function(
    ffi.Pointer<CBLEncryptable> encryptable);
typedef NativeFLDict_IsEncryptableValue = ffi.Bool Function(FLDict arg0);
typedef DartFLDict_IsEncryptableValue = bool Function(FLDict arg0);
typedef NativeFLDict_GetEncryptableValue = ffi.Pointer<CBLEncryptable> Function(
    FLDict encryptableDict);
typedef DartFLDict_GetEncryptableValue = ffi.Pointer<CBLEncryptable> Function(
    FLDict encryptableDict);
typedef NativeFLSlot_SetEncryptableValue = ffi.Void Function(
    FLSlot slot, ffi.Pointer<CBLEncryptable> encryptable);
typedef DartFLSlot_SetEncryptableValue = void Function(
    FLSlot slot, ffi.Pointer<CBLEncryptable> encryptable);
typedef CBLLogDomain = ffi.Uint8;
typedef DartCBLLogDomain = int;
typedef CBLLogLevel = ffi.Uint8;
typedef DartCBLLogLevel = int;
typedef NativeCBL_Log = ffi.Void Function(
    CBLLogDomain domain, CBLLogLevel level, ffi.Pointer<ffi.Char> format);
typedef DartCBL_Log = void Function(
    int domain, int level, ffi.Pointer<ffi.Char> format);
typedef NativeCBL_LogMessage = ffi.Void Function(
    CBLLogDomain domain, CBLLogLevel level, FLSlice message);
typedef DartCBL_LogMessage = void Function(
    int domain, int level, FLSlice message);
typedef CBLLogCallbackFunction = ffi.Void Function(
    CBLLogDomain domain, CBLLogLevel level, FLString message);
typedef DartCBLLogCallbackFunction = void Function(
    DartCBLLogDomain domain, DartCBLLogLevel level, FLString message);
typedef CBLLogCallback
    = ffi.Pointer<ffi.NativeFunction<CBLLogCallbackFunction>>;
typedef NativeCBLLog_ConsoleLevel = CBLLogLevel Function();
typedef DartCBLLog_ConsoleLevel = int Function();
typedef NativeCBLLog_SetConsoleLevel = ffi.Void Function(CBLLogLevel arg0);
typedef DartCBLLog_SetConsoleLevel = void Function(int arg0);
typedef NativeCBLLog_CallbackLevel = CBLLogLevel Function();
typedef DartCBLLog_CallbackLevel = int Function();
typedef NativeCBLLog_SetCallbackLevel = ffi.Void Function(CBLLogLevel arg0);
typedef DartCBLLog_SetCallbackLevel = void Function(int arg0);
typedef NativeCBLLog_Callback = CBLLogCallback Function();
typedef DartCBLLog_Callback = CBLLogCallback Function();
typedef NativeCBLLog_SetCallback = ffi.Void Function(CBLLogCallback callback);
typedef DartCBLLog_SetCallback = void Function(CBLLogCallback callback);

final class CBLLogFileConfiguration extends ffi.Struct {
  @CBLLogLevel()
  external int level;

  external FLString directory;

  @ffi.Uint32()
  external int maxRotateCount;

  @ffi.Size()
  external int maxSize;

  @ffi.Bool()
  external bool usePlaintext;
}

typedef NativeCBLLog_FileConfig = ffi.Pointer<CBLLogFileConfiguration>
    Function();
typedef DartCBLLog_FileConfig = ffi.Pointer<CBLLogFileConfiguration> Function();
typedef NativeCBLLog_SetFileConfig = ffi.Bool Function(
    CBLLogFileConfiguration arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLLog_SetFileConfig = bool Function(
    CBLLogFileConfiguration arg0, ffi.Pointer<CBLError> outError);

final class CBLPredictiveModel extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          FLMutableDict Function(
              ffi.Pointer<ffi.Void> context, FLDict input)>> prediction;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> context)>>
      unregistered;
}

typedef NativeCBL_RegisterPredictiveModel = ffi.Void Function(
    FLString name, CBLPredictiveModel model);
typedef DartCBL_RegisterPredictiveModel = void Function(
    FLString name, CBLPredictiveModel model);
typedef NativeCBL_UnregisterPredictiveModel = ffi.Void Function(FLString name);
typedef DartCBL_UnregisterPredictiveModel = void Function(FLString name);
typedef NativeCBLDatabase_CreateQuery = ffi.Pointer<CBLQuery> Function(
    ffi.Pointer<CBLDatabase> db,
    CBLQueryLanguage language,
    FLString queryString,
    ffi.Pointer<ffi.Int> outErrorPos,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CreateQuery = ffi.Pointer<CBLQuery> Function(
    ffi.Pointer<CBLDatabase> db,
    int language,
    FLString queryString,
    ffi.Pointer<ffi.Int> outErrorPos,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLQuery_SetParameters = ffi.Void Function(
    ffi.Pointer<CBLQuery> query, FLDict parameters);
typedef DartCBLQuery_SetParameters = void Function(
    ffi.Pointer<CBLQuery> query, FLDict parameters);
typedef NativeCBLQuery_Parameters = FLDict Function(
    ffi.Pointer<CBLQuery> query);
typedef DartCBLQuery_Parameters = FLDict Function(ffi.Pointer<CBLQuery> query);
typedef NativeCBLQuery_Execute = ffi.Pointer<CBLResultSet> Function(
    ffi.Pointer<CBLQuery> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLQuery_Execute = ffi.Pointer<CBLResultSet> Function(
    ffi.Pointer<CBLQuery> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLQuery_Explain = FLSliceResult Function(
    ffi.Pointer<CBLQuery> arg0);
typedef DartCBLQuery_Explain = FLSliceResult Function(
    ffi.Pointer<CBLQuery> arg0);
typedef NativeCBLQuery_ColumnCount = ffi.UnsignedInt Function(
    ffi.Pointer<CBLQuery> arg0);
typedef DartCBLQuery_ColumnCount = int Function(ffi.Pointer<CBLQuery> arg0);
typedef NativeCBLQuery_ColumnName = FLSlice Function(
    ffi.Pointer<CBLQuery> arg0, ffi.UnsignedInt columnIndex);
typedef DartCBLQuery_ColumnName = FLSlice Function(
    ffi.Pointer<CBLQuery> arg0, int columnIndex);
typedef NativeCBLResultSet_Next = ffi.Bool Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef DartCBLResultSet_Next = bool Function(ffi.Pointer<CBLResultSet> arg0);
typedef NativeCBLResultSet_ValueAtIndex = FLValue Function(
    ffi.Pointer<CBLResultSet> arg0, ffi.UnsignedInt index);
typedef DartCBLResultSet_ValueAtIndex = FLValue Function(
    ffi.Pointer<CBLResultSet> arg0, int index);
typedef NativeCBLResultSet_ValueForKey = FLValue Function(
    ffi.Pointer<CBLResultSet> arg0, FLString key);
typedef DartCBLResultSet_ValueForKey = FLValue Function(
    ffi.Pointer<CBLResultSet> arg0, FLString key);
typedef NativeCBLResultSet_ResultArray = FLArray Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef DartCBLResultSet_ResultArray = FLArray Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef NativeCBLResultSet_ResultDict = FLDict Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef DartCBLResultSet_ResultDict = FLDict Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef NativeCBLResultSet_GetQuery = ffi.Pointer<CBLQuery> Function(
    ffi.Pointer<CBLResultSet> rs);
typedef DartCBLResultSet_GetQuery = ffi.Pointer<CBLQuery> Function(
    ffi.Pointer<CBLResultSet> rs);
typedef CBLQueryChangeListenerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLQuery> query,
    ffi.Pointer<CBLListenerToken> token);
typedef DartCBLQueryChangeListenerFunction = void Function(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLQuery> query,
    ffi.Pointer<CBLListenerToken> token);
typedef CBLQueryChangeListener
    = ffi.Pointer<ffi.NativeFunction<CBLQueryChangeListenerFunction>>;
typedef NativeCBLQuery_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLQuery> query,
        CBLQueryChangeListener listener, ffi.Pointer<ffi.Void> context);
typedef DartCBLQuery_AddChangeListener = ffi.Pointer<CBLListenerToken> Function(
    ffi.Pointer<CBLQuery> query,
    CBLQueryChangeListener listener,
    ffi.Pointer<ffi.Void> context);
typedef NativeCBLQuery_CopyCurrentResults = ffi.Pointer<CBLResultSet> Function(
    ffi.Pointer<CBLQuery> query,
    ffi.Pointer<CBLListenerToken> listener,
    ffi.Pointer<CBLError> outError);
typedef DartCBLQuery_CopyCurrentResults = ffi.Pointer<CBLResultSet> Function(
    ffi.Pointer<CBLQuery> query,
    ffi.Pointer<CBLListenerToken> listener,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLQueryIndex_Name = FLString Function(
    ffi.Pointer<CBLQueryIndex> index);
typedef DartCBLQueryIndex_Name = FLString Function(
    ffi.Pointer<CBLQueryIndex> index);
typedef NativeCBLQueryIndex_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLQueryIndex> index);
typedef DartCBLQueryIndex_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLQueryIndex> index);
typedef NativeCBLQueryIndex_BeginUpdate = ffi.Pointer<CBLIndexUpdater> Function(
    ffi.Pointer<CBLQueryIndex> index,
    ffi.Size limit,
    ffi.Pointer<CBLError> outError);
typedef DartCBLQueryIndex_BeginUpdate = ffi.Pointer<CBLIndexUpdater> Function(
    ffi.Pointer<CBLQueryIndex> index,
    int limit,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLIndexUpdater_Count = ffi.Size Function(
    ffi.Pointer<CBLIndexUpdater> updater);
typedef DartCBLIndexUpdater_Count = int Function(
    ffi.Pointer<CBLIndexUpdater> updater);
typedef NativeCBLIndexUpdater_Value = FLValue Function(
    ffi.Pointer<CBLIndexUpdater> updater, ffi.Size index);
typedef DartCBLIndexUpdater_Value = FLValue Function(
    ffi.Pointer<CBLIndexUpdater> updater, int index);
typedef NativeCBLIndexUpdater_SetVector = ffi.Bool Function(
    ffi.Pointer<CBLIndexUpdater> updater,
    ffi.Size index,
    ffi.Pointer<ffi.Float> vector,
    ffi.Size dimension,
    ffi.Pointer<CBLError> outError);
typedef DartCBLIndexUpdater_SetVector = bool Function(
    ffi.Pointer<CBLIndexUpdater> updater,
    int index,
    ffi.Pointer<ffi.Float> vector,
    int dimension,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLIndexUpdater_SkipVector = ffi.Void Function(
    ffi.Pointer<CBLIndexUpdater> updater, ffi.Size index);
typedef DartCBLIndexUpdater_SkipVector = void Function(
    ffi.Pointer<CBLIndexUpdater> updater, int index);
typedef NativeCBLIndexUpdater_Finish = ffi.Bool Function(
    ffi.Pointer<CBLIndexUpdater> updater, ffi.Pointer<CBLError> outError);
typedef DartCBLIndexUpdater_Finish = bool Function(
    ffi.Pointer<CBLIndexUpdater> updater, ffi.Pointer<CBLError> outError);
typedef NativeCBLScope_Name = FLString Function(ffi.Pointer<CBLScope> scope);
typedef DartCBLScope_Name = FLString Function(ffi.Pointer<CBLScope> scope);
typedef NativeCBLScope_Database = ffi.Pointer<CBLDatabase> Function(
    ffi.Pointer<CBLScope> scope);
typedef DartCBLScope_Database = ffi.Pointer<CBLDatabase> Function(
    ffi.Pointer<CBLScope> scope);
typedef NativeCBLScope_CollectionNames = FLMutableArray Function(
    ffi.Pointer<CBLScope> scope, ffi.Pointer<CBLError> outError);
typedef DartCBLScope_CollectionNames = FLMutableArray Function(
    ffi.Pointer<CBLScope> scope, ffi.Pointer<CBLError> outError);
typedef NativeCBLScope_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLScope> scope,
    FLString collectionName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLScope_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLScope> scope,
    FLString collectionName,
    ffi.Pointer<CBLError> outError);
typedef FLHeapSlice = FLSlice;
typedef NativeFLSlice_Equal = ffi.Bool Function(FLSlice a, FLSlice b);
typedef DartFLSlice_Equal = bool Function(FLSlice a, FLSlice b);
typedef NativeFLSlice_Compare = ffi.Int Function(FLSlice arg0, FLSlice arg1);
typedef DartFLSlice_Compare = int Function(FLSlice arg0, FLSlice arg1);
typedef NativeFLSlice_Hash = ffi.Uint32 Function(FLSlice s);
typedef DartFLSlice_Hash = int Function(FLSlice s);
typedef NativeFLSlice_ToCString = ffi.Bool Function(
    FLSlice s, ffi.Pointer<ffi.Char> buffer, ffi.Size capacity);
typedef DartFLSlice_ToCString = bool Function(
    FLSlice s, ffi.Pointer<ffi.Char> buffer, int capacity);
typedef NativeFLSliceResult_New = FLSliceResult Function(ffi.Size arg0);
typedef DartFLSliceResult_New = FLSliceResult Function(int arg0);
typedef NativeFLSlice_Copy = FLSliceResult Function(FLSlice arg0);
typedef DartFLSlice_Copy = FLSliceResult Function(FLSlice arg0);
typedef NativeFLBuf_Retain = ffi.Void Function(ffi.Pointer<ffi.Void> arg0);
typedef DartFLBuf_Retain = void Function(ffi.Pointer<ffi.Void> arg0);
typedef NativeFLBuf_Release = ffi.Void Function(ffi.Pointer<ffi.Void> arg0);
typedef DartFLBuf_Release = void Function(ffi.Pointer<ffi.Void> arg0);
typedef NativeFL_WipeMemory = ffi.Void Function(
    ffi.Pointer<ffi.Void> dst, ffi.Size size);
typedef DartFL_WipeMemory = void Function(ffi.Pointer<ffi.Void> dst, int size);

final class _FLEncoder extends ffi.Opaque {}

typedef FLEncoder = ffi.Pointer<_FLEncoder>;

final class _FLDoc extends ffi.Opaque {}

typedef FLDoc = ffi.Pointer<_FLDoc>;

final class _FLSharedKeys extends ffi.Opaque {}

typedef FLSharedKeys = ffi.Pointer<_FLSharedKeys>;

sealed class FLError {
  static const kFLNoError = 0;
  static const kFLMemoryError = 1;
  static const kFLOutOfRange = 2;
  static const kFLInvalidData = 3;
  static const kFLEncodeError = 4;
  static const kFLJSONError = 5;
  static const kFLUnknownValue = 6;
  static const kFLInternalError = 7;
  static const kFLNotFound = 8;
  static const kFLSharedKeysStateError = 9;
  static const kFLPOSIXError = 10;
  static const kFLUnsupported = 11;
}

sealed class FLTrust {
  static const kFLUntrusted = 0;
  static const kFLTrusted = 1;
}

typedef FLTimestamp = ffi.Int64;
typedef DartFLTimestamp = int;
typedef NativeFLTimestamp_Now = FLTimestamp Function();
typedef DartFLTimestamp_Now = int Function();
typedef NativeFLTimestamp_ToString = FLStringResult Function(
    FLTimestamp timestamp, ffi.Bool asUTC);
typedef DartFLTimestamp_ToString = FLStringResult Function(
    int timestamp, bool asUTC);
typedef NativeFLTimestamp_FromString = FLTimestamp Function(FLString str);
typedef DartFLTimestamp_FromString = int Function(FLString str);
typedef NativeFLArray_Count = ffi.Uint32 Function(FLArray arg0);
typedef DartFLArray_Count = int Function(FLArray arg0);
typedef NativeFLArray_IsEmpty = ffi.Bool Function(FLArray arg0);
typedef DartFLArray_IsEmpty = bool Function(FLArray arg0);
typedef NativeFLArray_AsMutable = FLMutableArray Function(FLArray arg0);
typedef DartFLArray_AsMutable = FLMutableArray Function(FLArray arg0);
typedef NativeFLArray_Get = FLValue Function(FLArray arg0, ffi.Uint32 index);
typedef DartFLArray_Get = FLValue Function(FLArray arg0, int index);

final class FLArrayIterator extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private1;

  @ffi.Uint32()
  external int _private2;

  @ffi.Bool()
  external bool _private3;

  external ffi.Pointer<ffi.Void> _private4;
}

typedef NativeFLArrayIterator_Begin = ffi.Void Function(
    FLArray arg0, ffi.Pointer<FLArrayIterator> arg1);
typedef DartFLArrayIterator_Begin = void Function(
    FLArray arg0, ffi.Pointer<FLArrayIterator> arg1);
typedef NativeFLArrayIterator_GetValue = FLValue Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef DartFLArrayIterator_GetValue = FLValue Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef NativeFLArrayIterator_GetValueAt = FLValue Function(
    ffi.Pointer<FLArrayIterator> arg0, ffi.Uint32 offset);
typedef DartFLArrayIterator_GetValueAt = FLValue Function(
    ffi.Pointer<FLArrayIterator> arg0, int offset);
typedef NativeFLArrayIterator_GetCount = ffi.Uint32 Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef DartFLArrayIterator_GetCount = int Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef NativeFLArrayIterator_Next = ffi.Bool Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef DartFLArrayIterator_Next = bool Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef NativeFLDict_Count = ffi.Uint32 Function(FLDict arg0);
typedef DartFLDict_Count = int Function(FLDict arg0);
typedef NativeFLDict_IsEmpty = ffi.Bool Function(FLDict arg0);
typedef DartFLDict_IsEmpty = bool Function(FLDict arg0);
typedef NativeFLDict_AsMutable = FLMutableDict Function(FLDict arg0);
typedef DartFLDict_AsMutable = FLMutableDict Function(FLDict arg0);
typedef NativeFLDict_Get = FLValue Function(FLDict arg0, FLSlice keyString);
typedef DartFLDict_Get = FLValue Function(FLDict arg0, FLSlice keyString);

final class FLDictIterator extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private1;

  @ffi.Uint32()
  external int _private2;

  @ffi.Bool()
  external bool _private3;

  external ffi.Pointer<ffi.Void> _private4;

  external ffi.Pointer<ffi.Void> _private5;

  external ffi.Pointer<ffi.Void> _private6;

  external ffi.Pointer<ffi.Void> _private7;

  @ffi.Int()
  external int _private8;
}

typedef NativeFLDictIterator_Begin = ffi.Void Function(
    FLDict arg0, ffi.Pointer<FLDictIterator> arg1);
typedef DartFLDictIterator_Begin = void Function(
    FLDict arg0, ffi.Pointer<FLDictIterator> arg1);
typedef NativeFLDictIterator_GetKey = FLValue Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_GetKey = FLValue Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_GetKeyString = FLString Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_GetKeyString = FLString Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_GetValue = FLValue Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_GetValue = FLValue Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_GetCount = ffi.Uint32 Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_GetCount = int Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_Next = ffi.Bool Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_Next = bool Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_End = ffi.Void Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_End = void Function(
    ffi.Pointer<FLDictIterator> arg0);

final class FLDictKey extends ffi.Struct {
  external FLSlice private1;

  external ffi.Pointer<ffi.Void> private2;

  @ffi.Uint32()
  external int private3;

  @ffi.Uint32()
  external int private4;

  @ffi.Bool()
  external bool private5;
}

typedef NativeFLDictKey_Init = FLDictKey Function(FLSlice string);
typedef DartFLDictKey_Init = FLDictKey Function(FLSlice string);
typedef NativeFLDictKey_GetString = FLString Function(
    ffi.Pointer<FLDictKey> arg0);
typedef DartFLDictKey_GetString = FLString Function(
    ffi.Pointer<FLDictKey> arg0);
typedef NativeFLDict_GetWithKey = FLValue Function(
    FLDict arg0, ffi.Pointer<FLDictKey> arg1);
typedef DartFLDict_GetWithKey = FLValue Function(
    FLDict arg0, ffi.Pointer<FLDictKey> arg1);

final class _FLDeepIterator extends ffi.Opaque {}

typedef FLDeepIterator = ffi.Pointer<_FLDeepIterator>;
typedef NativeFLDeepIterator_New = FLDeepIterator Function(FLValue arg0);
typedef DartFLDeepIterator_New = FLDeepIterator Function(FLValue arg0);
typedef NativeFLDeepIterator_Free = ffi.Void Function(FLDeepIterator arg0);
typedef DartFLDeepIterator_Free = void Function(FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetValue = FLValue Function(FLDeepIterator arg0);
typedef DartFLDeepIterator_GetValue = FLValue Function(FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetParent = FLValue Function(FLDeepIterator arg0);
typedef DartFLDeepIterator_GetParent = FLValue Function(FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetKey = FLSlice Function(FLDeepIterator arg0);
typedef DartFLDeepIterator_GetKey = FLSlice Function(FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetIndex = ffi.Uint32 Function(
    FLDeepIterator arg0);
typedef DartFLDeepIterator_GetIndex = int Function(FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetDepth = ffi.Size Function(FLDeepIterator arg0);
typedef DartFLDeepIterator_GetDepth = int Function(FLDeepIterator arg0);
typedef NativeFLDeepIterator_SkipChildren = ffi.Void Function(
    FLDeepIterator arg0);
typedef DartFLDeepIterator_SkipChildren = void Function(FLDeepIterator arg0);
typedef NativeFLDeepIterator_Next = ffi.Bool Function(FLDeepIterator arg0);
typedef DartFLDeepIterator_Next = bool Function(FLDeepIterator arg0);

final class FLPathComponent extends ffi.Struct {
  external FLSlice key;

  @ffi.Uint32()
  external int index;
}

typedef NativeFLDeepIterator_GetPath = ffi.Void Function(
    FLDeepIterator arg0,
    ffi.Pointer<ffi.Pointer<FLPathComponent>> outPath,
    ffi.Pointer<ffi.Size> outDepth);
typedef DartFLDeepIterator_GetPath = void Function(
    FLDeepIterator arg0,
    ffi.Pointer<ffi.Pointer<FLPathComponent>> outPath,
    ffi.Pointer<ffi.Size> outDepth);
typedef NativeFLDeepIterator_GetPathString = FLSliceResult Function(
    FLDeepIterator arg0);
typedef DartFLDeepIterator_GetPathString = FLSliceResult Function(
    FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetJSONPointer = FLSliceResult Function(
    FLDeepIterator arg0);
typedef DartFLDeepIterator_GetJSONPointer = FLSliceResult Function(
    FLDeepIterator arg0);
typedef NativeFLDoc_FromResultData = FLDoc Function(FLSliceResult data,
    ffi.UnsignedInt arg1, FLSharedKeys arg2, FLSlice externData);
typedef DartFLDoc_FromResultData = FLDoc Function(
    FLSliceResult data, int arg1, FLSharedKeys arg2, FLSlice externData);
typedef NativeFLDoc_Release = ffi.Void Function(FLDoc arg0);
typedef DartFLDoc_Release = void Function(FLDoc arg0);
typedef NativeFLDoc_Retain = FLDoc Function(FLDoc arg0);
typedef DartFLDoc_Retain = FLDoc Function(FLDoc arg0);
typedef NativeFLDoc_GetData = FLSlice Function(FLDoc arg0);
typedef DartFLDoc_GetData = FLSlice Function(FLDoc arg0);
typedef NativeFLDoc_GetAllocedData = FLSliceResult Function(FLDoc arg0);
typedef DartFLDoc_GetAllocedData = FLSliceResult Function(FLDoc arg0);
typedef NativeFLDoc_GetRoot = FLValue Function(FLDoc arg0);
typedef DartFLDoc_GetRoot = FLValue Function(FLDoc arg0);
typedef NativeFLDoc_GetSharedKeys = FLSharedKeys Function(FLDoc arg0);
typedef DartFLDoc_GetSharedKeys = FLSharedKeys Function(FLDoc arg0);
typedef NativeFLValue_FindDoc = FLDoc Function(FLValue arg0);
typedef DartFLValue_FindDoc = FLDoc Function(FLValue arg0);
typedef NativeFLDoc_SetAssociated = ffi.Bool Function(
    FLDoc doc, ffi.Pointer<ffi.Void> pointer, ffi.Pointer<ffi.Char> type);
typedef DartFLDoc_SetAssociated = bool Function(
    FLDoc doc, ffi.Pointer<ffi.Void> pointer, ffi.Pointer<ffi.Char> type);
typedef NativeFLDoc_GetAssociated = ffi.Pointer<ffi.Void> Function(
    FLDoc doc, ffi.Pointer<ffi.Char> type);
typedef DartFLDoc_GetAssociated = ffi.Pointer<ffi.Void> Function(
    FLDoc doc, ffi.Pointer<ffi.Char> type);

sealed class FLEncoderFormat {
  static const kFLEncodeFleece = 0;
  static const kFLEncodeJSON = 1;
  static const kFLEncodeJSON5 = 2;
}

typedef NativeFLEncoder_New = FLEncoder Function();
typedef DartFLEncoder_New = FLEncoder Function();
typedef NativeFLEncoder_NewWithOptions = FLEncoder Function(
    ffi.UnsignedInt format, ffi.Size reserveSize, ffi.Bool uniqueStrings);
typedef DartFLEncoder_NewWithOptions = FLEncoder Function(
    int format, int reserveSize, bool uniqueStrings);

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __darwin_off_t = __int64_t;
typedef fpos_t = __darwin_off_t;

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef FILE = __sFILE;
typedef NativeFLEncoder_NewWritingToFile = FLEncoder Function(
    ffi.Pointer<FILE> arg0, ffi.Bool uniqueStrings);
typedef DartFLEncoder_NewWritingToFile = FLEncoder Function(
    ffi.Pointer<FILE> arg0, bool uniqueStrings);
typedef NativeFLEncoder_Free = ffi.Void Function(FLEncoder arg0);
typedef DartFLEncoder_Free = void Function(FLEncoder arg0);
typedef NativeFLEncoder_SetSharedKeys = ffi.Void Function(
    FLEncoder arg0, FLSharedKeys arg1);
typedef DartFLEncoder_SetSharedKeys = void Function(
    FLEncoder arg0, FLSharedKeys arg1);
typedef NativeFLEncoder_SetExtraInfo = ffi.Void Function(
    FLEncoder arg0, ffi.Pointer<ffi.Void> info);
typedef DartFLEncoder_SetExtraInfo = void Function(
    FLEncoder arg0, ffi.Pointer<ffi.Void> info);
typedef NativeFLEncoder_GetExtraInfo = ffi.Pointer<ffi.Void> Function(
    FLEncoder arg0);
typedef DartFLEncoder_GetExtraInfo = ffi.Pointer<ffi.Void> Function(
    FLEncoder arg0);
typedef NativeFLEncoder_Reset = ffi.Void Function(FLEncoder arg0);
typedef DartFLEncoder_Reset = void Function(FLEncoder arg0);
typedef NativeFLEncoder_BytesWritten = ffi.Size Function(FLEncoder arg0);
typedef DartFLEncoder_BytesWritten = int Function(FLEncoder arg0);
typedef NativeFLEncoder_WriteNull = ffi.Bool Function(FLEncoder arg0);
typedef DartFLEncoder_WriteNull = bool Function(FLEncoder arg0);
typedef NativeFLEncoder_WriteUndefined = ffi.Bool Function(FLEncoder arg0);
typedef DartFLEncoder_WriteUndefined = bool Function(FLEncoder arg0);
typedef NativeFLEncoder_WriteBool = ffi.Bool Function(
    FLEncoder arg0, ffi.Bool arg1);
typedef DartFLEncoder_WriteBool = bool Function(FLEncoder arg0, bool arg1);
typedef NativeFLEncoder_WriteInt = ffi.Bool Function(
    FLEncoder arg0, ffi.Int64 arg1);
typedef DartFLEncoder_WriteInt = bool Function(FLEncoder arg0, int arg1);
typedef NativeFLEncoder_WriteUInt = ffi.Bool Function(
    FLEncoder arg0, ffi.Uint64 arg1);
typedef DartFLEncoder_WriteUInt = bool Function(FLEncoder arg0, int arg1);
typedef NativeFLEncoder_WriteFloat = ffi.Bool Function(
    FLEncoder arg0, ffi.Float arg1);
typedef DartFLEncoder_WriteFloat = bool Function(FLEncoder arg0, double arg1);
typedef NativeFLEncoder_WriteDouble = ffi.Bool Function(
    FLEncoder arg0, ffi.Double arg1);
typedef DartFLEncoder_WriteDouble = bool Function(FLEncoder arg0, double arg1);
typedef NativeFLEncoder_WriteString = ffi.Bool Function(
    FLEncoder arg0, FLString arg1);
typedef DartFLEncoder_WriteString = bool Function(
    FLEncoder arg0, FLString arg1);
typedef NativeFLEncoder_WriteDateString = ffi.Bool Function(
    FLEncoder encoder, FLTimestamp ts, ffi.Bool asUTC);
typedef DartFLEncoder_WriteDateString = bool Function(
    FLEncoder encoder, int ts, bool asUTC);
typedef NativeFLEncoder_WriteData = ffi.Bool Function(
    FLEncoder arg0, FLSlice arg1);
typedef DartFLEncoder_WriteData = bool Function(FLEncoder arg0, FLSlice arg1);
typedef NativeFLEncoder_WriteValue = ffi.Bool Function(
    FLEncoder arg0, FLValue arg1);
typedef DartFLEncoder_WriteValue = bool Function(FLEncoder arg0, FLValue arg1);
typedef NativeFLEncoder_BeginArray = ffi.Bool Function(
    FLEncoder arg0, ffi.Size reserveCount);
typedef DartFLEncoder_BeginArray = bool Function(
    FLEncoder arg0, int reserveCount);
typedef NativeFLEncoder_EndArray = ffi.Bool Function(FLEncoder arg0);
typedef DartFLEncoder_EndArray = bool Function(FLEncoder arg0);
typedef NativeFLEncoder_BeginDict = ffi.Bool Function(
    FLEncoder arg0, ffi.Size reserveCount);
typedef DartFLEncoder_BeginDict = bool Function(
    FLEncoder arg0, int reserveCount);
typedef NativeFLEncoder_WriteKey = ffi.Bool Function(
    FLEncoder arg0, FLString arg1);
typedef DartFLEncoder_WriteKey = bool Function(FLEncoder arg0, FLString arg1);
typedef NativeFLEncoder_WriteKeyValue = ffi.Bool Function(
    FLEncoder arg0, FLValue arg1);
typedef DartFLEncoder_WriteKeyValue = bool Function(
    FLEncoder arg0, FLValue arg1);
typedef NativeFLEncoder_EndDict = ffi.Bool Function(FLEncoder arg0);
typedef DartFLEncoder_EndDict = bool Function(FLEncoder arg0);
typedef NativeFLEncoder_WriteRaw = ffi.Bool Function(
    FLEncoder arg0, FLSlice arg1);
typedef DartFLEncoder_WriteRaw = bool Function(FLEncoder arg0, FLSlice arg1);
typedef NativeFLEncoder_FinishDoc = FLDoc Function(
    FLEncoder arg0, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLEncoder_FinishDoc = FLDoc Function(
    FLEncoder arg0, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncoder_Finish = FLSliceResult Function(
    FLEncoder arg0, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLEncoder_Finish = FLSliceResult Function(
    FLEncoder arg0, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncoder_GetError = ffi.UnsignedInt Function(FLEncoder arg0);
typedef DartFLEncoder_GetError = int Function(FLEncoder arg0);
typedef NativeFLEncoder_GetErrorMessage = ffi.Pointer<ffi.Char> Function(
    FLEncoder arg0);
typedef DartFLEncoder_GetErrorMessage = ffi.Pointer<ffi.Char> Function(
    FLEncoder arg0);
typedef NativeFLValue_ToJSON = FLStringResult Function(FLValue arg0);
typedef DartFLValue_ToJSON = FLStringResult Function(FLValue arg0);
typedef NativeFLValue_ToJSON5 = FLStringResult Function(FLValue arg0);
typedef DartFLValue_ToJSON5 = FLStringResult Function(FLValue arg0);
typedef NativeFLValue_ToJSONX = FLStringResult Function(
    FLValue v, ffi.Bool json5, ffi.Bool canonicalForm);
typedef DartFLValue_ToJSONX = FLStringResult Function(
    FLValue v, bool json5, bool canonicalForm);
typedef NativeFLDoc_FromJSON = FLDoc Function(
    FLSlice json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLDoc_FromJSON = FLDoc Function(
    FLSlice json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLMutableArray_NewFromJSON = FLMutableArray Function(
    FLString json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLMutableArray_NewFromJSON = FLMutableArray Function(
    FLString json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLMutableDict_NewFromJSON = FLMutableDict Function(
    FLString json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLMutableDict_NewFromJSON = FLMutableDict Function(
    FLString json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncoder_ConvertJSON = ffi.Bool Function(
    FLEncoder arg0, FLSlice json);
typedef DartFLEncoder_ConvertJSON = bool Function(FLEncoder arg0, FLSlice json);

final class _FLKeyPath extends ffi.Opaque {}

typedef FLKeyPath = ffi.Pointer<_FLKeyPath>;
typedef NativeFLKeyPath_New = FLKeyPath Function(
    FLSlice specifier, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLKeyPath_New = FLKeyPath Function(
    FLSlice specifier, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLKeyPath_Free = ffi.Void Function(FLKeyPath arg0);
typedef DartFLKeyPath_Free = void Function(FLKeyPath arg0);
typedef NativeFLKeyPath_Eval = FLValue Function(FLKeyPath arg0, FLValue root);
typedef DartFLKeyPath_Eval = FLValue Function(FLKeyPath arg0, FLValue root);
typedef NativeFLKeyPath_EvalOnce = FLValue Function(
    FLSlice specifier, FLValue root, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLKeyPath_EvalOnce = FLValue Function(
    FLSlice specifier, FLValue root, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLKeyPath_ToString = FLStringResult Function(FLKeyPath path);
typedef DartFLKeyPath_ToString = FLStringResult Function(FLKeyPath path);
typedef NativeFLKeyPath_Equals = ffi.Bool Function(
    FLKeyPath path1, FLKeyPath path2);
typedef DartFLKeyPath_Equals = bool Function(FLKeyPath path1, FLKeyPath path2);
typedef NativeFLKeyPath_GetElement = ffi.Bool Function(
    FLKeyPath arg0,
    ffi.Size i,
    ffi.Pointer<FLSlice> outDictKey,
    ffi.Pointer<ffi.Int32> outArrayIndex);
typedef DartFLKeyPath_GetElement = bool Function(FLKeyPath arg0, int i,
    ffi.Pointer<FLSlice> outDictKey, ffi.Pointer<ffi.Int32> outArrayIndex);

sealed class FLValueType {
  static const kFLUndefined = -1;
  static const kFLNull = 0;
  static const kFLBoolean = 1;
  static const kFLNumber = 2;
  static const kFLString = 3;
  static const kFLData = 4;
  static const kFLArray = 5;
  static const kFLDict = 6;
}

typedef NativeFLValue_GetType = ffi.Int Function(FLValue arg0);
typedef DartFLValue_GetType = int Function(FLValue arg0);
typedef NativeFLValue_IsInteger = ffi.Bool Function(FLValue arg0);
typedef DartFLValue_IsInteger = bool Function(FLValue arg0);
typedef NativeFLValue_IsUnsigned = ffi.Bool Function(FLValue arg0);
typedef DartFLValue_IsUnsigned = bool Function(FLValue arg0);
typedef NativeFLValue_IsDouble = ffi.Bool Function(FLValue arg0);
typedef DartFLValue_IsDouble = bool Function(FLValue arg0);
typedef NativeFLValue_AsBool = ffi.Bool Function(FLValue arg0);
typedef DartFLValue_AsBool = bool Function(FLValue arg0);
typedef NativeFLValue_AsInt = ffi.Int64 Function(FLValue arg0);
typedef DartFLValue_AsInt = int Function(FLValue arg0);
typedef NativeFLValue_AsUnsigned = ffi.Uint64 Function(FLValue arg0);
typedef DartFLValue_AsUnsigned = int Function(FLValue arg0);
typedef NativeFLValue_AsFloat = ffi.Float Function(FLValue arg0);
typedef DartFLValue_AsFloat = double Function(FLValue arg0);
typedef NativeFLValue_AsDouble = ffi.Double Function(FLValue arg0);
typedef DartFLValue_AsDouble = double Function(FLValue arg0);
typedef NativeFLValue_AsString = FLString Function(FLValue arg0);
typedef DartFLValue_AsString = FLString Function(FLValue arg0);
typedef NativeFLValue_AsTimestamp = FLTimestamp Function(FLValue arg0);
typedef DartFLValue_AsTimestamp = int Function(FLValue arg0);
typedef NativeFLValue_AsData = FLSlice Function(FLValue arg0);
typedef DartFLValue_AsData = FLSlice Function(FLValue arg0);
typedef NativeFLValue_AsArray = FLArray Function(FLValue arg0);
typedef DartFLValue_AsArray = FLArray Function(FLValue arg0);
typedef NativeFLValue_AsDict = FLDict Function(FLValue arg0);
typedef DartFLValue_AsDict = FLDict Function(FLValue arg0);
typedef NativeFLValue_ToString = FLStringResult Function(FLValue arg0);
typedef DartFLValue_ToString = FLStringResult Function(FLValue arg0);
typedef NativeFLValue_IsEqual = ffi.Bool Function(FLValue v1, FLValue v2);
typedef DartFLValue_IsEqual = bool Function(FLValue v1, FLValue v2);
typedef NativeFLValue_IsMutable = ffi.Bool Function(FLValue arg0);
typedef DartFLValue_IsMutable = bool Function(FLValue arg0);
typedef NativeFLValue_Retain = FLValue Function(FLValue arg0);
typedef DartFLValue_Retain = FLValue Function(FLValue arg0);
typedef NativeFLValue_Release = ffi.Void Function(FLValue arg0);
typedef DartFLValue_Release = void Function(FLValue arg0);

sealed class FLCopyFlags {
  static const kFLDefaultCopy = 0;
  static const kFLDeepCopy = 1;
  static const kFLCopyImmutables = 2;
  static const kFLDeepCopyImmutables = 3;
}

typedef NativeFLArray_MutableCopy = FLMutableArray Function(
    FLArray arg0, ffi.UnsignedInt arg1);
typedef DartFLArray_MutableCopy = FLMutableArray Function(
    FLArray arg0, int arg1);
typedef NativeFLMutableArray_New = FLMutableArray Function();
typedef DartFLMutableArray_New = FLMutableArray Function();
typedef NativeFLMutableArray_GetSource = FLArray Function(FLMutableArray arg0);
typedef DartFLMutableArray_GetSource = FLArray Function(FLMutableArray arg0);
typedef NativeFLMutableArray_IsChanged = ffi.Bool Function(FLMutableArray arg0);
typedef DartFLMutableArray_IsChanged = bool Function(FLMutableArray arg0);
typedef NativeFLMutableArray_SetChanged = ffi.Void Function(
    FLMutableArray arg0, ffi.Bool changed);
typedef DartFLMutableArray_SetChanged = void Function(
    FLMutableArray arg0, bool changed);
typedef NativeFLMutableArray_Insert = ffi.Void Function(
    FLMutableArray array, ffi.Uint32 firstIndex, ffi.Uint32 count);
typedef DartFLMutableArray_Insert = void Function(
    FLMutableArray array, int firstIndex, int count);
typedef NativeFLMutableArray_Remove = ffi.Void Function(
    FLMutableArray array, ffi.Uint32 firstIndex, ffi.Uint32 count);
typedef DartFLMutableArray_Remove = void Function(
    FLMutableArray array, int firstIndex, int count);
typedef NativeFLMutableArray_Resize = ffi.Void Function(
    FLMutableArray array, ffi.Uint32 size);
typedef DartFLMutableArray_Resize = void Function(
    FLMutableArray array, int size);
typedef NativeFLMutableArray_GetMutableArray = FLMutableArray Function(
    FLMutableArray arg0, ffi.Uint32 index);
typedef DartFLMutableArray_GetMutableArray = FLMutableArray Function(
    FLMutableArray arg0, int index);
typedef NativeFLMutableArray_GetMutableDict = FLMutableDict Function(
    FLMutableArray arg0, ffi.Uint32 index);
typedef DartFLMutableArray_GetMutableDict = FLMutableDict Function(
    FLMutableArray arg0, int index);
typedef NativeFLDict_MutableCopy = FLMutableDict Function(
    FLDict source, ffi.UnsignedInt arg1);
typedef DartFLDict_MutableCopy = FLMutableDict Function(
    FLDict source, int arg1);
typedef NativeFLMutableDict_New = FLMutableDict Function();
typedef DartFLMutableDict_New = FLMutableDict Function();
typedef NativeFLMutableDict_GetSource = FLDict Function(FLMutableDict arg0);
typedef DartFLMutableDict_GetSource = FLDict Function(FLMutableDict arg0);
typedef NativeFLMutableDict_IsChanged = ffi.Bool Function(FLMutableDict arg0);
typedef DartFLMutableDict_IsChanged = bool Function(FLMutableDict arg0);
typedef NativeFLMutableDict_SetChanged = ffi.Void Function(
    FLMutableDict arg0, ffi.Bool arg1);
typedef DartFLMutableDict_SetChanged = void Function(
    FLMutableDict arg0, bool arg1);
typedef NativeFLMutableDict_Remove = ffi.Void Function(
    FLMutableDict arg0, FLString key);
typedef DartFLMutableDict_Remove = void Function(
    FLMutableDict arg0, FLString key);
typedef NativeFLMutableDict_RemoveAll = ffi.Void Function(FLMutableDict arg0);
typedef DartFLMutableDict_RemoveAll = void Function(FLMutableDict arg0);
typedef NativeFLMutableDict_GetMutableArray = FLMutableArray Function(
    FLMutableDict arg0, FLString key);
typedef DartFLMutableDict_GetMutableArray = FLMutableArray Function(
    FLMutableDict arg0, FLString key);
typedef NativeFLMutableDict_GetMutableDict = FLMutableDict Function(
    FLMutableDict arg0, FLString key);
typedef DartFLMutableDict_GetMutableDict = FLMutableDict Function(
    FLMutableDict arg0, FLString key);
typedef NativeFLValue_NewString = FLValue Function(FLString arg0);
typedef DartFLValue_NewString = FLValue Function(FLString arg0);
typedef NativeFLValue_NewData = FLValue Function(FLSlice arg0);
typedef DartFLValue_NewData = FLValue Function(FLSlice arg0);
typedef NativeFLMutableArray_Set = FLSlot Function(
    FLMutableArray arg0, ffi.Uint32 index);
typedef DartFLMutableArray_Set = FLSlot Function(
    FLMutableArray arg0, int index);
typedef NativeFLMutableArray_Append = FLSlot Function(FLMutableArray arg0);
typedef DartFLMutableArray_Append = FLSlot Function(FLMutableArray arg0);
typedef NativeFLMutableDict_Set = FLSlot Function(
    FLMutableDict arg0, FLString key);
typedef DartFLMutableDict_Set = FLSlot Function(
    FLMutableDict arg0, FLString key);
typedef NativeFLSlot_SetNull = ffi.Void Function(FLSlot arg0);
typedef DartFLSlot_SetNull = void Function(FLSlot arg0);
typedef NativeFLSlot_SetBool = ffi.Void Function(FLSlot arg0, ffi.Bool arg1);
typedef DartFLSlot_SetBool = void Function(FLSlot arg0, bool arg1);
typedef NativeFLSlot_SetInt = ffi.Void Function(FLSlot arg0, ffi.Int64 arg1);
typedef DartFLSlot_SetInt = void Function(FLSlot arg0, int arg1);
typedef NativeFLSlot_SetUInt = ffi.Void Function(FLSlot arg0, ffi.Uint64 arg1);
typedef DartFLSlot_SetUInt = void Function(FLSlot arg0, int arg1);
typedef NativeFLSlot_SetFloat = ffi.Void Function(FLSlot arg0, ffi.Float arg1);
typedef DartFLSlot_SetFloat = void Function(FLSlot arg0, double arg1);
typedef NativeFLSlot_SetDouble = ffi.Void Function(
    FLSlot arg0, ffi.Double arg1);
typedef DartFLSlot_SetDouble = void Function(FLSlot arg0, double arg1);
typedef NativeFLSlot_SetString = ffi.Void Function(FLSlot arg0, FLString arg1);
typedef DartFLSlot_SetString = void Function(FLSlot arg0, FLString arg1);
typedef NativeFLSlot_SetData = ffi.Void Function(FLSlot arg0, FLSlice arg1);
typedef DartFLSlot_SetData = void Function(FLSlot arg0, FLSlice arg1);
typedef NativeFLSlot_SetValue = ffi.Void Function(FLSlot arg0, FLValue arg1);
typedef DartFLSlot_SetValue = void Function(FLSlot arg0, FLValue arg1);
typedef NativeFLCreateJSONDelta = FLSliceResult Function(
    FLValue old, FLValue nuu);
typedef DartFLCreateJSONDelta = FLSliceResult Function(
    FLValue old, FLValue nuu);
typedef NativeFLEncodeJSONDelta = ffi.Bool Function(
    FLValue old, FLValue nuu, FLEncoder jsonEncoder);
typedef DartFLEncodeJSONDelta = bool Function(
    FLValue old, FLValue nuu, FLEncoder jsonEncoder);
typedef NativeFLApplyJSONDelta = FLSliceResult Function(
    FLValue old, FLSlice jsonDelta, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLApplyJSONDelta = FLSliceResult Function(
    FLValue old, FLSlice jsonDelta, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncodeApplyingJSONDelta = ffi.Bool Function(
    FLValue old, FLSlice jsonDelta, FLEncoder encoder);
typedef DartFLEncodeApplyingJSONDelta = bool Function(
    FLValue old, FLSlice jsonDelta, FLEncoder encoder);
typedef NativeFLSharedKeys_New = FLSharedKeys Function();
typedef DartFLSharedKeys_New = FLSharedKeys Function();
typedef FLSharedKeysReadCallbackFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Void>, FLSharedKeys);
typedef DartFLSharedKeysReadCallbackFunction = bool Function(
    ffi.Pointer<ffi.Void>, FLSharedKeys);
typedef FLSharedKeysReadCallback
    = ffi.Pointer<ffi.NativeFunction<FLSharedKeysReadCallbackFunction>>;
typedef NativeFLSharedKeys_NewWithRead = FLSharedKeys Function(
    FLSharedKeysReadCallback arg0, ffi.Pointer<ffi.Void> context);
typedef DartFLSharedKeys_NewWithRead = FLSharedKeys Function(
    FLSharedKeysReadCallback arg0, ffi.Pointer<ffi.Void> context);
typedef NativeFLSharedKeys_GetStateData = FLSliceResult Function(
    FLSharedKeys arg0);
typedef DartFLSharedKeys_GetStateData = FLSliceResult Function(
    FLSharedKeys arg0);
typedef NativeFLSharedKeys_LoadStateData = ffi.Bool Function(
    FLSharedKeys arg0, FLSlice arg1);
typedef DartFLSharedKeys_LoadStateData = bool Function(
    FLSharedKeys arg0, FLSlice arg1);
typedef NativeFLSharedKeys_WriteState = ffi.Void Function(
    FLSharedKeys arg0, FLEncoder arg1);
typedef DartFLSharedKeys_WriteState = void Function(
    FLSharedKeys arg0, FLEncoder arg1);
typedef NativeFLSharedKeys_LoadState = ffi.Bool Function(
    FLSharedKeys arg0, FLValue arg1);
typedef DartFLSharedKeys_LoadState = bool Function(
    FLSharedKeys arg0, FLValue arg1);
typedef NativeFLSharedKeys_Encode = ffi.Int Function(
    FLSharedKeys arg0, FLString arg1, ffi.Bool add);
typedef DartFLSharedKeys_Encode = int Function(
    FLSharedKeys arg0, FLString arg1, bool add);
typedef NativeFLSharedKeys_Decode = FLString Function(
    FLSharedKeys arg0, ffi.Int key);
typedef DartFLSharedKeys_Decode = FLString Function(FLSharedKeys arg0, int key);
typedef NativeFLSharedKeys_Count = ffi.UnsignedInt Function(FLSharedKeys arg0);
typedef DartFLSharedKeys_Count = int Function(FLSharedKeys arg0);
typedef NativeFLSharedKeys_RevertToCount = ffi.Void Function(
    FLSharedKeys arg0, ffi.UnsignedInt oldCount);
typedef DartFLSharedKeys_RevertToCount = void Function(
    FLSharedKeys arg0, int oldCount);
typedef NativeFLSharedKeys_DisableCaching = ffi.Void Function(
    FLSharedKeys arg0);
typedef DartFLSharedKeys_DisableCaching = void Function(FLSharedKeys arg0);
typedef NativeFLSharedKeys_Retain = FLSharedKeys Function(FLSharedKeys arg0);
typedef DartFLSharedKeys_Retain = FLSharedKeys Function(FLSharedKeys arg0);
typedef NativeFLSharedKeys_Release = ffi.Void Function(FLSharedKeys arg0);
typedef DartFLSharedKeys_Release = void Function(FLSharedKeys arg0);

final class _FLSharedKeyScope extends ffi.Opaque {}

typedef FLSharedKeyScope = ffi.Pointer<_FLSharedKeyScope>;
typedef NativeFLSharedKeyScope_WithRange = FLSharedKeyScope Function(
    FLSlice range, FLSharedKeys arg1);
typedef DartFLSharedKeyScope_WithRange = FLSharedKeyScope Function(
    FLSlice range, FLSharedKeys arg1);
typedef NativeFLSharedKeyScope_Free = ffi.Void Function(FLSharedKeyScope arg0);
typedef DartFLSharedKeyScope_Free = void Function(FLSharedKeyScope arg0);
typedef NativeFLValue_FromData = FLValue Function(
    FLSlice data, ffi.UnsignedInt trust);
typedef DartFLValue_FromData = FLValue Function(FLSlice data, int trust);
typedef NativeFLJSON5_ToJSON = FLStringResult Function(
    FLString json5,
    ffi.Pointer<FLStringResult> outErrorMessage,
    ffi.Pointer<ffi.Size> outErrorPos,
    ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLJSON5_ToJSON = FLStringResult Function(
    FLString json5,
    ffi.Pointer<FLStringResult> outErrorMessage,
    ffi.Pointer<ffi.Size> outErrorPos,
    ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLData_ConvertJSON = FLSliceResult Function(
    FLSlice json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLData_ConvertJSON = FLSliceResult Function(
    FLSlice json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncoder_Amend = ffi.Void Function(
    FLEncoder e, FLSlice base, ffi.Bool reuseStrings, ffi.Bool externPointers);
typedef DartFLEncoder_Amend = void Function(
    FLEncoder e, FLSlice base, bool reuseStrings, bool externPointers);
typedef NativeFLEncoder_GetBase = FLSlice Function(FLEncoder arg0);
typedef DartFLEncoder_GetBase = FLSlice Function(FLEncoder arg0);
typedef NativeFLEncoder_SuppressTrailer = ffi.Void Function(FLEncoder arg0);
typedef DartFLEncoder_SuppressTrailer = void Function(FLEncoder arg0);
typedef NativeFLEncoder_GetNextWritePos = ffi.Size Function(FLEncoder arg0);
typedef DartFLEncoder_GetNextWritePos = int Function(FLEncoder arg0);
typedef NativeFLEncoder_LastValueWritten = ffi.IntPtr Function(FLEncoder arg0);
typedef DartFLEncoder_LastValueWritten = int Function(FLEncoder arg0);
typedef NativeFLEncoder_WriteValueAgain = ffi.Bool Function(
    FLEncoder arg0, ffi.IntPtr preWrittenValue);
typedef DartFLEncoder_WriteValueAgain = bool Function(
    FLEncoder arg0, int preWrittenValue);
typedef NativeFLEncoder_Snip = FLSliceResult Function(FLEncoder arg0);
typedef DartFLEncoder_Snip = FLSliceResult Function(FLEncoder arg0);
typedef NativeFLEncoder_FinishItem = ffi.Size Function(FLEncoder arg0);
typedef DartFLEncoder_FinishItem = int Function(FLEncoder arg0);
typedef NativeFLJSONEncoder_NextDocument = ffi.Void Function(FLEncoder arg0);
typedef DartFLJSONEncoder_NextDocument = void Function(FLEncoder arg0);
typedef NativeFLDump = ffi.Pointer<ffi.Char> Function(FLValue arg0);
typedef DartFLDump = ffi.Pointer<ffi.Char> Function(FLValue arg0);
typedef NativeFLDumpData = ffi.Pointer<ffi.Char> Function(FLSlice data);
typedef DartFLDumpData = ffi.Pointer<ffi.Char> Function(FLSlice data);
typedef NativeFLData_Dump = FLStringResult Function(FLSlice data);
typedef DartFLData_Dump = FLStringResult Function(FLSlice data);

const int kCBLDomain = 1;

const int kCBLPOSIXDomain = 2;

const int kCBLSQLiteDomain = 3;

const int kCBLFleeceDomain = 4;

const int kCBLNetworkDomain = 5;

const int kCBLWebSocketDomain = 6;

const int kCBLErrorAssertionFailed = 1;

const int kCBLErrorUnimplemented = 2;

const int kCBLErrorUnsupportedEncryption = 3;

const int kCBLErrorBadRevisionID = 4;

const int kCBLErrorCorruptRevisionData = 5;

const int kCBLErrorNotOpen = 6;

const int kCBLErrorNotFound = 7;

const int kCBLErrorConflict = 8;

const int kCBLErrorInvalidParameter = 9;

const int kCBLErrorUnexpectedError = 10;

const int kCBLErrorCantOpenFile = 11;

const int kCBLErrorIOError = 12;

const int kCBLErrorMemoryError = 13;

const int kCBLErrorNotWriteable = 14;

const int kCBLErrorCorruptData = 15;

const int kCBLErrorBusy = 16;

const int kCBLErrorNotInTransaction = 17;

const int kCBLErrorTransactionNotClosed = 18;

const int kCBLErrorUnsupported = 19;

const int kCBLErrorNotADatabaseFile = 20;

const int kCBLErrorWrongFormat = 21;

const int kCBLErrorCrypto = 22;

const int kCBLErrorInvalidQuery = 23;

const int kCBLErrorMissingIndex = 24;

const int kCBLErrorInvalidQueryParam = 25;

const int kCBLErrorRemoteError = 26;

const int kCBLErrorDatabaseTooOld = 27;

const int kCBLErrorDatabaseTooNew = 28;

const int kCBLErrorBadDocID = 29;

const int kCBLErrorCantUpgradeDatabase = 30;

const int kCBLNetErrDNSFailure = 1;

const int kCBLNetErrUnknownHost = 2;

const int kCBLNetErrTimeout = 3;

const int kCBLNetErrInvalidURL = 4;

const int kCBLNetErrTooManyRedirects = 5;

const int kCBLNetErrTLSHandshakeFailed = 6;

const int kCBLNetErrTLSCertExpired = 7;

const int kCBLNetErrTLSCertUntrusted = 8;

const int kCBLNetErrTLSClientCertRequired = 9;

const int kCBLNetErrTLSClientCertRejected = 10;

const int kCBLNetErrTLSCertUnknownRoot = 11;

const int kCBLNetErrInvalidRedirect = 12;

const int kCBLNetErrUnknown = 13;

const int kCBLNetErrTLSCertRevoked = 14;

const int kCBLNetErrTLSCertNameMismatch = 15;

const int kCBLSeekModeFromStart = 0;

const int kCBLSeekModeRelative = 1;

const int kCBLSeekModeFromEnd = 2;

const int kCBLConcurrencyControlLastWriteWins = 0;

const int kCBLConcurrencyControlFailOnConflict = 1;

const int kCBLJSONLanguage = 0;

const int kCBLN1QLLanguage = 1;

const int kCBLSQ4 = 4;

const int kCBLSQ6 = 6;

const int kCBLSQ8 = 8;

const int kCBLDistanceMetricEuclideanSquared = 1;

const int kCBLDistanceMetricCosine = 2;

const int kCBLDistanceMetricEuclidean = 3;

const int kCBLDistanceMetricDot = 4;

const int kCBLEncryptionNone = 0;

const int kCBLEncryptionAES256 = 1;

const int kCBLEncryptionKeySizeAES256 = 32;

const int kCBLMaintenanceTypeCompact = 0;

const int kCBLMaintenanceTypeReindex = 1;

const int kCBLMaintenanceTypeIntegrityCheck = 2;

const int kCBLMaintenanceTypeOptimize = 3;

const int kCBLMaintenanceTypeFullOptimize = 4;

const int kCBLReplicatorTypePushAndPull = 0;

const int kCBLReplicatorTypePush = 1;

const int kCBLReplicatorTypePull = 2;

const int kCBLDocumentFlagsDeleted = 1;

const int kCBLDocumentFlagsAccessRemoved = 2;

const int kCBLProxyHTTP = 0;

const int kCBLProxyHTTPS = 1;

const int kCBLReplicatorStopped = 0;

const int kCBLReplicatorOffline = 1;

const int kCBLReplicatorConnecting = 2;

const int kCBLReplicatorIdle = 3;

const int kCBLReplicatorBusy = 4;

const int kCBLLogDomainDatabase = 0;

const int kCBLLogDomainQuery = 1;

const int kCBLLogDomainReplicator = 2;

const int kCBLLogDomainNetwork = 3;

const int kCBLLogDebug = 0;

const int kCBLLogVerbose = 1;

const int kCBLLogInfo = 2;

const int kCBLLogWarning = 3;

const int kCBLLogError = 4;

const int kCBLLogNone = 5;

const String CBLITE_VERSION = '3.2.0';

const int CBLITE_VERSION_NUMBER = 3002000;

const int CBLITE_BUILD_NUMBER = 71;

const String CBLITE_SOURCE_ID = '42c42c4+1b8799a';

const String CBLITE_BUILD_TIMESTAMP = '2024-08-29T06:45:08Z';

const String HOTLEVEL = 'Ofast';

const String COLDLEVEL = 'Oz';

const int FLTimestampNone = -9223372036854775808;

const int kFLTrustedDontParse = 4294967295;

const int kFLNoWrittenValue = -9223372036854775808;
