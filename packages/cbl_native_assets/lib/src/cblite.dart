// ignore_for_file: unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:cbl/src/bindings/cblite.dart' as imp1;
import '' as self;

@ffi.Native<NativeCBLError_Message>()
external FLSliceResult CBLError_Message(
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBL_Now>()
external imp1.DartCBLTimestamp CBL_Now();

@ffi.Native<NativeCBL_Retain>()
external ffi.Pointer<CBLRefCounted> CBL_Retain(
  ffi.Pointer<CBLRefCounted> arg0,
);

@ffi.Native<NativeCBL_Release>()
external void CBL_Release(
  ffi.Pointer<CBLRefCounted> arg0,
);

@ffi.Native<NativeCBL_InstanceCount>()
external int CBL_InstanceCount();

@ffi.Native<NativeCBL_DumpInstances>()
external void CBL_DumpInstances();

@ffi.Native<NativeCBLListener_Remove>()
external void CBLListener_Remove(
  ffi.Pointer<CBLListenerToken> arg0,
);

@ffi.Native<FLSlice>()
external final FLSlice kCBLBlobType;

@ffi.Native<FLSlice>()
external final FLSlice kCBLBlobDigestProperty;

@ffi.Native<FLSlice>()
external final FLSlice kCBLBlobLengthProperty;

@ffi.Native<FLSlice>()
external final FLSlice kCBLBlobContentTypeProperty;

@ffi.Native<NativeFLDict_IsBlob>()
external bool FLDict_IsBlob(
  imp1.FLDict arg0,
);

@ffi.Native<NativeFLDict_GetBlob>()
external ffi.Pointer<CBLBlob> FLDict_GetBlob(
  imp1.FLDict blobDict,
);

@ffi.Native<NativeCBLBlob_Length>()
external int CBLBlob_Length(
  ffi.Pointer<CBLBlob> arg0,
);

@ffi.Native<NativeCBLBlob_ContentType>()
external imp1.FLString CBLBlob_ContentType(
  ffi.Pointer<CBLBlob> arg0,
);

@ffi.Native<NativeCBLBlob_Digest>()
external imp1.FLString CBLBlob_Digest(
  ffi.Pointer<CBLBlob> arg0,
);

@ffi.Native<NativeCBLBlob_Properties>()
external imp1.FLDict CBLBlob_Properties(
  ffi.Pointer<CBLBlob> arg0,
);

@ffi.Native<NativeCBLBlob_CreateJSON>()
external imp1.FLStringResult CBLBlob_CreateJSON(
  ffi.Pointer<CBLBlob> blob,
);

@ffi.Native<NativeCBLBlob_Content>()
external FLSliceResult CBLBlob_Content(
  ffi.Pointer<CBLBlob> blob,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLBlob_OpenContentStream>()
external ffi.Pointer<CBLBlobReadStream> CBLBlob_OpenContentStream(
  ffi.Pointer<CBLBlob> blob,
  ffi.Pointer<CBLError> arg1,
);

@ffi.Native<NativeCBLBlobReader_Read>()
external int CBLBlobReader_Read(
  ffi.Pointer<CBLBlobReadStream> stream,
  ffi.Pointer<ffi.Void> dst,
  int maxLength,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLBlobReader_Seek>()
external int CBLBlobReader_Seek(
  ffi.Pointer<CBLBlobReadStream> stream,
  int offset,
  imp1.DartCBLSeekBase base,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLBlobReader_Position>()
external int CBLBlobReader_Position(
  ffi.Pointer<CBLBlobReadStream> stream,
);

@ffi.Native<NativeCBLBlobReader_Close>()
external void CBLBlobReader_Close(
  ffi.Pointer<CBLBlobReadStream> arg0,
);

@ffi.Native<NativeCBLBlob_Equals>()
external bool CBLBlob_Equals(
  ffi.Pointer<CBLBlob> blob,
  ffi.Pointer<CBLBlob> anotherBlob,
);

@ffi.Native<NativeCBLBlob_CreateWithData>()
external ffi.Pointer<CBLBlob> CBLBlob_CreateWithData(
  imp1.FLString contentType,
  FLSlice contents,
);

@ffi.Native<NativeCBLBlobWriter_Create>()
external ffi.Pointer<CBLBlobWriteStream> CBLBlobWriter_Create(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLError> arg1,
);

@ffi.Native<NativeCBLBlobWriter_Close>()
external void CBLBlobWriter_Close(
  ffi.Pointer<CBLBlobWriteStream> arg0,
);

@ffi.Native<NativeCBLBlobWriter_Write>()
external bool CBLBlobWriter_Write(
  ffi.Pointer<CBLBlobWriteStream> writer,
  ffi.Pointer<ffi.Void> data,
  int length,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLBlob_CreateWithStream>()
external ffi.Pointer<CBLBlob> CBLBlob_CreateWithStream(
  imp1.FLString contentType,
  ffi.Pointer<CBLBlobWriteStream> writer,
);

@ffi.Native<NativeFLSlot_SetBlob>()
external void FLSlot_SetBlob(
  imp1.FLSlot slot,
  ffi.Pointer<CBLBlob> blob,
);

@ffi.Native<NativeCBLDatabase_GetBlob>()
external ffi.Pointer<CBLBlob> CBLDatabase_GetBlob(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLDict properties,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_SaveBlob>()
external bool CBLDatabase_SaveBlob(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLBlob> blob,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<FLSlice>()
external final FLSlice kCBLTypeProperty;

@ffi.Native<NativeCBLDatabase_GetDocument>()
external ffi.Pointer<CBLDocument> CBLDatabase_GetDocument(
  ffi.Pointer<CBLDatabase> database,
  imp1.FLString docID,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_SaveDocument>()
external bool CBLDatabase_SaveDocument(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLDocument> doc,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_SaveDocumentWithConcurrencyControl>()
external bool CBLDatabase_SaveDocumentWithConcurrencyControl(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLDocument> doc,
  imp1.DartCBLConcurrencyControl concurrency,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_SaveDocumentWithConflictHandler>()
external bool CBLDatabase_SaveDocumentWithConflictHandler(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLDocument> doc,
  imp1.CBLConflictHandler conflictHandler,
  ffi.Pointer<ffi.Void> context,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_DeleteDocument>()
external bool CBLDatabase_DeleteDocument(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLDocument> document,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_DeleteDocumentWithConcurrencyControl>()
external bool CBLDatabase_DeleteDocumentWithConcurrencyControl(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLDocument> document,
  imp1.DartCBLConcurrencyControl concurrency,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_PurgeDocument>()
external bool CBLDatabase_PurgeDocument(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLDocument> document,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_PurgeDocumentByID>()
external bool CBLDatabase_PurgeDocumentByID(
  ffi.Pointer<CBLDatabase> database,
  imp1.FLString docID,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_GetMutableDocument>()
external ffi.Pointer<CBLDocument> CBLDatabase_GetMutableDocument(
  ffi.Pointer<CBLDatabase> database,
  imp1.FLString docID,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDocument_Create>()
external ffi.Pointer<CBLDocument> CBLDocument_Create();

@ffi.Native<NativeCBLDocument_CreateWithID>()
external ffi.Pointer<CBLDocument> CBLDocument_CreateWithID(
  imp1.FLString docID,
);

@ffi.Native<NativeCBLDocument_MutableCopy>()
external ffi.Pointer<CBLDocument> CBLDocument_MutableCopy(
  ffi.Pointer<CBLDocument> original,
);

@ffi.Native<NativeCBLDocument_ID>()
external imp1.FLString CBLDocument_ID(
  ffi.Pointer<CBLDocument> arg0,
);

@ffi.Native<NativeCBLDocument_RevisionID>()
external imp1.FLString CBLDocument_RevisionID(
  ffi.Pointer<CBLDocument> arg0,
);

@ffi.Native<NativeCBLDocument_Sequence>()
external int CBLDocument_Sequence(
  ffi.Pointer<CBLDocument> arg0,
);

@ffi.Native<NativeCBLDocument_Collection>()
external ffi.Pointer<CBLCollection> CBLDocument_Collection(
  ffi.Pointer<CBLDocument> arg0,
);

@ffi.Native<NativeCBLDocument_Properties>()
external imp1.FLDict CBLDocument_Properties(
  ffi.Pointer<CBLDocument> arg0,
);

@ffi.Native<NativeCBLDocument_MutableProperties>()
external imp1.FLMutableDict CBLDocument_MutableProperties(
  ffi.Pointer<CBLDocument> arg0,
);

@ffi.Native<NativeCBLDocument_SetProperties>()
external void CBLDocument_SetProperties(
  ffi.Pointer<CBLDocument> arg0,
  imp1.FLMutableDict properties,
);

@ffi.Native<NativeCBLDocument_CreateJSON>()
external FLSliceResult CBLDocument_CreateJSON(
  ffi.Pointer<CBLDocument> arg0,
);

@ffi.Native<NativeCBLDocument_SetJSON>()
external bool CBLDocument_SetJSON(
  ffi.Pointer<CBLDocument> arg0,
  FLSlice json,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_GetDocumentExpiration>()
external imp1.DartCBLTimestamp CBLDatabase_GetDocumentExpiration(
  ffi.Pointer<CBLDatabase> db,
  FLSlice docID,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_SetDocumentExpiration>()
external bool CBLDatabase_SetDocumentExpiration(
  ffi.Pointer<CBLDatabase> db,
  FLSlice docID,
  imp1.DartCBLTimestamp expiration,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_AddDocumentChangeListener>()
external ffi.Pointer<CBLListenerToken> CBLDatabase_AddDocumentChangeListener(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLString docID,
  imp1.CBLDocumentChangeListener listener,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<NativeCBLVectorEncoding_CreateNone>()
external ffi.Pointer<CBLVectorEncoding> CBLVectorEncoding_CreateNone();

@ffi.Native<NativeCBLVectorEncoding_CreateScalarQuantizer>()
external ffi.Pointer<CBLVectorEncoding> CBLVectorEncoding_CreateScalarQuantizer(
  imp1.DartCBLScalarQuantizerType type,
);

@ffi.Native<NativeCBLVectorEncoding_CreateProductQuantizer>()
external ffi.Pointer<CBLVectorEncoding>
    CBLVectorEncoding_CreateProductQuantizer(
  int subquantizers,
  int bits,
);

@ffi.Native<NativeCBLVectorEncoding_Free>()
external void CBLVectorEncoding_Free(
  ffi.Pointer<CBLVectorEncoding> arg0,
);

@ffi.Native<imp1.FLString>()
external final imp1.FLString kCBLDefaultCollectionName;

@ffi.Native<NativeCBLDatabase_ScopeNames>()
external imp1.FLMutableArray CBLDatabase_ScopeNames(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_CollectionNames>()
external imp1.FLMutableArray CBLDatabase_CollectionNames(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLString scopeName,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_Scope>()
external ffi.Pointer<CBLScope> CBLDatabase_Scope(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLString scopeName,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_Collection>()
external ffi.Pointer<CBLCollection> CBLDatabase_Collection(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLString collectionName,
  imp1.FLString scopeName,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_CreateCollection>()
external ffi.Pointer<CBLCollection> CBLDatabase_CreateCollection(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLString collectionName,
  imp1.FLString scopeName,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_DeleteCollection>()
external bool CBLDatabase_DeleteCollection(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLString collectionName,
  imp1.FLString scopeName,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_DefaultScope>()
external ffi.Pointer<CBLScope> CBLDatabase_DefaultScope(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_DefaultCollection>()
external ffi.Pointer<CBLCollection> CBLDatabase_DefaultCollection(
  ffi.Pointer<CBLDatabase> db,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_Scope>()
external ffi.Pointer<CBLScope> CBLCollection_Scope(
  ffi.Pointer<CBLCollection> collection,
);

@ffi.Native<NativeCBLCollection_Name>()
external imp1.FLString CBLCollection_Name(
  ffi.Pointer<CBLCollection> collection,
);

@ffi.Native<NativeCBLCollection_FullName>()
external imp1.FLString CBLCollection_FullName(
  ffi.Pointer<CBLCollection> collection,
);

@ffi.Native<NativeCBLCollection_Database>()
external ffi.Pointer<CBLDatabase> CBLCollection_Database(
  ffi.Pointer<CBLCollection> collection,
);

@ffi.Native<NativeCBLCollection_Count>()
external int CBLCollection_Count(
  ffi.Pointer<CBLCollection> collection,
);

@ffi.Native<NativeCBLCollection_GetDocument>()
external ffi.Pointer<CBLDocument> CBLCollection_GetDocument(
  ffi.Pointer<CBLCollection> collection,
  imp1.FLString docID,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_SaveDocument>()
external bool CBLCollection_SaveDocument(
  ffi.Pointer<CBLCollection> collection,
  ffi.Pointer<CBLDocument> doc,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_SaveDocumentWithConcurrencyControl>()
external bool CBLCollection_SaveDocumentWithConcurrencyControl(
  ffi.Pointer<CBLCollection> collection,
  ffi.Pointer<CBLDocument> doc,
  imp1.DartCBLConcurrencyControl concurrency,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_SaveDocumentWithConflictHandler>()
external bool CBLCollection_SaveDocumentWithConflictHandler(
  ffi.Pointer<CBLCollection> collection,
  ffi.Pointer<CBLDocument> doc,
  imp1.CBLConflictHandler conflictHandler,
  ffi.Pointer<ffi.Void> context,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_DeleteDocument>()
external bool CBLCollection_DeleteDocument(
  ffi.Pointer<CBLCollection> collection,
  ffi.Pointer<CBLDocument> document,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_DeleteDocumentWithConcurrencyControl>()
external bool CBLCollection_DeleteDocumentWithConcurrencyControl(
  ffi.Pointer<CBLCollection> collection,
  ffi.Pointer<CBLDocument> document,
  imp1.DartCBLConcurrencyControl concurrency,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_PurgeDocument>()
external bool CBLCollection_PurgeDocument(
  ffi.Pointer<CBLCollection> collection,
  ffi.Pointer<CBLDocument> document,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_PurgeDocumentByID>()
external bool CBLCollection_PurgeDocumentByID(
  ffi.Pointer<CBLCollection> collection,
  imp1.FLString docID,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_GetDocumentExpiration>()
external imp1.DartCBLTimestamp CBLCollection_GetDocumentExpiration(
  ffi.Pointer<CBLCollection> collection,
  FLSlice docID,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_SetDocumentExpiration>()
external bool CBLCollection_SetDocumentExpiration(
  ffi.Pointer<CBLCollection> collection,
  FLSlice docID,
  imp1.DartCBLTimestamp expiration,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_GetMutableDocument>()
external ffi.Pointer<CBLDocument> CBLCollection_GetMutableDocument(
  ffi.Pointer<CBLCollection> collection,
  imp1.FLString docID,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_CreateValueIndex>()
external bool CBLCollection_CreateValueIndex(
  ffi.Pointer<CBLCollection> collection,
  imp1.FLString name,
  CBLValueIndexConfiguration config,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_CreateFullTextIndex>()
external bool CBLCollection_CreateFullTextIndex(
  ffi.Pointer<CBLCollection> collection,
  imp1.FLString name,
  CBLFullTextIndexConfiguration config,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_CreateVectorIndex>()
external bool CBLCollection_CreateVectorIndex(
  ffi.Pointer<CBLCollection> collection,
  imp1.FLString name,
  CBLVectorIndexConfiguration config,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_DeleteIndex>()
external bool CBLCollection_DeleteIndex(
  ffi.Pointer<CBLCollection> collection,
  imp1.FLString name,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_GetIndexNames>()
external imp1.FLMutableArray CBLCollection_GetIndexNames(
  ffi.Pointer<CBLCollection> collection,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_GetIndex>()
external ffi.Pointer<CBLQueryIndex> CBLCollection_GetIndex(
  ffi.Pointer<CBLCollection> collection,
  imp1.FLString name,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLCollection_AddChangeListener>()
external ffi.Pointer<CBLListenerToken> CBLCollection_AddChangeListener(
  ffi.Pointer<CBLCollection> collection,
  imp1.CBLCollectionChangeListener listener,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<NativeCBLCollection_AddDocumentChangeListener>()
external ffi.Pointer<CBLListenerToken> CBLCollection_AddDocumentChangeListener(
  ffi.Pointer<CBLCollection> collection,
  imp1.FLString docID,
  imp1.CBLCollectionDocumentChangeListener listener,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<NativeCBL_EnableVectorSearch>()
external bool CBL_EnableVectorSearch(
  imp1.FLString path,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabaseConfiguration_Default>()
external CBLDatabaseConfiguration CBLDatabaseConfiguration_Default();

@ffi.Native<NativeCBLEncryptionKey_FromPassword>()
external bool CBLEncryptionKey_FromPassword(
  ffi.Pointer<CBLEncryptionKey> key,
  imp1.FLString password,
);

@ffi.Native<NativeCBLEncryptionKey_FromPasswordOld>()
external bool CBLEncryptionKey_FromPasswordOld(
  ffi.Pointer<CBLEncryptionKey> key,
  imp1.FLString password,
);

@ffi.Native<NativeCBL_DatabaseExists>()
external bool CBL_DatabaseExists(
  imp1.FLString name,
  imp1.FLString inDirectory,
);

@ffi.Native<NativeCBL_CopyDatabase>()
external bool CBL_CopyDatabase(
  imp1.FLString fromPath,
  imp1.FLString toName,
  ffi.Pointer<CBLDatabaseConfiguration> config,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBL_DeleteDatabase>()
external bool CBL_DeleteDatabase(
  imp1.FLString name,
  imp1.FLString inDirectory,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_Open>()
external ffi.Pointer<CBLDatabase> CBLDatabase_Open(
  FLSlice name,
  ffi.Pointer<CBLDatabaseConfiguration> config,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_Close>()
external bool CBLDatabase_Close(
  ffi.Pointer<CBLDatabase> arg0,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_Delete>()
external bool CBLDatabase_Delete(
  ffi.Pointer<CBLDatabase> arg0,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_BeginTransaction>()
external bool CBLDatabase_BeginTransaction(
  ffi.Pointer<CBLDatabase> arg0,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_EndTransaction>()
external bool CBLDatabase_EndTransaction(
  ffi.Pointer<CBLDatabase> arg0,
  bool commit,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_ChangeEncryptionKey>()
external bool CBLDatabase_ChangeEncryptionKey(
  ffi.Pointer<CBLDatabase> arg0,
  ffi.Pointer<CBLEncryptionKey> newKey,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_PerformMaintenance>()
external bool CBLDatabase_PerformMaintenance(
  ffi.Pointer<CBLDatabase> db,
  imp1.DartCBLMaintenanceType type,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_Name>()
external imp1.FLString CBLDatabase_Name(
  ffi.Pointer<CBLDatabase> arg0,
);

@ffi.Native<NativeCBLDatabase_Path>()
external imp1.FLStringResult CBLDatabase_Path(
  ffi.Pointer<CBLDatabase> arg0,
);

@ffi.Native<NativeCBLDatabase_Count>()
external int CBLDatabase_Count(
  ffi.Pointer<CBLDatabase> arg0,
);

@ffi.Native<NativeCBLDatabase_Config>()
external CBLDatabaseConfiguration CBLDatabase_Config(
  ffi.Pointer<CBLDatabase> arg0,
);

@ffi.Native<NativeCBLDatabase_CreateValueIndex>()
external bool CBLDatabase_CreateValueIndex(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLString name,
  CBLValueIndexConfiguration config,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_CreateFullTextIndex>()
external bool CBLDatabase_CreateFullTextIndex(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLString name,
  CBLFullTextIndexConfiguration config,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_DeleteIndex>()
external bool CBLDatabase_DeleteIndex(
  ffi.Pointer<CBLDatabase> db,
  imp1.FLString name,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLDatabase_GetIndexNames>()
external imp1.FLArray CBLDatabase_GetIndexNames(
  ffi.Pointer<CBLDatabase> db,
);

@ffi.Native<NativeCBLDatabase_AddChangeListener>()
external ffi.Pointer<CBLListenerToken> CBLDatabase_AddChangeListener(
  ffi.Pointer<CBLDatabase> db,
  imp1.CBLDatabaseChangeListener listener,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<NativeCBLDatabase_BufferNotifications>()
external void CBLDatabase_BufferNotifications(
  ffi.Pointer<CBLDatabase> db,
  imp1.CBLNotificationsReadyCallback callback,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<NativeCBLDatabase_SendNotifications>()
external void CBLDatabase_SendNotifications(
  ffi.Pointer<CBLDatabase> db,
);

@ffi.Native<imp1.FLString>()
external final imp1.FLString kCBLAuthDefaultCookieName;

@ffi.Native<NativeCBLEndpoint_CreateWithURL>()
external ffi.Pointer<CBLEndpoint> CBLEndpoint_CreateWithURL(
  imp1.FLString url,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLEndpoint_CreateWithLocalDB>()
external ffi.Pointer<CBLEndpoint> CBLEndpoint_CreateWithLocalDB(
  ffi.Pointer<CBLDatabase> arg0,
);

@ffi.Native<NativeCBLEndpoint_Free>()
external void CBLEndpoint_Free(
  ffi.Pointer<CBLEndpoint> arg0,
);

@ffi.Native<NativeCBLAuth_CreatePassword>()
external ffi.Pointer<CBLAuthenticator> CBLAuth_CreatePassword(
  imp1.FLString username,
  imp1.FLString password,
);

@ffi.Native<NativeCBLAuth_CreateSession>()
external ffi.Pointer<CBLAuthenticator> CBLAuth_CreateSession(
  imp1.FLString sessionID,
  imp1.FLString cookieName,
);

@ffi.Native<NativeCBLAuth_Free>()
external void CBLAuth_Free(
  ffi.Pointer<CBLAuthenticator> arg0,
);

@ffi.Native<imp1.CBLConflictResolver>()
external imp1.CBLConflictResolver CBLDefaultConflictResolver;

@ffi.Native<NativeCBLReplicator_Create>()
external ffi.Pointer<CBLReplicator> CBLReplicator_Create(
  ffi.Pointer<CBLReplicatorConfiguration> arg0,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLReplicator_Config>()
external ffi.Pointer<CBLReplicatorConfiguration> CBLReplicator_Config(
  ffi.Pointer<CBLReplicator> arg0,
);

@ffi.Native<NativeCBLReplicator_Start>()
external void CBLReplicator_Start(
  ffi.Pointer<CBLReplicator> replicator,
  bool resetCheckpoint,
);

@ffi.Native<NativeCBLReplicator_Stop>()
external void CBLReplicator_Stop(
  ffi.Pointer<CBLReplicator> arg0,
);

@ffi.Native<NativeCBLReplicator_SetHostReachable>()
external void CBLReplicator_SetHostReachable(
  ffi.Pointer<CBLReplicator> arg0,
  bool reachable,
);

@ffi.Native<NativeCBLReplicator_SetSuspended>()
external void CBLReplicator_SetSuspended(
  ffi.Pointer<CBLReplicator> repl,
  bool suspended,
);

@ffi.Native<NativeCBLReplicator_Status>()
external CBLReplicatorStatus CBLReplicator_Status(
  ffi.Pointer<CBLReplicator> arg0,
);

@ffi.Native<NativeCBLReplicator_PendingDocumentIDs>()
external imp1.FLDict CBLReplicator_PendingDocumentIDs(
  ffi.Pointer<CBLReplicator> arg0,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLReplicator_IsDocumentPending>()
external bool CBLReplicator_IsDocumentPending(
  ffi.Pointer<CBLReplicator> repl,
  imp1.FLString docID,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLReplicator_PendingDocumentIDs2>()
external imp1.FLDict CBLReplicator_PendingDocumentIDs2(
  ffi.Pointer<CBLReplicator> arg0,
  ffi.Pointer<CBLCollection> collection,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLReplicator_IsDocumentPending2>()
external bool CBLReplicator_IsDocumentPending2(
  ffi.Pointer<CBLReplicator> repl,
  imp1.FLString docID,
  ffi.Pointer<CBLCollection> collection,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLReplicator_AddChangeListener>()
external ffi.Pointer<CBLListenerToken> CBLReplicator_AddChangeListener(
  ffi.Pointer<CBLReplicator> arg0,
  imp1.CBLReplicatorChangeListener arg1,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<NativeCBLReplicator_AddDocumentReplicationListener>()
external ffi.Pointer<CBLListenerToken>
    CBLReplicator_AddDocumentReplicationListener(
  ffi.Pointer<CBLReplicator> arg0,
  imp1.CBLDocumentReplicationListener arg1,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<ffi.Bool>()
external final bool kCBLDefaultLogFileUsePlaintext;

@ffi.Native<ffi.Bool>()
external final bool kCBLDefaultLogFileUsePlainText;

@ffi.Native<ffi.Size>()
external final int kCBLDefaultLogFileMaxSize;

@ffi.Native<ffi.Uint32>()
external final int kCBLDefaultLogFileMaxRotateCount;

@ffi.Native<ffi.Bool>()
external final bool kCBLDefaultFullTextIndexIgnoreAccents;

@ffi.Native<imp1.CBLReplicatorType>()
external final imp1.DartCBLReplicatorType kCBLDefaultReplicatorType;

@ffi.Native<ffi.Bool>()
external final bool kCBLDefaultReplicatorContinuous;

@ffi.Native<ffi.UnsignedInt>()
external final int kCBLDefaultReplicatorHeartbeat;

@ffi.Native<ffi.UnsignedInt>()
external final int kCBLDefaultReplicatorMaxAttemptsSingleShot;

@ffi.Native<ffi.UnsignedInt>()
external final int kCBLDefaultReplicatorMaxAttemptsContinuous;

@ffi.Native<ffi.UnsignedInt>()
external final int kCBLDefaultReplicatorMaxAttemptsWaitTime;

@ffi.Native<ffi.UnsignedInt>()
external final int kCBLDefaultReplicatorMaxAttemptWaitTime;

@ffi.Native<ffi.Bool>()
external final bool kCBLDefaultReplicatorDisableAutoPurge;

@ffi.Native<ffi.Bool>()
external final bool kCBLDefaultReplicatorAcceptParentCookies;

@ffi.Native<ffi.Bool>()
external final bool kCBLDefaultVectorIndexLazy;

@ffi.Native<imp1.CBLDistanceMetric>()
external final imp1.DartCBLDistanceMetric kCBLDefaultVectorIndexDistanceMetric;

@ffi.Native<ffi.UnsignedInt>()
external final int kCBLDefaultVectorIndexMinTrainingSize;

@ffi.Native<ffi.UnsignedInt>()
external final int kCBLDefaultVectorIndexMaxTrainingSize;

@ffi.Native<ffi.UnsignedInt>()
external final int kCBLDefaultVectorIndexNumProbes;

@ffi.Native<FLSlice>()
external final FLSlice kCBLEncryptableType;

@ffi.Native<FLSlice>()
external final FLSlice kCBLEncryptableValueProperty;

@ffi.Native<NativeCBLEncryptable_CreateWithNull>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithNull();

@ffi.Native<NativeCBLEncryptable_CreateWithBool>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithBool(
  bool value,
);

@ffi.Native<NativeCBLEncryptable_CreateWithInt>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithInt(
  int value,
);

@ffi.Native<NativeCBLEncryptable_CreateWithUInt>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithUInt(
  int value,
);

@ffi.Native<NativeCBLEncryptable_CreateWithFloat>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithFloat(
  double value,
);

@ffi.Native<NativeCBLEncryptable_CreateWithDouble>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithDouble(
  double value,
);

@ffi.Native<NativeCBLEncryptable_CreateWithString>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithString(
  imp1.FLString value,
);

@ffi.Native<NativeCBLEncryptable_CreateWithValue>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithValue(
  imp1.FLValue value,
);

@ffi.Native<NativeCBLEncryptable_CreateWithArray>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithArray(
  imp1.FLArray value,
);

@ffi.Native<NativeCBLEncryptable_CreateWithDict>()
external ffi.Pointer<CBLEncryptable> CBLEncryptable_CreateWithDict(
  imp1.FLDict value,
);

@ffi.Native<NativeCBLEncryptable_Value>()
external imp1.FLValue CBLEncryptable_Value(
  ffi.Pointer<CBLEncryptable> encryptable,
);

@ffi.Native<NativeCBLEncryptable_Properties>()
external imp1.FLDict CBLEncryptable_Properties(
  ffi.Pointer<CBLEncryptable> encryptable,
);

@ffi.Native<NativeFLDict_IsEncryptableValue>()
external bool FLDict_IsEncryptableValue(
  imp1.FLDict arg0,
);

@ffi.Native<NativeFLDict_GetEncryptableValue>()
external ffi.Pointer<CBLEncryptable> FLDict_GetEncryptableValue(
  imp1.FLDict encryptableDict,
);

@ffi.Native<NativeFLSlot_SetEncryptableValue>()
external void FLSlot_SetEncryptableValue(
  imp1.FLSlot slot,
  ffi.Pointer<CBLEncryptable> encryptable,
);

@ffi.Native<NativeCBL_Log>()
external void CBL_Log(
  imp1.DartCBLLogDomain domain,
  imp1.DartCBLLogLevel level,
  ffi.Pointer<ffi.Char> format,
);

@ffi.Native<NativeCBL_LogMessage>()
external void CBL_LogMessage(
  imp1.DartCBLLogDomain domain,
  imp1.DartCBLLogLevel level,
  FLSlice message,
);

@ffi.Native<NativeCBLLog_ConsoleLevel>()
external imp1.DartCBLLogLevel CBLLog_ConsoleLevel();

@ffi.Native<NativeCBLLog_SetConsoleLevel>()
external void CBLLog_SetConsoleLevel(
  imp1.DartCBLLogLevel arg0,
);

@ffi.Native<NativeCBLLog_CallbackLevel>()
external imp1.DartCBLLogLevel CBLLog_CallbackLevel();

@ffi.Native<NativeCBLLog_SetCallbackLevel>()
external void CBLLog_SetCallbackLevel(
  imp1.DartCBLLogLevel arg0,
);

@ffi.Native<NativeCBLLog_Callback>()
external imp1.CBLLogCallback CBLLog_Callback();

@ffi.Native<NativeCBLLog_SetCallback>()
external void CBLLog_SetCallback(
  imp1.CBLLogCallback callback,
);

@ffi.Native<NativeCBLLog_FileConfig>()
external ffi.Pointer<CBLLogFileConfiguration> CBLLog_FileConfig();

@ffi.Native<NativeCBLLog_SetFileConfig>()
external bool CBLLog_SetFileConfig(
  CBLLogFileConfiguration arg0,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBL_RegisterPredictiveModel>()
external void CBL_RegisterPredictiveModel(
  imp1.FLString name,
  CBLPredictiveModel model,
);

@ffi.Native<NativeCBL_UnregisterPredictiveModel>()
external void CBL_UnregisterPredictiveModel(
  imp1.FLString name,
);

@ffi.Native<NativeCBLDatabase_CreateQuery>()
external ffi.Pointer<CBLQuery> CBLDatabase_CreateQuery(
  ffi.Pointer<CBLDatabase> db,
  imp1.DartCBLQueryLanguage language,
  imp1.FLString queryString,
  ffi.Pointer<ffi.Int> outErrorPos,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLQuery_SetParameters>()
external void CBLQuery_SetParameters(
  ffi.Pointer<CBLQuery> query,
  imp1.FLDict parameters,
);

@ffi.Native<NativeCBLQuery_Parameters>()
external imp1.FLDict CBLQuery_Parameters(
  ffi.Pointer<CBLQuery> query,
);

@ffi.Native<NativeCBLQuery_Execute>()
external ffi.Pointer<CBLResultSet> CBLQuery_Execute(
  ffi.Pointer<CBLQuery> arg0,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLQuery_Explain>()
external FLSliceResult CBLQuery_Explain(
  ffi.Pointer<CBLQuery> arg0,
);

@ffi.Native<NativeCBLQuery_ColumnCount>()
external int CBLQuery_ColumnCount(
  ffi.Pointer<CBLQuery> arg0,
);

@ffi.Native<NativeCBLQuery_ColumnName>()
external FLSlice CBLQuery_ColumnName(
  ffi.Pointer<CBLQuery> arg0,
  int columnIndex,
);

@ffi.Native<NativeCBLResultSet_Next>()
external bool CBLResultSet_Next(
  ffi.Pointer<CBLResultSet> arg0,
);

@ffi.Native<NativeCBLResultSet_ValueAtIndex>()
external imp1.FLValue CBLResultSet_ValueAtIndex(
  ffi.Pointer<CBLResultSet> arg0,
  int index,
);

@ffi.Native<NativeCBLResultSet_ValueForKey>()
external imp1.FLValue CBLResultSet_ValueForKey(
  ffi.Pointer<CBLResultSet> arg0,
  imp1.FLString key,
);

@ffi.Native<NativeCBLResultSet_ResultArray>()
external imp1.FLArray CBLResultSet_ResultArray(
  ffi.Pointer<CBLResultSet> arg0,
);

@ffi.Native<NativeCBLResultSet_ResultDict>()
external imp1.FLDict CBLResultSet_ResultDict(
  ffi.Pointer<CBLResultSet> arg0,
);

@ffi.Native<NativeCBLResultSet_GetQuery>()
external ffi.Pointer<CBLQuery> CBLResultSet_GetQuery(
  ffi.Pointer<CBLResultSet> rs,
);

@ffi.Native<NativeCBLQuery_AddChangeListener>()
external ffi.Pointer<CBLListenerToken> CBLQuery_AddChangeListener(
  ffi.Pointer<CBLQuery> query,
  imp1.CBLQueryChangeListener listener,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<NativeCBLQuery_CopyCurrentResults>()
external ffi.Pointer<CBLResultSet> CBLQuery_CopyCurrentResults(
  ffi.Pointer<CBLQuery> query,
  ffi.Pointer<CBLListenerToken> listener,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLQueryIndex_Name>()
external imp1.FLString CBLQueryIndex_Name(
  ffi.Pointer<CBLQueryIndex> index,
);

@ffi.Native<NativeCBLQueryIndex_Collection>()
external ffi.Pointer<CBLCollection> CBLQueryIndex_Collection(
  ffi.Pointer<CBLQueryIndex> index,
);

@ffi.Native<NativeCBLQueryIndex_BeginUpdate>()
external ffi.Pointer<CBLIndexUpdater> CBLQueryIndex_BeginUpdate(
  ffi.Pointer<CBLQueryIndex> index,
  int limit,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLIndexUpdater_Count>()
external int CBLIndexUpdater_Count(
  ffi.Pointer<CBLIndexUpdater> updater,
);

@ffi.Native<NativeCBLIndexUpdater_Value>()
external imp1.FLValue CBLIndexUpdater_Value(
  ffi.Pointer<CBLIndexUpdater> updater,
  int index,
);

@ffi.Native<NativeCBLIndexUpdater_SetVector>()
external bool CBLIndexUpdater_SetVector(
  ffi.Pointer<CBLIndexUpdater> updater,
  int index,
  ffi.Pointer<ffi.Float> vector,
  int dimension,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLIndexUpdater_SkipVector>()
external void CBLIndexUpdater_SkipVector(
  ffi.Pointer<CBLIndexUpdater> updater,
  int index,
);

@ffi.Native<NativeCBLIndexUpdater_Finish>()
external bool CBLIndexUpdater_Finish(
  ffi.Pointer<CBLIndexUpdater> updater,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<imp1.FLString>()
external final imp1.FLString kCBLDefaultScopeName;

@ffi.Native<NativeCBLScope_Name>()
external imp1.FLString CBLScope_Name(
  ffi.Pointer<CBLScope> scope,
);

@ffi.Native<NativeCBLScope_Database>()
external ffi.Pointer<CBLDatabase> CBLScope_Database(
  ffi.Pointer<CBLScope> scope,
);

@ffi.Native<NativeCBLScope_CollectionNames>()
external imp1.FLMutableArray CBLScope_CollectionNames(
  ffi.Pointer<CBLScope> scope,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeCBLScope_Collection>()
external ffi.Pointer<CBLCollection> CBLScope_Collection(
  ffi.Pointer<CBLScope> scope,
  imp1.FLString collectionName,
  ffi.Pointer<CBLError> outError,
);

@ffi.Native<NativeFLSlice_Equal>()
external bool FLSlice_Equal(
  FLSlice a,
  FLSlice b,
);

@ffi.Native<NativeFLSlice_Compare>()
external int FLSlice_Compare(
  FLSlice arg0,
  FLSlice arg1,
);

@ffi.Native<NativeFLSlice_Hash>()
external int FLSlice_Hash(
  FLSlice s,
);

@ffi.Native<NativeFLSlice_ToCString>()
external bool FLSlice_ToCString(
  FLSlice s,
  ffi.Pointer<ffi.Char> buffer,
  int capacity,
);

@ffi.Native<NativeFLSliceResult_New>()
external FLSliceResult FLSliceResult_New(
  int arg0,
);

@ffi.Native<NativeFLSlice_Copy>()
external FLSliceResult FLSlice_Copy(
  FLSlice arg0,
);

@ffi.Native<NativeFLBuf_Retain>(symbol: "_FLBuf_Retain")
external void FLBuf_Retain(
  ffi.Pointer<ffi.Void> arg0,
);

@ffi.Native<NativeFLBuf_Release>(symbol: "_FLBuf_Release")
external void FLBuf_Release(
  ffi.Pointer<ffi.Void> arg0,
);

@ffi.Native<NativeFL_WipeMemory>()
external void FL_WipeMemory(
  ffi.Pointer<ffi.Void> dst,
  int size,
);

@ffi.Native<NativeFLTimestamp_Now>()
external imp1.DartFLTimestamp FLTimestamp_Now();

@ffi.Native<NativeFLTimestamp_ToString>()
external imp1.FLStringResult FLTimestamp_ToString(
  imp1.DartFLTimestamp timestamp,
  bool asUTC,
);

@ffi.Native<NativeFLTimestamp_FromString>()
external imp1.DartFLTimestamp FLTimestamp_FromString(
  imp1.FLString str,
);

@ffi.Native<imp1.FLArray>()
external imp1.FLArray kFLEmptyArray;

@ffi.Native<NativeFLArray_Count>()
external int FLArray_Count(
  imp1.FLArray arg0,
);

@ffi.Native<NativeFLArray_IsEmpty>()
external bool FLArray_IsEmpty(
  imp1.FLArray arg0,
);

@ffi.Native<NativeFLArray_AsMutable>()
external imp1.FLMutableArray FLArray_AsMutable(
  imp1.FLArray arg0,
);

@ffi.Native<NativeFLArray_Get>()
external imp1.FLValue FLArray_Get(
  imp1.FLArray arg0,
  int index,
);

@ffi.Native<NativeFLArrayIterator_Begin>()
external void FLArrayIterator_Begin(
  imp1.FLArray arg0,
  ffi.Pointer<FLArrayIterator> arg1,
);

@ffi.Native<NativeFLArrayIterator_GetValue>()
external imp1.FLValue FLArrayIterator_GetValue(
  ffi.Pointer<FLArrayIterator> arg0,
);

@ffi.Native<NativeFLArrayIterator_GetValueAt>()
external imp1.FLValue FLArrayIterator_GetValueAt(
  ffi.Pointer<FLArrayIterator> arg0,
  int offset,
);

@ffi.Native<NativeFLArrayIterator_GetCount>()
external int FLArrayIterator_GetCount(
  ffi.Pointer<FLArrayIterator> arg0,
);

@ffi.Native<NativeFLArrayIterator_Next>()
external bool FLArrayIterator_Next(
  ffi.Pointer<FLArrayIterator> arg0,
);

@ffi.Native<imp1.FLDict>()
external imp1.FLDict kFLEmptyDict;

@ffi.Native<NativeFLDict_Count>()
external int FLDict_Count(
  imp1.FLDict arg0,
);

@ffi.Native<NativeFLDict_IsEmpty>()
external bool FLDict_IsEmpty(
  imp1.FLDict arg0,
);

@ffi.Native<NativeFLDict_AsMutable>()
external imp1.FLMutableDict FLDict_AsMutable(
  imp1.FLDict arg0,
);

@ffi.Native<NativeFLDict_Get>()
external imp1.FLValue FLDict_Get(
  imp1.FLDict arg0,
  FLSlice keyString,
);

@ffi.Native<NativeFLDictIterator_Begin>()
external void FLDictIterator_Begin(
  imp1.FLDict arg0,
  ffi.Pointer<FLDictIterator> arg1,
);

@ffi.Native<NativeFLDictIterator_GetKey>()
external imp1.FLValue FLDictIterator_GetKey(
  ffi.Pointer<FLDictIterator> arg0,
);

@ffi.Native<NativeFLDictIterator_GetKeyString>()
external imp1.FLString FLDictIterator_GetKeyString(
  ffi.Pointer<FLDictIterator> arg0,
);

@ffi.Native<NativeFLDictIterator_GetValue>()
external imp1.FLValue FLDictIterator_GetValue(
  ffi.Pointer<FLDictIterator> arg0,
);

@ffi.Native<NativeFLDictIterator_GetCount>()
external int FLDictIterator_GetCount(
  ffi.Pointer<FLDictIterator> arg0,
);

@ffi.Native<NativeFLDictIterator_Next>()
external bool FLDictIterator_Next(
  ffi.Pointer<FLDictIterator> arg0,
);

@ffi.Native<NativeFLDictIterator_End>()
external void FLDictIterator_End(
  ffi.Pointer<FLDictIterator> arg0,
);

@ffi.Native<NativeFLDictKey_Init>()
external FLDictKey FLDictKey_Init(
  FLSlice string,
);

@ffi.Native<NativeFLDictKey_GetString>()
external imp1.FLString FLDictKey_GetString(
  ffi.Pointer<FLDictKey> arg0,
);

@ffi.Native<NativeFLDict_GetWithKey>()
external imp1.FLValue FLDict_GetWithKey(
  imp1.FLDict arg0,
  ffi.Pointer<FLDictKey> arg1,
);

@ffi.Native<NativeFLDeepIterator_New>()
external imp1.FLDeepIterator FLDeepIterator_New(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLDeepIterator_Free>()
external void FLDeepIterator_Free(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDeepIterator_GetValue>()
external imp1.FLValue FLDeepIterator_GetValue(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDeepIterator_GetParent>()
external imp1.FLValue FLDeepIterator_GetParent(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDeepIterator_GetKey>()
external FLSlice FLDeepIterator_GetKey(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDeepIterator_GetIndex>()
external int FLDeepIterator_GetIndex(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDeepIterator_GetDepth>()
external int FLDeepIterator_GetDepth(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDeepIterator_SkipChildren>()
external void FLDeepIterator_SkipChildren(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDeepIterator_Next>()
external bool FLDeepIterator_Next(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDeepIterator_GetPath>()
external void FLDeepIterator_GetPath(
  imp1.FLDeepIterator arg0,
  ffi.Pointer<ffi.Pointer<FLPathComponent>> outPath,
  ffi.Pointer<ffi.Size> outDepth,
);

@ffi.Native<NativeFLDeepIterator_GetPathString>()
external FLSliceResult FLDeepIterator_GetPathString(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDeepIterator_GetJSONPointer>()
external FLSliceResult FLDeepIterator_GetJSONPointer(
  imp1.FLDeepIterator arg0,
);

@ffi.Native<NativeFLDoc_FromResultData>()
external imp1.FLDoc FLDoc_FromResultData(
  FLSliceResult data,
  int arg1,
  imp1.FLSharedKeys arg2,
  FLSlice externData,
);

@ffi.Native<NativeFLDoc_Release>()
external void FLDoc_Release(
  imp1.FLDoc arg0,
);

@ffi.Native<NativeFLDoc_Retain>()
external imp1.FLDoc FLDoc_Retain(
  imp1.FLDoc arg0,
);

@ffi.Native<NativeFLDoc_GetData>()
external FLSlice FLDoc_GetData(
  imp1.FLDoc arg0,
);

@ffi.Native<NativeFLDoc_GetAllocedData>()
external FLSliceResult FLDoc_GetAllocedData(
  imp1.FLDoc arg0,
);

@ffi.Native<NativeFLDoc_GetRoot>()
external imp1.FLValue FLDoc_GetRoot(
  imp1.FLDoc arg0,
);

@ffi.Native<NativeFLDoc_GetSharedKeys>()
external imp1.FLSharedKeys FLDoc_GetSharedKeys(
  imp1.FLDoc arg0,
);

@ffi.Native<NativeFLValue_FindDoc>()
external imp1.FLDoc FLValue_FindDoc(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLDoc_SetAssociated>()
external bool FLDoc_SetAssociated(
  imp1.FLDoc doc,
  ffi.Pointer<ffi.Void> pointer,
  ffi.Pointer<ffi.Char> type,
);

@ffi.Native<NativeFLDoc_GetAssociated>()
external ffi.Pointer<ffi.Void> FLDoc_GetAssociated(
  imp1.FLDoc doc,
  ffi.Pointer<ffi.Char> type,
);

@ffi.Native<NativeFLEncoder_New>()
external imp1.FLEncoder FLEncoder_New();

@ffi.Native<NativeFLEncoder_NewWithOptions>()
external imp1.FLEncoder FLEncoder_NewWithOptions(
  int format,
  int reserveSize,
  bool uniqueStrings,
);

@ffi.Native<NativeFLEncoder_NewWritingToFile>()
external imp1.FLEncoder FLEncoder_NewWritingToFile(
  ffi.Pointer<imp1.FILE> arg0,
  bool uniqueStrings,
);

@ffi.Native<NativeFLEncoder_Free>()
external void FLEncoder_Free(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_SetSharedKeys>()
external void FLEncoder_SetSharedKeys(
  imp1.FLEncoder arg0,
  imp1.FLSharedKeys arg1,
);

@ffi.Native<NativeFLEncoder_SetExtraInfo>()
external void FLEncoder_SetExtraInfo(
  imp1.FLEncoder arg0,
  ffi.Pointer<ffi.Void> info,
);

@ffi.Native<NativeFLEncoder_GetExtraInfo>()
external ffi.Pointer<ffi.Void> FLEncoder_GetExtraInfo(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_Reset>()
external void FLEncoder_Reset(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_BytesWritten>()
external int FLEncoder_BytesWritten(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_WriteNull>()
external bool FLEncoder_WriteNull(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_WriteUndefined>()
external bool FLEncoder_WriteUndefined(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_WriteBool>()
external bool FLEncoder_WriteBool(
  imp1.FLEncoder arg0,
  bool arg1,
);

@ffi.Native<NativeFLEncoder_WriteInt>()
external bool FLEncoder_WriteInt(
  imp1.FLEncoder arg0,
  int arg1,
);

@ffi.Native<NativeFLEncoder_WriteUInt>()
external bool FLEncoder_WriteUInt(
  imp1.FLEncoder arg0,
  int arg1,
);

@ffi.Native<NativeFLEncoder_WriteFloat>()
external bool FLEncoder_WriteFloat(
  imp1.FLEncoder arg0,
  double arg1,
);

@ffi.Native<NativeFLEncoder_WriteDouble>()
external bool FLEncoder_WriteDouble(
  imp1.FLEncoder arg0,
  double arg1,
);

@ffi.Native<NativeFLEncoder_WriteString>()
external bool FLEncoder_WriteString(
  imp1.FLEncoder arg0,
  imp1.FLString arg1,
);

@ffi.Native<NativeFLEncoder_WriteDateString>()
external bool FLEncoder_WriteDateString(
  imp1.FLEncoder encoder,
  imp1.DartFLTimestamp ts,
  bool asUTC,
);

@ffi.Native<NativeFLEncoder_WriteData>()
external bool FLEncoder_WriteData(
  imp1.FLEncoder arg0,
  FLSlice arg1,
);

@ffi.Native<NativeFLEncoder_WriteValue>()
external bool FLEncoder_WriteValue(
  imp1.FLEncoder arg0,
  imp1.FLValue arg1,
);

@ffi.Native<NativeFLEncoder_BeginArray>()
external bool FLEncoder_BeginArray(
  imp1.FLEncoder arg0,
  int reserveCount,
);

@ffi.Native<NativeFLEncoder_EndArray>()
external bool FLEncoder_EndArray(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_BeginDict>()
external bool FLEncoder_BeginDict(
  imp1.FLEncoder arg0,
  int reserveCount,
);

@ffi.Native<NativeFLEncoder_WriteKey>()
external bool FLEncoder_WriteKey(
  imp1.FLEncoder arg0,
  imp1.FLString arg1,
);

@ffi.Native<NativeFLEncoder_WriteKeyValue>()
external bool FLEncoder_WriteKeyValue(
  imp1.FLEncoder arg0,
  imp1.FLValue arg1,
);

@ffi.Native<NativeFLEncoder_EndDict>()
external bool FLEncoder_EndDict(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_WriteRaw>()
external bool FLEncoder_WriteRaw(
  imp1.FLEncoder arg0,
  FLSlice arg1,
);

@ffi.Native<NativeFLEncoder_FinishDoc>()
external imp1.FLDoc FLEncoder_FinishDoc(
  imp1.FLEncoder arg0,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLEncoder_Finish>()
external FLSliceResult FLEncoder_Finish(
  imp1.FLEncoder arg0,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLEncoder_GetError>()
external int FLEncoder_GetError(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_GetErrorMessage>()
external ffi.Pointer<ffi.Char> FLEncoder_GetErrorMessage(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLValue_ToJSON>()
external imp1.FLStringResult FLValue_ToJSON(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_ToJSON5>()
external imp1.FLStringResult FLValue_ToJSON5(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_ToJSONX>()
external imp1.FLStringResult FLValue_ToJSONX(
  imp1.FLValue v,
  bool json5,
  bool canonicalForm,
);

@ffi.Native<NativeFLDoc_FromJSON>()
external imp1.FLDoc FLDoc_FromJSON(
  FLSlice json,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLMutableArray_NewFromJSON>()
external imp1.FLMutableArray FLMutableArray_NewFromJSON(
  imp1.FLString json,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLMutableDict_NewFromJSON>()
external imp1.FLMutableDict FLMutableDict_NewFromJSON(
  imp1.FLString json,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLEncoder_ConvertJSON>()
external bool FLEncoder_ConvertJSON(
  imp1.FLEncoder arg0,
  FLSlice json,
);

@ffi.Native<NativeFLKeyPath_New>()
external imp1.FLKeyPath FLKeyPath_New(
  FLSlice specifier,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLKeyPath_Free>()
external void FLKeyPath_Free(
  imp1.FLKeyPath arg0,
);

@ffi.Native<NativeFLKeyPath_Eval>()
external imp1.FLValue FLKeyPath_Eval(
  imp1.FLKeyPath arg0,
  imp1.FLValue root,
);

@ffi.Native<NativeFLKeyPath_EvalOnce>()
external imp1.FLValue FLKeyPath_EvalOnce(
  FLSlice specifier,
  imp1.FLValue root,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLKeyPath_ToString>()
external imp1.FLStringResult FLKeyPath_ToString(
  imp1.FLKeyPath path,
);

@ffi.Native<NativeFLKeyPath_Equals>()
external bool FLKeyPath_Equals(
  imp1.FLKeyPath path1,
  imp1.FLKeyPath path2,
);

@ffi.Native<NativeFLKeyPath_GetElement>()
external bool FLKeyPath_GetElement(
  imp1.FLKeyPath arg0,
  int i,
  ffi.Pointer<FLSlice> outDictKey,
  ffi.Pointer<ffi.Int32> outArrayIndex,
);

@ffi.Native<imp1.FLValue>()
external imp1.FLValue kFLNullValue;

@ffi.Native<imp1.FLValue>()
external imp1.FLValue kFLUndefinedValue;

@ffi.Native<NativeFLValue_GetType>()
external int FLValue_GetType(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_IsInteger>()
external bool FLValue_IsInteger(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_IsUnsigned>()
external bool FLValue_IsUnsigned(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_IsDouble>()
external bool FLValue_IsDouble(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsBool>()
external bool FLValue_AsBool(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsInt>()
external int FLValue_AsInt(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsUnsigned>()
external int FLValue_AsUnsigned(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsFloat>()
external double FLValue_AsFloat(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsDouble>()
external double FLValue_AsDouble(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsString>()
external imp1.FLString FLValue_AsString(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsTimestamp>()
external imp1.DartFLTimestamp FLValue_AsTimestamp(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsData>()
external FLSlice FLValue_AsData(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsArray>()
external imp1.FLArray FLValue_AsArray(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_AsDict>()
external imp1.FLDict FLValue_AsDict(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_ToString>()
external imp1.FLStringResult FLValue_ToString(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_IsEqual>()
external bool FLValue_IsEqual(
  imp1.FLValue v1,
  imp1.FLValue v2,
);

@ffi.Native<NativeFLValue_IsMutable>()
external bool FLValue_IsMutable(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_Retain>()
external imp1.FLValue FLValue_Retain(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLValue_Release>()
external void FLValue_Release(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLArray_MutableCopy>()
external imp1.FLMutableArray FLArray_MutableCopy(
  imp1.FLArray arg0,
  int arg1,
);

@ffi.Native<NativeFLMutableArray_New>()
external imp1.FLMutableArray FLMutableArray_New();

@ffi.Native<NativeFLMutableArray_GetSource>()
external imp1.FLArray FLMutableArray_GetSource(
  imp1.FLMutableArray arg0,
);

@ffi.Native<NativeFLMutableArray_IsChanged>()
external bool FLMutableArray_IsChanged(
  imp1.FLMutableArray arg0,
);

@ffi.Native<NativeFLMutableArray_SetChanged>()
external void FLMutableArray_SetChanged(
  imp1.FLMutableArray arg0,
  bool changed,
);

@ffi.Native<NativeFLMutableArray_Insert>()
external void FLMutableArray_Insert(
  imp1.FLMutableArray array,
  int firstIndex,
  int count,
);

@ffi.Native<NativeFLMutableArray_Remove>()
external void FLMutableArray_Remove(
  imp1.FLMutableArray array,
  int firstIndex,
  int count,
);

@ffi.Native<NativeFLMutableArray_Resize>()
external void FLMutableArray_Resize(
  imp1.FLMutableArray array,
  int size,
);

@ffi.Native<NativeFLMutableArray_GetMutableArray>()
external imp1.FLMutableArray FLMutableArray_GetMutableArray(
  imp1.FLMutableArray arg0,
  int index,
);

@ffi.Native<NativeFLMutableArray_GetMutableDict>()
external imp1.FLMutableDict FLMutableArray_GetMutableDict(
  imp1.FLMutableArray arg0,
  int index,
);

@ffi.Native<NativeFLDict_MutableCopy>()
external imp1.FLMutableDict FLDict_MutableCopy(
  imp1.FLDict source,
  int arg1,
);

@ffi.Native<NativeFLMutableDict_New>()
external imp1.FLMutableDict FLMutableDict_New();

@ffi.Native<NativeFLMutableDict_GetSource>()
external imp1.FLDict FLMutableDict_GetSource(
  imp1.FLMutableDict arg0,
);

@ffi.Native<NativeFLMutableDict_IsChanged>()
external bool FLMutableDict_IsChanged(
  imp1.FLMutableDict arg0,
);

@ffi.Native<NativeFLMutableDict_SetChanged>()
external void FLMutableDict_SetChanged(
  imp1.FLMutableDict arg0,
  bool arg1,
);

@ffi.Native<NativeFLMutableDict_Remove>()
external void FLMutableDict_Remove(
  imp1.FLMutableDict arg0,
  imp1.FLString key,
);

@ffi.Native<NativeFLMutableDict_RemoveAll>()
external void FLMutableDict_RemoveAll(
  imp1.FLMutableDict arg0,
);

@ffi.Native<NativeFLMutableDict_GetMutableArray>()
external imp1.FLMutableArray FLMutableDict_GetMutableArray(
  imp1.FLMutableDict arg0,
  imp1.FLString key,
);

@ffi.Native<NativeFLMutableDict_GetMutableDict>()
external imp1.FLMutableDict FLMutableDict_GetMutableDict(
  imp1.FLMutableDict arg0,
  imp1.FLString key,
);

@ffi.Native<NativeFLValue_NewString>()
external imp1.FLValue FLValue_NewString(
  imp1.FLString arg0,
);

@ffi.Native<NativeFLValue_NewData>()
external imp1.FLValue FLValue_NewData(
  FLSlice arg0,
);

@ffi.Native<NativeFLMutableArray_Set>()
external imp1.FLSlot FLMutableArray_Set(
  imp1.FLMutableArray arg0,
  int index,
);

@ffi.Native<NativeFLMutableArray_Append>()
external imp1.FLSlot FLMutableArray_Append(
  imp1.FLMutableArray arg0,
);

@ffi.Native<NativeFLMutableDict_Set>()
external imp1.FLSlot FLMutableDict_Set(
  imp1.FLMutableDict arg0,
  imp1.FLString key,
);

@ffi.Native<NativeFLSlot_SetNull>()
external void FLSlot_SetNull(
  imp1.FLSlot arg0,
);

@ffi.Native<NativeFLSlot_SetBool>()
external void FLSlot_SetBool(
  imp1.FLSlot arg0,
  bool arg1,
);

@ffi.Native<NativeFLSlot_SetInt>()
external void FLSlot_SetInt(
  imp1.FLSlot arg0,
  int arg1,
);

@ffi.Native<NativeFLSlot_SetUInt>()
external void FLSlot_SetUInt(
  imp1.FLSlot arg0,
  int arg1,
);

@ffi.Native<NativeFLSlot_SetFloat>()
external void FLSlot_SetFloat(
  imp1.FLSlot arg0,
  double arg1,
);

@ffi.Native<NativeFLSlot_SetDouble>()
external void FLSlot_SetDouble(
  imp1.FLSlot arg0,
  double arg1,
);

@ffi.Native<NativeFLSlot_SetString>()
external void FLSlot_SetString(
  imp1.FLSlot arg0,
  imp1.FLString arg1,
);

@ffi.Native<NativeFLSlot_SetData>()
external void FLSlot_SetData(
  imp1.FLSlot arg0,
  FLSlice arg1,
);

@ffi.Native<NativeFLSlot_SetValue>()
external void FLSlot_SetValue(
  imp1.FLSlot arg0,
  imp1.FLValue arg1,
);

@ffi.Native<NativeFLCreateJSONDelta>()
external FLSliceResult FLCreateJSONDelta(
  imp1.FLValue old,
  imp1.FLValue nuu,
);

@ffi.Native<NativeFLEncodeJSONDelta>()
external bool FLEncodeJSONDelta(
  imp1.FLValue old,
  imp1.FLValue nuu,
  imp1.FLEncoder jsonEncoder,
);

@ffi.Native<NativeFLApplyJSONDelta>()
external FLSliceResult FLApplyJSONDelta(
  imp1.FLValue old,
  FLSlice jsonDelta,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLEncodeApplyingJSONDelta>()
external bool FLEncodeApplyingJSONDelta(
  imp1.FLValue old,
  FLSlice jsonDelta,
  imp1.FLEncoder encoder,
);

@ffi.Native<NativeFLSharedKeys_New>()
external imp1.FLSharedKeys FLSharedKeys_New();

@ffi.Native<NativeFLSharedKeys_NewWithRead>()
external imp1.FLSharedKeys FLSharedKeys_NewWithRead(
  imp1.FLSharedKeysReadCallback arg0,
  ffi.Pointer<ffi.Void> context,
);

@ffi.Native<NativeFLSharedKeys_GetStateData>()
external FLSliceResult FLSharedKeys_GetStateData(
  imp1.FLSharedKeys arg0,
);

@ffi.Native<NativeFLSharedKeys_LoadStateData>()
external bool FLSharedKeys_LoadStateData(
  imp1.FLSharedKeys arg0,
  FLSlice arg1,
);

@ffi.Native<NativeFLSharedKeys_WriteState>()
external void FLSharedKeys_WriteState(
  imp1.FLSharedKeys arg0,
  imp1.FLEncoder arg1,
);

@ffi.Native<NativeFLSharedKeys_LoadState>()
external bool FLSharedKeys_LoadState(
  imp1.FLSharedKeys arg0,
  imp1.FLValue arg1,
);

@ffi.Native<NativeFLSharedKeys_Encode>()
external int FLSharedKeys_Encode(
  imp1.FLSharedKeys arg0,
  imp1.FLString arg1,
  bool add,
);

@ffi.Native<NativeFLSharedKeys_Decode>()
external imp1.FLString FLSharedKeys_Decode(
  imp1.FLSharedKeys arg0,
  int key,
);

@ffi.Native<NativeFLSharedKeys_Count>()
external int FLSharedKeys_Count(
  imp1.FLSharedKeys arg0,
);

@ffi.Native<NativeFLSharedKeys_RevertToCount>()
external void FLSharedKeys_RevertToCount(
  imp1.FLSharedKeys arg0,
  int oldCount,
);

@ffi.Native<NativeFLSharedKeys_DisableCaching>()
external void FLSharedKeys_DisableCaching(
  imp1.FLSharedKeys arg0,
);

@ffi.Native<NativeFLSharedKeys_Retain>()
external imp1.FLSharedKeys FLSharedKeys_Retain(
  imp1.FLSharedKeys arg0,
);

@ffi.Native<NativeFLSharedKeys_Release>()
external void FLSharedKeys_Release(
  imp1.FLSharedKeys arg0,
);

@ffi.Native<NativeFLSharedKeyScope_WithRange>()
external imp1.FLSharedKeyScope FLSharedKeyScope_WithRange(
  FLSlice range,
  imp1.FLSharedKeys arg1,
);

@ffi.Native<NativeFLSharedKeyScope_Free>()
external void FLSharedKeyScope_Free(
  imp1.FLSharedKeyScope arg0,
);

@ffi.Native<NativeFLValue_FromData>()
external imp1.FLValue FLValue_FromData(
  FLSlice data,
  int trust,
);

@ffi.Native<NativeFLJSON5_ToJSON>()
external imp1.FLStringResult FLJSON5_ToJSON(
  imp1.FLString json5,
  ffi.Pointer<imp1.FLStringResult> outErrorMessage,
  ffi.Pointer<ffi.Size> outErrorPos,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLData_ConvertJSON>()
external FLSliceResult FLData_ConvertJSON(
  FLSlice json,
  ffi.Pointer<ffi.UnsignedInt> outError,
);

@ffi.Native<NativeFLEncoder_Amend>()
external void FLEncoder_Amend(
  imp1.FLEncoder e,
  FLSlice base,
  bool reuseStrings,
  bool externPointers,
);

@ffi.Native<NativeFLEncoder_GetBase>()
external FLSlice FLEncoder_GetBase(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_SuppressTrailer>()
external void FLEncoder_SuppressTrailer(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_GetNextWritePos>()
external int FLEncoder_GetNextWritePos(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_LastValueWritten>()
external int FLEncoder_LastValueWritten(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_WriteValueAgain>()
external bool FLEncoder_WriteValueAgain(
  imp1.FLEncoder arg0,
  int preWrittenValue,
);

@ffi.Native<NativeFLEncoder_Snip>()
external FLSliceResult FLEncoder_Snip(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLEncoder_FinishItem>()
external int FLEncoder_FinishItem(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLJSONEncoder_NextDocument>()
external void FLJSONEncoder_NextDocument(
  imp1.FLEncoder arg0,
);

@ffi.Native<NativeFLDump>()
external ffi.Pointer<ffi.Char> FLDump(
  imp1.FLValue arg0,
);

@ffi.Native<NativeFLDumpData>()
external ffi.Pointer<ffi.Char> FLDumpData(
  FLSlice data,
);

@ffi.Native<NativeFLData_Dump>()
external imp1.FLStringResult FLData_Dump(
  FLSlice data,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<NativeCBL_Release>> get CBL_Release =>
      ffi.Native.addressOf(self.CBL_Release);
  ffi.Pointer<ffi.NativeFunction<NativeCBLBlobReader_Close>>
      get CBLBlobReader_Close => ffi.Native.addressOf(self.CBLBlobReader_Close);
  ffi.Pointer<ffi.NativeFunction<NativeFLDoc_Release>> get FLDoc_Release =>
      ffi.Native.addressOf(self.FLDoc_Release);
  ffi.Pointer<ffi.NativeFunction<NativeFLEncoder_Free>> get FLEncoder_Free =>
      ffi.Native.addressOf(self.FLEncoder_Free);
  ffi.Pointer<ffi.NativeFunction<NativeFLValue_Release>> get FLValue_Release =>
      ffi.Native.addressOf(self.FLValue_Release);
  ffi.Pointer<ffi.NativeFunction<NativeFLSharedKeys_Release>>
      get FLSharedKeys_Release =>
          ffi.Native.addressOf(self.FLSharedKeys_Release);
}

typedef CBLError = imp1.CBLError;
typedef FLSliceResult = imp1.FLSliceResult;
typedef NativeCBLError_Message = FLSliceResult Function(
    ffi.Pointer<CBLError> outError);
typedef DartCBLError_Message = FLSliceResult Function(
    ffi.Pointer<CBLError> outError);
typedef NativeCBL_Now = imp1.CBLTimestamp Function();
typedef DartCBL_Now = imp1.CBLTimestamp Function();
typedef CBLRefCounted = imp1.CBLRefCounted;
typedef NativeCBL_Retain = ffi.Pointer<CBLRefCounted> Function(
    ffi.Pointer<CBLRefCounted> arg0);
typedef DartCBL_Retain = ffi.Pointer<CBLRefCounted> Function(
    ffi.Pointer<CBLRefCounted> arg0);
typedef NativeCBL_Release = ffi.Void Function(ffi.Pointer<CBLRefCounted> arg0);
typedef DartCBL_Release = void Function(ffi.Pointer<CBLRefCounted> arg0);
typedef NativeCBL_InstanceCount = ffi.UnsignedInt Function();
typedef DartCBL_InstanceCount = int Function();
typedef NativeCBL_DumpInstances = ffi.Void Function();
typedef DartCBL_DumpInstances = void Function();
typedef CBLDatabase = imp1.CBLDatabase;
typedef CBLScope = imp1.CBLScope;
typedef CBLCollection = imp1.CBLCollection;
typedef CBLDocument = imp1.CBLDocument;
typedef CBLBlob = imp1.CBLBlob;
typedef CBLQuery = imp1.CBLQuery;
typedef CBLResultSet = imp1.CBLResultSet;
typedef CBLQueryIndex = imp1.CBLQueryIndex;
typedef CBLIndexUpdater = imp1.CBLIndexUpdater;
typedef CBLReplicator = imp1.CBLReplicator;
typedef CBLEncryptable = imp1.CBLEncryptable;
typedef CBLListenerToken = imp1.CBLListenerToken;
typedef NativeCBLListener_Remove = ffi.Void Function(
    ffi.Pointer<CBLListenerToken> arg0);
typedef DartCBLListener_Remove = void Function(
    ffi.Pointer<CBLListenerToken> arg0);
typedef FLSlice = imp1.FLSlice;
typedef NativeFLDict_IsBlob = ffi.Bool Function(imp1.FLDict arg0);
typedef DartFLDict_IsBlob = bool Function(imp1.FLDict arg0);
typedef NativeFLDict_GetBlob = ffi.Pointer<CBLBlob> Function(
    imp1.FLDict blobDict);
typedef DartFLDict_GetBlob = ffi.Pointer<CBLBlob> Function(
    imp1.FLDict blobDict);
typedef NativeCBLBlob_Length = ffi.Uint64 Function(ffi.Pointer<CBLBlob> arg0);
typedef DartCBLBlob_Length = int Function(ffi.Pointer<CBLBlob> arg0);
typedef NativeCBLBlob_ContentType = imp1.FLString Function(
    ffi.Pointer<CBLBlob> arg0);
typedef DartCBLBlob_ContentType = imp1.FLString Function(
    ffi.Pointer<CBLBlob> arg0);
typedef NativeCBLBlob_Digest = imp1.FLString Function(
    ffi.Pointer<CBLBlob> arg0);
typedef DartCBLBlob_Digest = imp1.FLString Function(ffi.Pointer<CBLBlob> arg0);
typedef NativeCBLBlob_Properties = imp1.FLDict Function(
    ffi.Pointer<CBLBlob> arg0);
typedef DartCBLBlob_Properties = imp1.FLDict Function(
    ffi.Pointer<CBLBlob> arg0);
typedef NativeCBLBlob_CreateJSON = imp1.FLStringResult Function(
    ffi.Pointer<CBLBlob> blob);
typedef DartCBLBlob_CreateJSON = imp1.FLStringResult Function(
    ffi.Pointer<CBLBlob> blob);
typedef NativeCBLBlob_Content = FLSliceResult Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> outError);
typedef DartCBLBlob_Content = FLSliceResult Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> outError);
typedef CBLBlobReadStream = imp1.CBLBlobReadStream;
typedef NativeCBLBlob_OpenContentStream = ffi.Pointer<CBLBlobReadStream>
    Function(ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> arg1);
typedef DartCBLBlob_OpenContentStream = ffi.Pointer<CBLBlobReadStream> Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> arg1);
typedef NativeCBLBlobReader_Read = ffi.Int Function(
    ffi.Pointer<CBLBlobReadStream> stream,
    ffi.Pointer<ffi.Void> dst,
    ffi.Size maxLength,
    ffi.Pointer<CBLError> outError);
typedef DartCBLBlobReader_Read = int Function(
    ffi.Pointer<CBLBlobReadStream> stream,
    ffi.Pointer<ffi.Void> dst,
    int maxLength,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLBlobReader_Seek = ffi.Int64 Function(
    ffi.Pointer<CBLBlobReadStream> stream,
    ffi.Int64 offset,
    imp1.CBLSeekBase base,
    ffi.Pointer<CBLError> outError);
typedef DartCBLBlobReader_Seek = int Function(
    ffi.Pointer<CBLBlobReadStream> stream,
    int offset,
    imp1.CBLSeekBase base,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLBlobReader_Position = ffi.Uint64 Function(
    ffi.Pointer<CBLBlobReadStream> stream);
typedef DartCBLBlobReader_Position = int Function(
    ffi.Pointer<CBLBlobReadStream> stream);
typedef NativeCBLBlobReader_Close = ffi.Void Function(
    ffi.Pointer<CBLBlobReadStream> arg0);
typedef DartCBLBlobReader_Close = void Function(
    ffi.Pointer<CBLBlobReadStream> arg0);
typedef NativeCBLBlob_Equals = ffi.Bool Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLBlob> anotherBlob);
typedef DartCBLBlob_Equals = bool Function(
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLBlob> anotherBlob);
typedef NativeCBLBlob_CreateWithData = ffi.Pointer<CBLBlob> Function(
    imp1.FLString contentType, FLSlice contents);
typedef DartCBLBlob_CreateWithData = ffi.Pointer<CBLBlob> Function(
    imp1.FLString contentType, FLSlice contents);
typedef CBLBlobWriteStream = imp1.CBLBlobWriteStream;
typedef NativeCBLBlobWriter_Create = ffi.Pointer<CBLBlobWriteStream> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> arg1);
typedef DartCBLBlobWriter_Create = ffi.Pointer<CBLBlobWriteStream> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> arg1);
typedef NativeCBLBlobWriter_Close = ffi.Void Function(
    ffi.Pointer<CBLBlobWriteStream> arg0);
typedef DartCBLBlobWriter_Close = void Function(
    ffi.Pointer<CBLBlobWriteStream> arg0);
typedef NativeCBLBlobWriter_Write = ffi.Bool Function(
    ffi.Pointer<CBLBlobWriteStream> writer,
    ffi.Pointer<ffi.Void> data,
    ffi.Size length,
    ffi.Pointer<CBLError> outError);
typedef DartCBLBlobWriter_Write = bool Function(
    ffi.Pointer<CBLBlobWriteStream> writer,
    ffi.Pointer<ffi.Void> data,
    int length,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLBlob_CreateWithStream = ffi.Pointer<CBLBlob> Function(
    imp1.FLString contentType, ffi.Pointer<CBLBlobWriteStream> writer);
typedef DartCBLBlob_CreateWithStream = ffi.Pointer<CBLBlob> Function(
    imp1.FLString contentType, ffi.Pointer<CBLBlobWriteStream> writer);
typedef NativeFLSlot_SetBlob = ffi.Void Function(
    imp1.FLSlot slot, ffi.Pointer<CBLBlob> blob);
typedef DartFLSlot_SetBlob = void Function(
    imp1.FLSlot slot, ffi.Pointer<CBLBlob> blob);
typedef NativeCBLDatabase_GetBlob = ffi.Pointer<CBLBlob> Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLDict properties,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_GetBlob = ffi.Pointer<CBLBlob> Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLDict properties,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SaveBlob = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLBlob> blob,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SaveBlob = bool Function(ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLBlob> blob, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_GetDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDatabase> database,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_GetDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDatabase> database,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SaveDocument = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SaveDocument = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SaveDocumentWithConcurrencyControl
    = ffi.Bool Function(
        ffi.Pointer<CBLDatabase> db,
        ffi.Pointer<CBLDocument> doc,
        imp1.CBLConcurrencyControl concurrency,
        ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SaveDocumentWithConcurrencyControl = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    imp1.CBLConcurrencyControl concurrency,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SaveDocumentWithConflictHandler = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    imp1.CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SaveDocumentWithConflictHandler = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> doc,
    imp1.CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DeleteDocument = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DeleteDocument = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DeleteDocumentWithConcurrencyControl
    = ffi.Bool Function(
        ffi.Pointer<CBLDatabase> db,
        ffi.Pointer<CBLDocument> document,
        imp1.CBLConcurrencyControl concurrency,
        ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DeleteDocumentWithConcurrencyControl = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    imp1.CBLConcurrencyControl concurrency,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_PurgeDocument = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_PurgeDocument = bool Function(
    ffi.Pointer<CBLDatabase> db,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_PurgeDocumentByID = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> database,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_PurgeDocumentByID = bool Function(
    ffi.Pointer<CBLDatabase> database,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_GetMutableDocument
    = ffi.Pointer<CBLDocument> Function(ffi.Pointer<CBLDatabase> database,
        imp1.FLString docID, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_GetMutableDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDatabase> database,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDocument_Create = ffi.Pointer<CBLDocument> Function();
typedef DartCBLDocument_Create = ffi.Pointer<CBLDocument> Function();
typedef NativeCBLDocument_CreateWithID = ffi.Pointer<CBLDocument> Function(
    imp1.FLString docID);
typedef DartCBLDocument_CreateWithID = ffi.Pointer<CBLDocument> Function(
    imp1.FLString docID);
typedef NativeCBLDocument_MutableCopy = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDocument> original);
typedef DartCBLDocument_MutableCopy = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLDocument> original);
typedef NativeCBLDocument_ID = imp1.FLString Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_ID = imp1.FLString Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_RevisionID = imp1.FLString Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_RevisionID = imp1.FLString Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_Sequence = ffi.Uint64 Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_Sequence = int Function(ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_Properties = imp1.FLDict Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_Properties = imp1.FLDict Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_MutableProperties = imp1.FLMutableDict Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_MutableProperties = imp1.FLMutableDict Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_SetProperties = ffi.Void Function(
    ffi.Pointer<CBLDocument> arg0, imp1.FLMutableDict properties);
typedef DartCBLDocument_SetProperties = void Function(
    ffi.Pointer<CBLDocument> arg0, imp1.FLMutableDict properties);
typedef NativeCBLDocument_CreateJSON = FLSliceResult Function(
    ffi.Pointer<CBLDocument> arg0);
typedef DartCBLDocument_CreateJSON = FLSliceResult Function(
    ffi.Pointer<CBLDocument> arg0);
typedef NativeCBLDocument_SetJSON = ffi.Bool Function(
    ffi.Pointer<CBLDocument> arg0,
    FLSlice json,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDocument_SetJSON = bool Function(ffi.Pointer<CBLDocument> arg0,
    FLSlice json, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_GetDocumentExpiration = imp1.CBLTimestamp Function(
    ffi.Pointer<CBLDatabase> db, FLSlice docID, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_GetDocumentExpiration = imp1.CBLTimestamp Function(
    ffi.Pointer<CBLDatabase> db, FLSlice docID, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_SetDocumentExpiration = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLSlice docID,
    imp1.CBLTimestamp expiration,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_SetDocumentExpiration = bool Function(
    ffi.Pointer<CBLDatabase> db,
    FLSlice docID,
    imp1.CBLTimestamp expiration,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_AddDocumentChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLDatabase> db,
        imp1.FLString docID,
        imp1.CBLDocumentChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef DartCBLDatabase_AddDocumentChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLDatabase> db,
        imp1.FLString docID,
        imp1.CBLDocumentChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef CBLValueIndexConfiguration = imp1.CBLValueIndexConfiguration;
typedef CBLFullTextIndexConfiguration = imp1.CBLFullTextIndexConfiguration;
typedef CBLVectorEncoding = imp1.CBLVectorEncoding;
typedef NativeCBLVectorEncoding_CreateNone = ffi.Pointer<CBLVectorEncoding>
    Function();
typedef DartCBLVectorEncoding_CreateNone = ffi.Pointer<CBLVectorEncoding>
    Function();
typedef NativeCBLVectorEncoding_CreateScalarQuantizer
    = ffi.Pointer<CBLVectorEncoding> Function(imp1.CBLScalarQuantizerType type);
typedef DartCBLVectorEncoding_CreateScalarQuantizer
    = ffi.Pointer<CBLVectorEncoding> Function(imp1.CBLScalarQuantizerType type);
typedef NativeCBLVectorEncoding_CreateProductQuantizer
    = ffi.Pointer<CBLVectorEncoding> Function(
        ffi.UnsignedInt subquantizers, ffi.UnsignedInt bits);
typedef DartCBLVectorEncoding_CreateProductQuantizer
    = ffi.Pointer<CBLVectorEncoding> Function(int subquantizers, int bits);
typedef NativeCBLVectorEncoding_Free = ffi.Void Function(
    ffi.Pointer<CBLVectorEncoding> arg0);
typedef DartCBLVectorEncoding_Free = void Function(
    ffi.Pointer<CBLVectorEncoding> arg0);
typedef CBLVectorIndexConfiguration = imp1.CBLVectorIndexConfiguration;
typedef NativeCBLDatabase_ScopeNames = imp1.FLMutableArray Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_ScopeNames = imp1.FLMutableArray Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_CollectionNames = imp1.FLMutableArray Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CollectionNames = imp1.FLMutableArray Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Scope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Scope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString collectionName,
    imp1.FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString collectionName,
    imp1.FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_CreateCollection
    = ffi.Pointer<CBLCollection> Function(
        ffi.Pointer<CBLDatabase> db,
        imp1.FLString collectionName,
        imp1.FLString scopeName,
        ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CreateCollection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString collectionName,
    imp1.FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DeleteCollection = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString collectionName,
    imp1.FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DeleteCollection = bool Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString collectionName,
    imp1.FLString scopeName,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DefaultScope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DefaultScope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DefaultCollection = ffi.Pointer<CBLCollection>
    Function(ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DefaultCollection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLDatabase> db, ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_Scope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_Scope = ffi.Pointer<CBLScope> Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_Name = imp1.FLString Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_Name = imp1.FLString Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_FullName = imp1.FLString Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_FullName = imp1.FLString Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_Database = ffi.Pointer<CBLDatabase> Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_Database = ffi.Pointer<CBLDatabase> Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_Count = ffi.Uint64 Function(
    ffi.Pointer<CBLCollection> collection);
typedef DartCBLCollection_Count = int Function(
    ffi.Pointer<CBLCollection> collection);
typedef NativeCBLCollection_GetDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetDocument = ffi.Pointer<CBLDocument> Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_SaveDocument = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_SaveDocument = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_SaveDocumentWithConcurrencyControl
    = ffi.Bool Function(
        ffi.Pointer<CBLCollection> collection,
        ffi.Pointer<CBLDocument> doc,
        imp1.CBLConcurrencyControl concurrency,
        ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_SaveDocumentWithConcurrencyControl = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    imp1.CBLConcurrencyControl concurrency,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_SaveDocumentWithConflictHandler = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    imp1.CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_SaveDocumentWithConflictHandler = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> doc,
    imp1.CBLConflictHandler conflictHandler,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_DeleteDocument = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_DeleteDocument = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_DeleteDocumentWithConcurrencyControl
    = ffi.Bool Function(
        ffi.Pointer<CBLCollection> collection,
        ffi.Pointer<CBLDocument> document,
        imp1.CBLConcurrencyControl concurrency,
        ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_DeleteDocumentWithConcurrencyControl = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    imp1.CBLConcurrencyControl concurrency,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_PurgeDocument = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_PurgeDocument = bool Function(
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLDocument> document,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_PurgeDocumentByID = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_PurgeDocumentByID = bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_GetDocumentExpiration = imp1.CBLTimestamp Function(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetDocumentExpiration = imp1.CBLTimestamp Function(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_SetDocumentExpiration = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    imp1.CBLTimestamp expiration,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_SetDocumentExpiration = bool Function(
    ffi.Pointer<CBLCollection> collection,
    FLSlice docID,
    imp1.CBLTimestamp expiration,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_GetMutableDocument
    = ffi.Pointer<CBLDocument> Function(ffi.Pointer<CBLCollection> collection,
        imp1.FLString docID, ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetMutableDocument
    = ffi.Pointer<CBLDocument> Function(ffi.Pointer<CBLCollection> collection,
        imp1.FLString docID, ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_CreateValueIndex = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_CreateValueIndex = bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_CreateFullTextIndex = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_CreateFullTextIndex = bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_CreateVectorIndex = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    CBLVectorIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_CreateVectorIndex = bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    CBLVectorIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_DeleteIndex = ffi.Bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_DeleteIndex = bool Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_GetIndexNames = imp1.FLMutableArray Function(
    ffi.Pointer<CBLCollection> collection, ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetIndexNames = imp1.FLMutableArray Function(
    ffi.Pointer<CBLCollection> collection, ffi.Pointer<CBLError> outError);
typedef NativeCBLCollection_GetIndex = ffi.Pointer<CBLQueryIndex> Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    ffi.Pointer<CBLError> outError);
typedef DartCBLCollection_GetIndex = ffi.Pointer<CBLQueryIndex> Function(
    ffi.Pointer<CBLCollection> collection,
    imp1.FLString name,
    ffi.Pointer<CBLError> outError);
typedef CBLCollectionChange = imp1.CBLCollectionChange;
typedef NativeCBLCollection_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLCollection> collection,
        imp1.CBLCollectionChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef DartCBLCollection_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLCollection> collection,
        imp1.CBLCollectionChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef CBLDocumentChange = imp1.CBLDocumentChange;
typedef NativeCBLCollection_AddDocumentChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLCollection> collection,
        imp1.FLString docID,
        imp1.CBLCollectionDocumentChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef DartCBLCollection_AddDocumentChangeListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLCollection> collection,
        imp1.FLString docID,
        imp1.CBLCollectionDocumentChangeListener listener,
        ffi.Pointer<ffi.Void> context);
typedef NativeCBL_EnableVectorSearch = ffi.Bool Function(
    imp1.FLString path, ffi.Pointer<CBLError> outError);
typedef DartCBL_EnableVectorSearch = bool Function(
    imp1.FLString path, ffi.Pointer<CBLError> outError);
typedef CBLEncryptionKey = imp1.CBLEncryptionKey;
typedef CBLDatabaseConfiguration = imp1.CBLDatabaseConfiguration;
typedef NativeCBLDatabaseConfiguration_Default = CBLDatabaseConfiguration
    Function();
typedef DartCBLDatabaseConfiguration_Default = CBLDatabaseConfiguration
    Function();
typedef NativeCBLEncryptionKey_FromPassword = ffi.Bool Function(
    ffi.Pointer<CBLEncryptionKey> key, imp1.FLString password);
typedef DartCBLEncryptionKey_FromPassword = bool Function(
    ffi.Pointer<CBLEncryptionKey> key, imp1.FLString password);
typedef NativeCBLEncryptionKey_FromPasswordOld = ffi.Bool Function(
    ffi.Pointer<CBLEncryptionKey> key, imp1.FLString password);
typedef DartCBLEncryptionKey_FromPasswordOld = bool Function(
    ffi.Pointer<CBLEncryptionKey> key, imp1.FLString password);
typedef NativeCBL_DatabaseExists = ffi.Bool Function(
    imp1.FLString name, imp1.FLString inDirectory);
typedef DartCBL_DatabaseExists = bool Function(
    imp1.FLString name, imp1.FLString inDirectory);
typedef NativeCBL_CopyDatabase = ffi.Bool Function(
    imp1.FLString fromPath,
    imp1.FLString toName,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError);
typedef DartCBL_CopyDatabase = bool Function(
    imp1.FLString fromPath,
    imp1.FLString toName,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBL_DeleteDatabase = ffi.Bool Function(imp1.FLString name,
    imp1.FLString inDirectory, ffi.Pointer<CBLError> outError);
typedef DartCBL_DeleteDatabase = bool Function(imp1.FLString name,
    imp1.FLString inDirectory, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Open = ffi.Pointer<CBLDatabase> Function(
    FLSlice name,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Open = ffi.Pointer<CBLDatabase> Function(
    FLSlice name,
    ffi.Pointer<CBLDatabaseConfiguration> config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Close = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Close = bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Delete = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_Delete = bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_BeginTransaction = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_BeginTransaction = bool Function(
    ffi.Pointer<CBLDatabase> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_EndTransaction = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Bool commit,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_EndTransaction = bool Function(
    ffi.Pointer<CBLDatabase> arg0, bool commit, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_ChangeEncryptionKey = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Pointer<CBLEncryptionKey> newKey,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_ChangeEncryptionKey = bool Function(
    ffi.Pointer<CBLDatabase> arg0,
    ffi.Pointer<CBLEncryptionKey> newKey,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_PerformMaintenance = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.CBLMaintenanceType type,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_PerformMaintenance = bool Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.CBLMaintenanceType type,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_Name = imp1.FLString Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLDatabase_Name = imp1.FLString Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLDatabase_Path = imp1.FLStringResult Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLDatabase_Path = imp1.FLStringResult Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLDatabase_Count = ffi.Uint64 Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLDatabase_Count = int Function(ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLDatabase_Config = CBLDatabaseConfiguration Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLDatabase_Config = CBLDatabaseConfiguration Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLDatabase_CreateValueIndex = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CreateValueIndex = bool Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString name,
    CBLValueIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_CreateFullTextIndex = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CreateFullTextIndex = bool Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString name,
    CBLFullTextIndexConfiguration config,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_DeleteIndex = ffi.Bool Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.FLString name,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_DeleteIndex = bool Function(ffi.Pointer<CBLDatabase> db,
    imp1.FLString name, ffi.Pointer<CBLError> outError);
typedef NativeCBLDatabase_GetIndexNames = imp1.FLArray Function(
    ffi.Pointer<CBLDatabase> db);
typedef DartCBLDatabase_GetIndexNames = imp1.FLArray Function(
    ffi.Pointer<CBLDatabase> db);
typedef NativeCBLDatabase_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLDatabase> db,
        imp1.CBLDatabaseChangeListener listener, ffi.Pointer<ffi.Void> context);
typedef DartCBLDatabase_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLDatabase> db,
        imp1.CBLDatabaseChangeListener listener, ffi.Pointer<ffi.Void> context);
typedef NativeCBLDatabase_BufferNotifications = ffi.Void Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.CBLNotificationsReadyCallback callback,
    ffi.Pointer<ffi.Void> context);
typedef DartCBLDatabase_BufferNotifications = void Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.CBLNotificationsReadyCallback callback,
    ffi.Pointer<ffi.Void> context);
typedef NativeCBLDatabase_SendNotifications = ffi.Void Function(
    ffi.Pointer<CBLDatabase> db);
typedef DartCBLDatabase_SendNotifications = void Function(
    ffi.Pointer<CBLDatabase> db);
typedef CBLEndpoint = imp1.CBLEndpoint;
typedef NativeCBLEndpoint_CreateWithURL = ffi.Pointer<CBLEndpoint> Function(
    imp1.FLString url, ffi.Pointer<CBLError> outError);
typedef DartCBLEndpoint_CreateWithURL = ffi.Pointer<CBLEndpoint> Function(
    imp1.FLString url, ffi.Pointer<CBLError> outError);
typedef NativeCBLEndpoint_CreateWithLocalDB = ffi.Pointer<CBLEndpoint> Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef DartCBLEndpoint_CreateWithLocalDB = ffi.Pointer<CBLEndpoint> Function(
    ffi.Pointer<CBLDatabase> arg0);
typedef NativeCBLEndpoint_Free = ffi.Void Function(
    ffi.Pointer<CBLEndpoint> arg0);
typedef DartCBLEndpoint_Free = void Function(ffi.Pointer<CBLEndpoint> arg0);
typedef CBLAuthenticator = imp1.CBLAuthenticator;
typedef NativeCBLAuth_CreatePassword = ffi.Pointer<CBLAuthenticator> Function(
    imp1.FLString username, imp1.FLString password);
typedef DartCBLAuth_CreatePassword = ffi.Pointer<CBLAuthenticator> Function(
    imp1.FLString username, imp1.FLString password);
typedef NativeCBLAuth_CreateSession = ffi.Pointer<CBLAuthenticator> Function(
    imp1.FLString sessionID, imp1.FLString cookieName);
typedef DartCBLAuth_CreateSession = ffi.Pointer<CBLAuthenticator> Function(
    imp1.FLString sessionID, imp1.FLString cookieName);
typedef NativeCBLAuth_Free = ffi.Void Function(
    ffi.Pointer<CBLAuthenticator> arg0);
typedef DartCBLAuth_Free = void Function(ffi.Pointer<CBLAuthenticator> arg0);
typedef CBLProxySettings = imp1.CBLProxySettings;
typedef CBLReplicationCollection = imp1.CBLReplicationCollection;
typedef CBLReplicatorConfiguration = imp1.CBLReplicatorConfiguration;
typedef NativeCBLReplicator_Create = ffi.Pointer<CBLReplicator> Function(
    ffi.Pointer<CBLReplicatorConfiguration> arg0,
    ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_Create = ffi.Pointer<CBLReplicator> Function(
    ffi.Pointer<CBLReplicatorConfiguration> arg0,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLReplicator_Config = ffi.Pointer<CBLReplicatorConfiguration>
    Function(ffi.Pointer<CBLReplicator> arg0);
typedef DartCBLReplicator_Config = ffi.Pointer<CBLReplicatorConfiguration>
    Function(ffi.Pointer<CBLReplicator> arg0);
typedef NativeCBLReplicator_Start = ffi.Void Function(
    ffi.Pointer<CBLReplicator> replicator, ffi.Bool resetCheckpoint);
typedef DartCBLReplicator_Start = void Function(
    ffi.Pointer<CBLReplicator> replicator, bool resetCheckpoint);
typedef NativeCBLReplicator_Stop = ffi.Void Function(
    ffi.Pointer<CBLReplicator> arg0);
typedef DartCBLReplicator_Stop = void Function(ffi.Pointer<CBLReplicator> arg0);
typedef NativeCBLReplicator_SetHostReachable = ffi.Void Function(
    ffi.Pointer<CBLReplicator> arg0, ffi.Bool reachable);
typedef DartCBLReplicator_SetHostReachable = void Function(
    ffi.Pointer<CBLReplicator> arg0, bool reachable);
typedef NativeCBLReplicator_SetSuspended = ffi.Void Function(
    ffi.Pointer<CBLReplicator> repl, ffi.Bool suspended);
typedef DartCBLReplicator_SetSuspended = void Function(
    ffi.Pointer<CBLReplicator> repl, bool suspended);
typedef CBLReplicatorProgress = imp1.CBLReplicatorProgress;
typedef CBLReplicatorStatus = imp1.CBLReplicatorStatus;
typedef NativeCBLReplicator_Status = CBLReplicatorStatus Function(
    ffi.Pointer<CBLReplicator> arg0);
typedef DartCBLReplicator_Status = CBLReplicatorStatus Function(
    ffi.Pointer<CBLReplicator> arg0);
typedef NativeCBLReplicator_PendingDocumentIDs = imp1.FLDict Function(
    ffi.Pointer<CBLReplicator> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_PendingDocumentIDs = imp1.FLDict Function(
    ffi.Pointer<CBLReplicator> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLReplicator_IsDocumentPending = ffi.Bool Function(
    ffi.Pointer<CBLReplicator> repl,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_IsDocumentPending = bool Function(
    ffi.Pointer<CBLReplicator> repl,
    imp1.FLString docID,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLReplicator_PendingDocumentIDs2 = imp1.FLDict Function(
    ffi.Pointer<CBLReplicator> arg0,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_PendingDocumentIDs2 = imp1.FLDict Function(
    ffi.Pointer<CBLReplicator> arg0,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLReplicator_IsDocumentPending2 = ffi.Bool Function(
    ffi.Pointer<CBLReplicator> repl,
    imp1.FLString docID,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError);
typedef DartCBLReplicator_IsDocumentPending2 = bool Function(
    ffi.Pointer<CBLReplicator> repl,
    imp1.FLString docID,
    ffi.Pointer<CBLCollection> collection,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLReplicator_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLReplicator> arg0,
        imp1.CBLReplicatorChangeListener arg1, ffi.Pointer<ffi.Void> context);
typedef DartCBLReplicator_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLReplicator> arg0,
        imp1.CBLReplicatorChangeListener arg1, ffi.Pointer<ffi.Void> context);
typedef CBLReplicatedDocument = imp1.CBLReplicatedDocument;
typedef NativeCBLReplicator_AddDocumentReplicationListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLReplicator> arg0,
        imp1.CBLDocumentReplicationListener arg1,
        ffi.Pointer<ffi.Void> context);
typedef DartCBLReplicator_AddDocumentReplicationListener
    = ffi.Pointer<CBLListenerToken> Function(
        ffi.Pointer<CBLReplicator> arg0,
        imp1.CBLDocumentReplicationListener arg1,
        ffi.Pointer<ffi.Void> context);
typedef NativeCBLEncryptable_CreateWithNull = ffi.Pointer<CBLEncryptable>
    Function();
typedef DartCBLEncryptable_CreateWithNull = ffi.Pointer<CBLEncryptable>
    Function();
typedef NativeCBLEncryptable_CreateWithBool = ffi.Pointer<CBLEncryptable>
    Function(ffi.Bool value);
typedef DartCBLEncryptable_CreateWithBool = ffi.Pointer<CBLEncryptable>
    Function(bool value);
typedef NativeCBLEncryptable_CreateWithInt = ffi.Pointer<CBLEncryptable>
    Function(ffi.Int64 value);
typedef DartCBLEncryptable_CreateWithInt = ffi.Pointer<CBLEncryptable> Function(
    int value);
typedef NativeCBLEncryptable_CreateWithUInt = ffi.Pointer<CBLEncryptable>
    Function(ffi.Uint64 value);
typedef DartCBLEncryptable_CreateWithUInt = ffi.Pointer<CBLEncryptable>
    Function(int value);
typedef NativeCBLEncryptable_CreateWithFloat = ffi.Pointer<CBLEncryptable>
    Function(ffi.Float value);
typedef DartCBLEncryptable_CreateWithFloat = ffi.Pointer<CBLEncryptable>
    Function(double value);
typedef NativeCBLEncryptable_CreateWithDouble = ffi.Pointer<CBLEncryptable>
    Function(ffi.Double value);
typedef DartCBLEncryptable_CreateWithDouble = ffi.Pointer<CBLEncryptable>
    Function(double value);
typedef NativeCBLEncryptable_CreateWithString = ffi.Pointer<CBLEncryptable>
    Function(imp1.FLString value);
typedef DartCBLEncryptable_CreateWithString = ffi.Pointer<CBLEncryptable>
    Function(imp1.FLString value);
typedef NativeCBLEncryptable_CreateWithValue = ffi.Pointer<CBLEncryptable>
    Function(imp1.FLValue value);
typedef DartCBLEncryptable_CreateWithValue = ffi.Pointer<CBLEncryptable>
    Function(imp1.FLValue value);
typedef NativeCBLEncryptable_CreateWithArray = ffi.Pointer<CBLEncryptable>
    Function(imp1.FLArray value);
typedef DartCBLEncryptable_CreateWithArray = ffi.Pointer<CBLEncryptable>
    Function(imp1.FLArray value);
typedef NativeCBLEncryptable_CreateWithDict = ffi.Pointer<CBLEncryptable>
    Function(imp1.FLDict value);
typedef DartCBLEncryptable_CreateWithDict = ffi.Pointer<CBLEncryptable>
    Function(imp1.FLDict value);
typedef NativeCBLEncryptable_Value = imp1.FLValue Function(
    ffi.Pointer<CBLEncryptable> encryptable);
typedef DartCBLEncryptable_Value = imp1.FLValue Function(
    ffi.Pointer<CBLEncryptable> encryptable);
typedef NativeCBLEncryptable_Properties = imp1.FLDict Function(
    ffi.Pointer<CBLEncryptable> encryptable);
typedef DartCBLEncryptable_Properties = imp1.FLDict Function(
    ffi.Pointer<CBLEncryptable> encryptable);
typedef NativeFLDict_IsEncryptableValue = ffi.Bool Function(imp1.FLDict arg0);
typedef DartFLDict_IsEncryptableValue = bool Function(imp1.FLDict arg0);
typedef NativeFLDict_GetEncryptableValue = ffi.Pointer<CBLEncryptable> Function(
    imp1.FLDict encryptableDict);
typedef DartFLDict_GetEncryptableValue = ffi.Pointer<CBLEncryptable> Function(
    imp1.FLDict encryptableDict);
typedef NativeFLSlot_SetEncryptableValue = ffi.Void Function(
    imp1.FLSlot slot, ffi.Pointer<CBLEncryptable> encryptable);
typedef DartFLSlot_SetEncryptableValue = void Function(
    imp1.FLSlot slot, ffi.Pointer<CBLEncryptable> encryptable);
typedef NativeCBL_Log = ffi.Void Function(imp1.CBLLogDomain domain,
    imp1.CBLLogLevel level, ffi.Pointer<ffi.Char> format);
typedef DartCBL_Log = void Function(imp1.CBLLogDomain domain,
    imp1.CBLLogLevel level, ffi.Pointer<ffi.Char> format);
typedef NativeCBL_LogMessage = ffi.Void Function(
    imp1.CBLLogDomain domain, imp1.CBLLogLevel level, FLSlice message);
typedef DartCBL_LogMessage = void Function(
    imp1.CBLLogDomain domain, imp1.CBLLogLevel level, FLSlice message);
typedef NativeCBLLog_ConsoleLevel = imp1.CBLLogLevel Function();
typedef DartCBLLog_ConsoleLevel = imp1.CBLLogLevel Function();
typedef NativeCBLLog_SetConsoleLevel = ffi.Void Function(imp1.CBLLogLevel arg0);
typedef DartCBLLog_SetConsoleLevel = void Function(imp1.CBLLogLevel arg0);
typedef NativeCBLLog_CallbackLevel = imp1.CBLLogLevel Function();
typedef DartCBLLog_CallbackLevel = imp1.CBLLogLevel Function();
typedef NativeCBLLog_SetCallbackLevel = ffi.Void Function(
    imp1.CBLLogLevel arg0);
typedef DartCBLLog_SetCallbackLevel = void Function(imp1.CBLLogLevel arg0);
typedef NativeCBLLog_Callback = imp1.CBLLogCallback Function();
typedef DartCBLLog_Callback = imp1.CBLLogCallback Function();
typedef NativeCBLLog_SetCallback = ffi.Void Function(
    imp1.CBLLogCallback callback);
typedef DartCBLLog_SetCallback = void Function(imp1.CBLLogCallback callback);
typedef CBLLogFileConfiguration = imp1.CBLLogFileConfiguration;
typedef NativeCBLLog_FileConfig = ffi.Pointer<CBLLogFileConfiguration>
    Function();
typedef DartCBLLog_FileConfig = ffi.Pointer<CBLLogFileConfiguration> Function();
typedef NativeCBLLog_SetFileConfig = ffi.Bool Function(
    CBLLogFileConfiguration arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLLog_SetFileConfig = bool Function(
    CBLLogFileConfiguration arg0, ffi.Pointer<CBLError> outError);
typedef CBLPredictiveModel = imp1.CBLPredictiveModel;
typedef NativeCBL_RegisterPredictiveModel = ffi.Void Function(
    imp1.FLString name, CBLPredictiveModel model);
typedef DartCBL_RegisterPredictiveModel = void Function(
    imp1.FLString name, CBLPredictiveModel model);
typedef NativeCBL_UnregisterPredictiveModel = ffi.Void Function(
    imp1.FLString name);
typedef DartCBL_UnregisterPredictiveModel = void Function(imp1.FLString name);
typedef NativeCBLDatabase_CreateQuery = ffi.Pointer<CBLQuery> Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.CBLQueryLanguage language,
    imp1.FLString queryString,
    ffi.Pointer<ffi.Int> outErrorPos,
    ffi.Pointer<CBLError> outError);
typedef DartCBLDatabase_CreateQuery = ffi.Pointer<CBLQuery> Function(
    ffi.Pointer<CBLDatabase> db,
    imp1.CBLQueryLanguage language,
    imp1.FLString queryString,
    ffi.Pointer<ffi.Int> outErrorPos,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLQuery_SetParameters = ffi.Void Function(
    ffi.Pointer<CBLQuery> query, imp1.FLDict parameters);
typedef DartCBLQuery_SetParameters = void Function(
    ffi.Pointer<CBLQuery> query, imp1.FLDict parameters);
typedef NativeCBLQuery_Parameters = imp1.FLDict Function(
    ffi.Pointer<CBLQuery> query);
typedef DartCBLQuery_Parameters = imp1.FLDict Function(
    ffi.Pointer<CBLQuery> query);
typedef NativeCBLQuery_Execute = ffi.Pointer<CBLResultSet> Function(
    ffi.Pointer<CBLQuery> arg0, ffi.Pointer<CBLError> outError);
typedef DartCBLQuery_Execute = ffi.Pointer<CBLResultSet> Function(
    ffi.Pointer<CBLQuery> arg0, ffi.Pointer<CBLError> outError);
typedef NativeCBLQuery_Explain = FLSliceResult Function(
    ffi.Pointer<CBLQuery> arg0);
typedef DartCBLQuery_Explain = FLSliceResult Function(
    ffi.Pointer<CBLQuery> arg0);
typedef NativeCBLQuery_ColumnCount = ffi.UnsignedInt Function(
    ffi.Pointer<CBLQuery> arg0);
typedef DartCBLQuery_ColumnCount = int Function(ffi.Pointer<CBLQuery> arg0);
typedef NativeCBLQuery_ColumnName = FLSlice Function(
    ffi.Pointer<CBLQuery> arg0, ffi.UnsignedInt columnIndex);
typedef DartCBLQuery_ColumnName = FLSlice Function(
    ffi.Pointer<CBLQuery> arg0, int columnIndex);
typedef NativeCBLResultSet_Next = ffi.Bool Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef DartCBLResultSet_Next = bool Function(ffi.Pointer<CBLResultSet> arg0);
typedef NativeCBLResultSet_ValueAtIndex = imp1.FLValue Function(
    ffi.Pointer<CBLResultSet> arg0, ffi.UnsignedInt index);
typedef DartCBLResultSet_ValueAtIndex = imp1.FLValue Function(
    ffi.Pointer<CBLResultSet> arg0, int index);
typedef NativeCBLResultSet_ValueForKey = imp1.FLValue Function(
    ffi.Pointer<CBLResultSet> arg0, imp1.FLString key);
typedef DartCBLResultSet_ValueForKey = imp1.FLValue Function(
    ffi.Pointer<CBLResultSet> arg0, imp1.FLString key);
typedef NativeCBLResultSet_ResultArray = imp1.FLArray Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef DartCBLResultSet_ResultArray = imp1.FLArray Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef NativeCBLResultSet_ResultDict = imp1.FLDict Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef DartCBLResultSet_ResultDict = imp1.FLDict Function(
    ffi.Pointer<CBLResultSet> arg0);
typedef NativeCBLResultSet_GetQuery = ffi.Pointer<CBLQuery> Function(
    ffi.Pointer<CBLResultSet> rs);
typedef DartCBLResultSet_GetQuery = ffi.Pointer<CBLQuery> Function(
    ffi.Pointer<CBLResultSet> rs);
typedef NativeCBLQuery_AddChangeListener
    = ffi.Pointer<CBLListenerToken> Function(ffi.Pointer<CBLQuery> query,
        imp1.CBLQueryChangeListener listener, ffi.Pointer<ffi.Void> context);
typedef DartCBLQuery_AddChangeListener = ffi.Pointer<CBLListenerToken> Function(
    ffi.Pointer<CBLQuery> query,
    imp1.CBLQueryChangeListener listener,
    ffi.Pointer<ffi.Void> context);
typedef NativeCBLQuery_CopyCurrentResults = ffi.Pointer<CBLResultSet> Function(
    ffi.Pointer<CBLQuery> query,
    ffi.Pointer<CBLListenerToken> listener,
    ffi.Pointer<CBLError> outError);
typedef DartCBLQuery_CopyCurrentResults = ffi.Pointer<CBLResultSet> Function(
    ffi.Pointer<CBLQuery> query,
    ffi.Pointer<CBLListenerToken> listener,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLQueryIndex_Name = imp1.FLString Function(
    ffi.Pointer<CBLQueryIndex> index);
typedef DartCBLQueryIndex_Name = imp1.FLString Function(
    ffi.Pointer<CBLQueryIndex> index);
typedef NativeCBLQueryIndex_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLQueryIndex> index);
typedef DartCBLQueryIndex_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLQueryIndex> index);
typedef NativeCBLQueryIndex_BeginUpdate = ffi.Pointer<CBLIndexUpdater> Function(
    ffi.Pointer<CBLQueryIndex> index,
    ffi.Size limit,
    ffi.Pointer<CBLError> outError);
typedef DartCBLQueryIndex_BeginUpdate = ffi.Pointer<CBLIndexUpdater> Function(
    ffi.Pointer<CBLQueryIndex> index,
    int limit,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLIndexUpdater_Count = ffi.Size Function(
    ffi.Pointer<CBLIndexUpdater> updater);
typedef DartCBLIndexUpdater_Count = int Function(
    ffi.Pointer<CBLIndexUpdater> updater);
typedef NativeCBLIndexUpdater_Value = imp1.FLValue Function(
    ffi.Pointer<CBLIndexUpdater> updater, ffi.Size index);
typedef DartCBLIndexUpdater_Value = imp1.FLValue Function(
    ffi.Pointer<CBLIndexUpdater> updater, int index);
typedef NativeCBLIndexUpdater_SetVector = ffi.Bool Function(
    ffi.Pointer<CBLIndexUpdater> updater,
    ffi.Size index,
    ffi.Pointer<ffi.Float> vector,
    ffi.Size dimension,
    ffi.Pointer<CBLError> outError);
typedef DartCBLIndexUpdater_SetVector = bool Function(
    ffi.Pointer<CBLIndexUpdater> updater,
    int index,
    ffi.Pointer<ffi.Float> vector,
    int dimension,
    ffi.Pointer<CBLError> outError);
typedef NativeCBLIndexUpdater_SkipVector = ffi.Void Function(
    ffi.Pointer<CBLIndexUpdater> updater, ffi.Size index);
typedef DartCBLIndexUpdater_SkipVector = void Function(
    ffi.Pointer<CBLIndexUpdater> updater, int index);
typedef NativeCBLIndexUpdater_Finish = ffi.Bool Function(
    ffi.Pointer<CBLIndexUpdater> updater, ffi.Pointer<CBLError> outError);
typedef DartCBLIndexUpdater_Finish = bool Function(
    ffi.Pointer<CBLIndexUpdater> updater, ffi.Pointer<CBLError> outError);
typedef NativeCBLScope_Name = imp1.FLString Function(
    ffi.Pointer<CBLScope> scope);
typedef DartCBLScope_Name = imp1.FLString Function(ffi.Pointer<CBLScope> scope);
typedef NativeCBLScope_Database = ffi.Pointer<CBLDatabase> Function(
    ffi.Pointer<CBLScope> scope);
typedef DartCBLScope_Database = ffi.Pointer<CBLDatabase> Function(
    ffi.Pointer<CBLScope> scope);
typedef NativeCBLScope_CollectionNames = imp1.FLMutableArray Function(
    ffi.Pointer<CBLScope> scope, ffi.Pointer<CBLError> outError);
typedef DartCBLScope_CollectionNames = imp1.FLMutableArray Function(
    ffi.Pointer<CBLScope> scope, ffi.Pointer<CBLError> outError);
typedef NativeCBLScope_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLScope> scope,
    imp1.FLString collectionName,
    ffi.Pointer<CBLError> outError);
typedef DartCBLScope_Collection = ffi.Pointer<CBLCollection> Function(
    ffi.Pointer<CBLScope> scope,
    imp1.FLString collectionName,
    ffi.Pointer<CBLError> outError);
typedef NativeFLSlice_Equal = ffi.Bool Function(FLSlice a, FLSlice b);
typedef DartFLSlice_Equal = bool Function(FLSlice a, FLSlice b);
typedef NativeFLSlice_Compare = ffi.Int Function(FLSlice arg0, FLSlice arg1);
typedef DartFLSlice_Compare = int Function(FLSlice arg0, FLSlice arg1);
typedef NativeFLSlice_Hash = ffi.Uint32 Function(FLSlice s);
typedef DartFLSlice_Hash = int Function(FLSlice s);
typedef NativeFLSlice_ToCString = ffi.Bool Function(
    FLSlice s, ffi.Pointer<ffi.Char> buffer, ffi.Size capacity);
typedef DartFLSlice_ToCString = bool Function(
    FLSlice s, ffi.Pointer<ffi.Char> buffer, int capacity);
typedef NativeFLSliceResult_New = FLSliceResult Function(ffi.Size arg0);
typedef DartFLSliceResult_New = FLSliceResult Function(int arg0);
typedef NativeFLSlice_Copy = FLSliceResult Function(FLSlice arg0);
typedef DartFLSlice_Copy = FLSliceResult Function(FLSlice arg0);
typedef NativeFLBuf_Retain = ffi.Void Function(ffi.Pointer<ffi.Void> arg0);
typedef DartFLBuf_Retain = void Function(ffi.Pointer<ffi.Void> arg0);
typedef NativeFLBuf_Release = ffi.Void Function(ffi.Pointer<ffi.Void> arg0);
typedef DartFLBuf_Release = void Function(ffi.Pointer<ffi.Void> arg0);
typedef NativeFL_WipeMemory = ffi.Void Function(
    ffi.Pointer<ffi.Void> dst, ffi.Size size);
typedef DartFL_WipeMemory = void Function(ffi.Pointer<ffi.Void> dst, int size);

sealed class FLError {
  static const kFLNoError = 0;
  static const kFLMemoryError = 1;
  static const kFLOutOfRange = 2;
  static const kFLInvalidData = 3;
  static const kFLEncodeError = 4;
  static const kFLJSONError = 5;
  static const kFLUnknownValue = 6;
  static const kFLInternalError = 7;
  static const kFLNotFound = 8;
  static const kFLSharedKeysStateError = 9;
  static const kFLPOSIXError = 10;
  static const kFLUnsupported = 11;
}

sealed class FLTrust {
  static const kFLUntrusted = 0;
  static const kFLTrusted = 1;
}

typedef NativeFLTimestamp_Now = imp1.FLTimestamp Function();
typedef DartFLTimestamp_Now = imp1.FLTimestamp Function();
typedef NativeFLTimestamp_ToString = imp1.FLStringResult Function(
    imp1.FLTimestamp timestamp, ffi.Bool asUTC);
typedef DartFLTimestamp_ToString = imp1.FLStringResult Function(
    imp1.FLTimestamp timestamp, bool asUTC);
typedef NativeFLTimestamp_FromString = imp1.FLTimestamp Function(
    imp1.FLString str);
typedef DartFLTimestamp_FromString = imp1.FLTimestamp Function(
    imp1.FLString str);
typedef NativeFLArray_Count = ffi.Uint32 Function(imp1.FLArray arg0);
typedef DartFLArray_Count = int Function(imp1.FLArray arg0);
typedef NativeFLArray_IsEmpty = ffi.Bool Function(imp1.FLArray arg0);
typedef DartFLArray_IsEmpty = bool Function(imp1.FLArray arg0);
typedef NativeFLArray_AsMutable = imp1.FLMutableArray Function(
    imp1.FLArray arg0);
typedef DartFLArray_AsMutable = imp1.FLMutableArray Function(imp1.FLArray arg0);
typedef NativeFLArray_Get = imp1.FLValue Function(
    imp1.FLArray arg0, ffi.Uint32 index);
typedef DartFLArray_Get = imp1.FLValue Function(imp1.FLArray arg0, int index);
typedef FLArrayIterator = imp1.FLArrayIterator;
typedef NativeFLArrayIterator_Begin = ffi.Void Function(
    imp1.FLArray arg0, ffi.Pointer<FLArrayIterator> arg1);
typedef DartFLArrayIterator_Begin = void Function(
    imp1.FLArray arg0, ffi.Pointer<FLArrayIterator> arg1);
typedef NativeFLArrayIterator_GetValue = imp1.FLValue Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef DartFLArrayIterator_GetValue = imp1.FLValue Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef NativeFLArrayIterator_GetValueAt = imp1.FLValue Function(
    ffi.Pointer<FLArrayIterator> arg0, ffi.Uint32 offset);
typedef DartFLArrayIterator_GetValueAt = imp1.FLValue Function(
    ffi.Pointer<FLArrayIterator> arg0, int offset);
typedef NativeFLArrayIterator_GetCount = ffi.Uint32 Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef DartFLArrayIterator_GetCount = int Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef NativeFLArrayIterator_Next = ffi.Bool Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef DartFLArrayIterator_Next = bool Function(
    ffi.Pointer<FLArrayIterator> arg0);
typedef NativeFLDict_Count = ffi.Uint32 Function(imp1.FLDict arg0);
typedef DartFLDict_Count = int Function(imp1.FLDict arg0);
typedef NativeFLDict_IsEmpty = ffi.Bool Function(imp1.FLDict arg0);
typedef DartFLDict_IsEmpty = bool Function(imp1.FLDict arg0);
typedef NativeFLDict_AsMutable = imp1.FLMutableDict Function(imp1.FLDict arg0);
typedef DartFLDict_AsMutable = imp1.FLMutableDict Function(imp1.FLDict arg0);
typedef NativeFLDict_Get = imp1.FLValue Function(
    imp1.FLDict arg0, FLSlice keyString);
typedef DartFLDict_Get = imp1.FLValue Function(
    imp1.FLDict arg0, FLSlice keyString);
typedef FLDictIterator = imp1.FLDictIterator;
typedef NativeFLDictIterator_Begin = ffi.Void Function(
    imp1.FLDict arg0, ffi.Pointer<FLDictIterator> arg1);
typedef DartFLDictIterator_Begin = void Function(
    imp1.FLDict arg0, ffi.Pointer<FLDictIterator> arg1);
typedef NativeFLDictIterator_GetKey = imp1.FLValue Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_GetKey = imp1.FLValue Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_GetKeyString = imp1.FLString Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_GetKeyString = imp1.FLString Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_GetValue = imp1.FLValue Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_GetValue = imp1.FLValue Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_GetCount = ffi.Uint32 Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_GetCount = int Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_Next = ffi.Bool Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_Next = bool Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef NativeFLDictIterator_End = ffi.Void Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef DartFLDictIterator_End = void Function(
    ffi.Pointer<FLDictIterator> arg0);
typedef FLDictKey = imp1.FLDictKey;
typedef NativeFLDictKey_Init = FLDictKey Function(FLSlice string);
typedef DartFLDictKey_Init = FLDictKey Function(FLSlice string);
typedef NativeFLDictKey_GetString = imp1.FLString Function(
    ffi.Pointer<FLDictKey> arg0);
typedef DartFLDictKey_GetString = imp1.FLString Function(
    ffi.Pointer<FLDictKey> arg0);
typedef NativeFLDict_GetWithKey = imp1.FLValue Function(
    imp1.FLDict arg0, ffi.Pointer<FLDictKey> arg1);
typedef DartFLDict_GetWithKey = imp1.FLValue Function(
    imp1.FLDict arg0, ffi.Pointer<FLDictKey> arg1);
typedef NativeFLDeepIterator_New = imp1.FLDeepIterator Function(
    imp1.FLValue arg0);
typedef DartFLDeepIterator_New = imp1.FLDeepIterator Function(
    imp1.FLValue arg0);
typedef NativeFLDeepIterator_Free = ffi.Void Function(imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_Free = void Function(imp1.FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetValue = imp1.FLValue Function(
    imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_GetValue = imp1.FLValue Function(
    imp1.FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetParent = imp1.FLValue Function(
    imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_GetParent = imp1.FLValue Function(
    imp1.FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetKey = FLSlice Function(
    imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_GetKey = FLSlice Function(imp1.FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetIndex = ffi.Uint32 Function(
    imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_GetIndex = int Function(imp1.FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetDepth = ffi.Size Function(
    imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_GetDepth = int Function(imp1.FLDeepIterator arg0);
typedef NativeFLDeepIterator_SkipChildren = ffi.Void Function(
    imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_SkipChildren = void Function(
    imp1.FLDeepIterator arg0);
typedef NativeFLDeepIterator_Next = ffi.Bool Function(imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_Next = bool Function(imp1.FLDeepIterator arg0);
typedef FLPathComponent = imp1.FLPathComponent;
typedef NativeFLDeepIterator_GetPath = ffi.Void Function(
    imp1.FLDeepIterator arg0,
    ffi.Pointer<ffi.Pointer<FLPathComponent>> outPath,
    ffi.Pointer<ffi.Size> outDepth);
typedef DartFLDeepIterator_GetPath = void Function(
    imp1.FLDeepIterator arg0,
    ffi.Pointer<ffi.Pointer<FLPathComponent>> outPath,
    ffi.Pointer<ffi.Size> outDepth);
typedef NativeFLDeepIterator_GetPathString = FLSliceResult Function(
    imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_GetPathString = FLSliceResult Function(
    imp1.FLDeepIterator arg0);
typedef NativeFLDeepIterator_GetJSONPointer = FLSliceResult Function(
    imp1.FLDeepIterator arg0);
typedef DartFLDeepIterator_GetJSONPointer = FLSliceResult Function(
    imp1.FLDeepIterator arg0);
typedef NativeFLDoc_FromResultData = imp1.FLDoc Function(FLSliceResult data,
    ffi.UnsignedInt arg1, imp1.FLSharedKeys arg2, FLSlice externData);
typedef DartFLDoc_FromResultData = imp1.FLDoc Function(
    FLSliceResult data, int arg1, imp1.FLSharedKeys arg2, FLSlice externData);
typedef NativeFLDoc_Release = ffi.Void Function(imp1.FLDoc arg0);
typedef DartFLDoc_Release = void Function(imp1.FLDoc arg0);
typedef NativeFLDoc_Retain = imp1.FLDoc Function(imp1.FLDoc arg0);
typedef DartFLDoc_Retain = imp1.FLDoc Function(imp1.FLDoc arg0);
typedef NativeFLDoc_GetData = FLSlice Function(imp1.FLDoc arg0);
typedef DartFLDoc_GetData = FLSlice Function(imp1.FLDoc arg0);
typedef NativeFLDoc_GetAllocedData = FLSliceResult Function(imp1.FLDoc arg0);
typedef DartFLDoc_GetAllocedData = FLSliceResult Function(imp1.FLDoc arg0);
typedef NativeFLDoc_GetRoot = imp1.FLValue Function(imp1.FLDoc arg0);
typedef DartFLDoc_GetRoot = imp1.FLValue Function(imp1.FLDoc arg0);
typedef NativeFLDoc_GetSharedKeys = imp1.FLSharedKeys Function(imp1.FLDoc arg0);
typedef DartFLDoc_GetSharedKeys = imp1.FLSharedKeys Function(imp1.FLDoc arg0);
typedef NativeFLValue_FindDoc = imp1.FLDoc Function(imp1.FLValue arg0);
typedef DartFLValue_FindDoc = imp1.FLDoc Function(imp1.FLValue arg0);
typedef NativeFLDoc_SetAssociated = ffi.Bool Function(
    imp1.FLDoc doc, ffi.Pointer<ffi.Void> pointer, ffi.Pointer<ffi.Char> type);
typedef DartFLDoc_SetAssociated = bool Function(
    imp1.FLDoc doc, ffi.Pointer<ffi.Void> pointer, ffi.Pointer<ffi.Char> type);
typedef NativeFLDoc_GetAssociated = ffi.Pointer<ffi.Void> Function(
    imp1.FLDoc doc, ffi.Pointer<ffi.Char> type);
typedef DartFLDoc_GetAssociated = ffi.Pointer<ffi.Void> Function(
    imp1.FLDoc doc, ffi.Pointer<ffi.Char> type);

sealed class FLEncoderFormat {
  static const kFLEncodeFleece = 0;
  static const kFLEncodeJSON = 1;
  static const kFLEncodeJSON5 = 2;
}

typedef NativeFLEncoder_New = imp1.FLEncoder Function();
typedef DartFLEncoder_New = imp1.FLEncoder Function();
typedef NativeFLEncoder_NewWithOptions = imp1.FLEncoder Function(
    ffi.UnsignedInt format, ffi.Size reserveSize, ffi.Bool uniqueStrings);
typedef DartFLEncoder_NewWithOptions = imp1.FLEncoder Function(
    int format, int reserveSize, bool uniqueStrings);
typedef NativeFLEncoder_NewWritingToFile = imp1.FLEncoder Function(
    ffi.Pointer<imp1.FILE> arg0, ffi.Bool uniqueStrings);
typedef DartFLEncoder_NewWritingToFile = imp1.FLEncoder Function(
    ffi.Pointer<imp1.FILE> arg0, bool uniqueStrings);
typedef NativeFLEncoder_Free = ffi.Void Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_Free = void Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_SetSharedKeys = ffi.Void Function(
    imp1.FLEncoder arg0, imp1.FLSharedKeys arg1);
typedef DartFLEncoder_SetSharedKeys = void Function(
    imp1.FLEncoder arg0, imp1.FLSharedKeys arg1);
typedef NativeFLEncoder_SetExtraInfo = ffi.Void Function(
    imp1.FLEncoder arg0, ffi.Pointer<ffi.Void> info);
typedef DartFLEncoder_SetExtraInfo = void Function(
    imp1.FLEncoder arg0, ffi.Pointer<ffi.Void> info);
typedef NativeFLEncoder_GetExtraInfo = ffi.Pointer<ffi.Void> Function(
    imp1.FLEncoder arg0);
typedef DartFLEncoder_GetExtraInfo = ffi.Pointer<ffi.Void> Function(
    imp1.FLEncoder arg0);
typedef NativeFLEncoder_Reset = ffi.Void Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_Reset = void Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_BytesWritten = ffi.Size Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_BytesWritten = int Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_WriteNull = ffi.Bool Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_WriteNull = bool Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_WriteUndefined = ffi.Bool Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_WriteUndefined = bool Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_WriteBool = ffi.Bool Function(
    imp1.FLEncoder arg0, ffi.Bool arg1);
typedef DartFLEncoder_WriteBool = bool Function(imp1.FLEncoder arg0, bool arg1);
typedef NativeFLEncoder_WriteInt = ffi.Bool Function(
    imp1.FLEncoder arg0, ffi.Int64 arg1);
typedef DartFLEncoder_WriteInt = bool Function(imp1.FLEncoder arg0, int arg1);
typedef NativeFLEncoder_WriteUInt = ffi.Bool Function(
    imp1.FLEncoder arg0, ffi.Uint64 arg1);
typedef DartFLEncoder_WriteUInt = bool Function(imp1.FLEncoder arg0, int arg1);
typedef NativeFLEncoder_WriteFloat = ffi.Bool Function(
    imp1.FLEncoder arg0, ffi.Float arg1);
typedef DartFLEncoder_WriteFloat = bool Function(
    imp1.FLEncoder arg0, double arg1);
typedef NativeFLEncoder_WriteDouble = ffi.Bool Function(
    imp1.FLEncoder arg0, ffi.Double arg1);
typedef DartFLEncoder_WriteDouble = bool Function(
    imp1.FLEncoder arg0, double arg1);
typedef NativeFLEncoder_WriteString = ffi.Bool Function(
    imp1.FLEncoder arg0, imp1.FLString arg1);
typedef DartFLEncoder_WriteString = bool Function(
    imp1.FLEncoder arg0, imp1.FLString arg1);
typedef NativeFLEncoder_WriteDateString = ffi.Bool Function(
    imp1.FLEncoder encoder, imp1.FLTimestamp ts, ffi.Bool asUTC);
typedef DartFLEncoder_WriteDateString = bool Function(
    imp1.FLEncoder encoder, imp1.FLTimestamp ts, bool asUTC);
typedef NativeFLEncoder_WriteData = ffi.Bool Function(
    imp1.FLEncoder arg0, FLSlice arg1);
typedef DartFLEncoder_WriteData = bool Function(
    imp1.FLEncoder arg0, FLSlice arg1);
typedef NativeFLEncoder_WriteValue = ffi.Bool Function(
    imp1.FLEncoder arg0, imp1.FLValue arg1);
typedef DartFLEncoder_WriteValue = bool Function(
    imp1.FLEncoder arg0, imp1.FLValue arg1);
typedef NativeFLEncoder_BeginArray = ffi.Bool Function(
    imp1.FLEncoder arg0, ffi.Size reserveCount);
typedef DartFLEncoder_BeginArray = bool Function(
    imp1.FLEncoder arg0, int reserveCount);
typedef NativeFLEncoder_EndArray = ffi.Bool Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_EndArray = bool Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_BeginDict = ffi.Bool Function(
    imp1.FLEncoder arg0, ffi.Size reserveCount);
typedef DartFLEncoder_BeginDict = bool Function(
    imp1.FLEncoder arg0, int reserveCount);
typedef NativeFLEncoder_WriteKey = ffi.Bool Function(
    imp1.FLEncoder arg0, imp1.FLString arg1);
typedef DartFLEncoder_WriteKey = bool Function(
    imp1.FLEncoder arg0, imp1.FLString arg1);
typedef NativeFLEncoder_WriteKeyValue = ffi.Bool Function(
    imp1.FLEncoder arg0, imp1.FLValue arg1);
typedef DartFLEncoder_WriteKeyValue = bool Function(
    imp1.FLEncoder arg0, imp1.FLValue arg1);
typedef NativeFLEncoder_EndDict = ffi.Bool Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_EndDict = bool Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_WriteRaw = ffi.Bool Function(
    imp1.FLEncoder arg0, FLSlice arg1);
typedef DartFLEncoder_WriteRaw = bool Function(
    imp1.FLEncoder arg0, FLSlice arg1);
typedef NativeFLEncoder_FinishDoc = imp1.FLDoc Function(
    imp1.FLEncoder arg0, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLEncoder_FinishDoc = imp1.FLDoc Function(
    imp1.FLEncoder arg0, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncoder_Finish = FLSliceResult Function(
    imp1.FLEncoder arg0, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLEncoder_Finish = FLSliceResult Function(
    imp1.FLEncoder arg0, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncoder_GetError = ffi.UnsignedInt Function(
    imp1.FLEncoder arg0);
typedef DartFLEncoder_GetError = int Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_GetErrorMessage = ffi.Pointer<ffi.Char> Function(
    imp1.FLEncoder arg0);
typedef DartFLEncoder_GetErrorMessage = ffi.Pointer<ffi.Char> Function(
    imp1.FLEncoder arg0);
typedef NativeFLValue_ToJSON = imp1.FLStringResult Function(imp1.FLValue arg0);
typedef DartFLValue_ToJSON = imp1.FLStringResult Function(imp1.FLValue arg0);
typedef NativeFLValue_ToJSON5 = imp1.FLStringResult Function(imp1.FLValue arg0);
typedef DartFLValue_ToJSON5 = imp1.FLStringResult Function(imp1.FLValue arg0);
typedef NativeFLValue_ToJSONX = imp1.FLStringResult Function(
    imp1.FLValue v, ffi.Bool json5, ffi.Bool canonicalForm);
typedef DartFLValue_ToJSONX = imp1.FLStringResult Function(
    imp1.FLValue v, bool json5, bool canonicalForm);
typedef NativeFLDoc_FromJSON = imp1.FLDoc Function(
    FLSlice json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLDoc_FromJSON = imp1.FLDoc Function(
    FLSlice json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLMutableArray_NewFromJSON = imp1.FLMutableArray Function(
    imp1.FLString json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLMutableArray_NewFromJSON = imp1.FLMutableArray Function(
    imp1.FLString json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLMutableDict_NewFromJSON = imp1.FLMutableDict Function(
    imp1.FLString json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLMutableDict_NewFromJSON = imp1.FLMutableDict Function(
    imp1.FLString json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncoder_ConvertJSON = ffi.Bool Function(
    imp1.FLEncoder arg0, FLSlice json);
typedef DartFLEncoder_ConvertJSON = bool Function(
    imp1.FLEncoder arg0, FLSlice json);
typedef NativeFLKeyPath_New = imp1.FLKeyPath Function(
    FLSlice specifier, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLKeyPath_New = imp1.FLKeyPath Function(
    FLSlice specifier, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLKeyPath_Free = ffi.Void Function(imp1.FLKeyPath arg0);
typedef DartFLKeyPath_Free = void Function(imp1.FLKeyPath arg0);
typedef NativeFLKeyPath_Eval = imp1.FLValue Function(
    imp1.FLKeyPath arg0, imp1.FLValue root);
typedef DartFLKeyPath_Eval = imp1.FLValue Function(
    imp1.FLKeyPath arg0, imp1.FLValue root);
typedef NativeFLKeyPath_EvalOnce = imp1.FLValue Function(FLSlice specifier,
    imp1.FLValue root, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLKeyPath_EvalOnce = imp1.FLValue Function(FLSlice specifier,
    imp1.FLValue root, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLKeyPath_ToString = imp1.FLStringResult Function(
    imp1.FLKeyPath path);
typedef DartFLKeyPath_ToString = imp1.FLStringResult Function(
    imp1.FLKeyPath path);
typedef NativeFLKeyPath_Equals = ffi.Bool Function(
    imp1.FLKeyPath path1, imp1.FLKeyPath path2);
typedef DartFLKeyPath_Equals = bool Function(
    imp1.FLKeyPath path1, imp1.FLKeyPath path2);
typedef NativeFLKeyPath_GetElement = ffi.Bool Function(
    imp1.FLKeyPath arg0,
    ffi.Size i,
    ffi.Pointer<FLSlice> outDictKey,
    ffi.Pointer<ffi.Int32> outArrayIndex);
typedef DartFLKeyPath_GetElement = bool Function(imp1.FLKeyPath arg0, int i,
    ffi.Pointer<FLSlice> outDictKey, ffi.Pointer<ffi.Int32> outArrayIndex);

sealed class FLValueType {
  static const kFLUndefined = -1;
  static const kFLNull = 0;
  static const kFLBoolean = 1;
  static const kFLNumber = 2;
  static const kFLString = 3;
  static const kFLData = 4;
  static const kFLArray = 5;
  static const kFLDict = 6;
}

typedef NativeFLValue_GetType = ffi.Int Function(imp1.FLValue arg0);
typedef DartFLValue_GetType = int Function(imp1.FLValue arg0);
typedef NativeFLValue_IsInteger = ffi.Bool Function(imp1.FLValue arg0);
typedef DartFLValue_IsInteger = bool Function(imp1.FLValue arg0);
typedef NativeFLValue_IsUnsigned = ffi.Bool Function(imp1.FLValue arg0);
typedef DartFLValue_IsUnsigned = bool Function(imp1.FLValue arg0);
typedef NativeFLValue_IsDouble = ffi.Bool Function(imp1.FLValue arg0);
typedef DartFLValue_IsDouble = bool Function(imp1.FLValue arg0);
typedef NativeFLValue_AsBool = ffi.Bool Function(imp1.FLValue arg0);
typedef DartFLValue_AsBool = bool Function(imp1.FLValue arg0);
typedef NativeFLValue_AsInt = ffi.Int64 Function(imp1.FLValue arg0);
typedef DartFLValue_AsInt = int Function(imp1.FLValue arg0);
typedef NativeFLValue_AsUnsigned = ffi.Uint64 Function(imp1.FLValue arg0);
typedef DartFLValue_AsUnsigned = int Function(imp1.FLValue arg0);
typedef NativeFLValue_AsFloat = ffi.Float Function(imp1.FLValue arg0);
typedef DartFLValue_AsFloat = double Function(imp1.FLValue arg0);
typedef NativeFLValue_AsDouble = ffi.Double Function(imp1.FLValue arg0);
typedef DartFLValue_AsDouble = double Function(imp1.FLValue arg0);
typedef NativeFLValue_AsString = imp1.FLString Function(imp1.FLValue arg0);
typedef DartFLValue_AsString = imp1.FLString Function(imp1.FLValue arg0);
typedef NativeFLValue_AsTimestamp = imp1.FLTimestamp Function(
    imp1.FLValue arg0);
typedef DartFLValue_AsTimestamp = imp1.FLTimestamp Function(imp1.FLValue arg0);
typedef NativeFLValue_AsData = FLSlice Function(imp1.FLValue arg0);
typedef DartFLValue_AsData = FLSlice Function(imp1.FLValue arg0);
typedef NativeFLValue_AsArray = imp1.FLArray Function(imp1.FLValue arg0);
typedef DartFLValue_AsArray = imp1.FLArray Function(imp1.FLValue arg0);
typedef NativeFLValue_AsDict = imp1.FLDict Function(imp1.FLValue arg0);
typedef DartFLValue_AsDict = imp1.FLDict Function(imp1.FLValue arg0);
typedef NativeFLValue_ToString = imp1.FLStringResult Function(
    imp1.FLValue arg0);
typedef DartFLValue_ToString = imp1.FLStringResult Function(imp1.FLValue arg0);
typedef NativeFLValue_IsEqual = ffi.Bool Function(
    imp1.FLValue v1, imp1.FLValue v2);
typedef DartFLValue_IsEqual = bool Function(imp1.FLValue v1, imp1.FLValue v2);
typedef NativeFLValue_IsMutable = ffi.Bool Function(imp1.FLValue arg0);
typedef DartFLValue_IsMutable = bool Function(imp1.FLValue arg0);
typedef NativeFLValue_Retain = imp1.FLValue Function(imp1.FLValue arg0);
typedef DartFLValue_Retain = imp1.FLValue Function(imp1.FLValue arg0);
typedef NativeFLValue_Release = ffi.Void Function(imp1.FLValue arg0);
typedef DartFLValue_Release = void Function(imp1.FLValue arg0);

sealed class FLCopyFlags {
  static const kFLDefaultCopy = 0;
  static const kFLDeepCopy = 1;
  static const kFLCopyImmutables = 2;
  static const kFLDeepCopyImmutables = 3;
}

typedef NativeFLArray_MutableCopy = imp1.FLMutableArray Function(
    imp1.FLArray arg0, ffi.UnsignedInt arg1);
typedef DartFLArray_MutableCopy = imp1.FLMutableArray Function(
    imp1.FLArray arg0, int arg1);
typedef NativeFLMutableArray_New = imp1.FLMutableArray Function();
typedef DartFLMutableArray_New = imp1.FLMutableArray Function();
typedef NativeFLMutableArray_GetSource = imp1.FLArray Function(
    imp1.FLMutableArray arg0);
typedef DartFLMutableArray_GetSource = imp1.FLArray Function(
    imp1.FLMutableArray arg0);
typedef NativeFLMutableArray_IsChanged = ffi.Bool Function(
    imp1.FLMutableArray arg0);
typedef DartFLMutableArray_IsChanged = bool Function(imp1.FLMutableArray arg0);
typedef NativeFLMutableArray_SetChanged = ffi.Void Function(
    imp1.FLMutableArray arg0, ffi.Bool changed);
typedef DartFLMutableArray_SetChanged = void Function(
    imp1.FLMutableArray arg0, bool changed);
typedef NativeFLMutableArray_Insert = ffi.Void Function(
    imp1.FLMutableArray array, ffi.Uint32 firstIndex, ffi.Uint32 count);
typedef DartFLMutableArray_Insert = void Function(
    imp1.FLMutableArray array, int firstIndex, int count);
typedef NativeFLMutableArray_Remove = ffi.Void Function(
    imp1.FLMutableArray array, ffi.Uint32 firstIndex, ffi.Uint32 count);
typedef DartFLMutableArray_Remove = void Function(
    imp1.FLMutableArray array, int firstIndex, int count);
typedef NativeFLMutableArray_Resize = ffi.Void Function(
    imp1.FLMutableArray array, ffi.Uint32 size);
typedef DartFLMutableArray_Resize = void Function(
    imp1.FLMutableArray array, int size);
typedef NativeFLMutableArray_GetMutableArray = imp1.FLMutableArray Function(
    imp1.FLMutableArray arg0, ffi.Uint32 index);
typedef DartFLMutableArray_GetMutableArray = imp1.FLMutableArray Function(
    imp1.FLMutableArray arg0, int index);
typedef NativeFLMutableArray_GetMutableDict = imp1.FLMutableDict Function(
    imp1.FLMutableArray arg0, ffi.Uint32 index);
typedef DartFLMutableArray_GetMutableDict = imp1.FLMutableDict Function(
    imp1.FLMutableArray arg0, int index);
typedef NativeFLDict_MutableCopy = imp1.FLMutableDict Function(
    imp1.FLDict source, ffi.UnsignedInt arg1);
typedef DartFLDict_MutableCopy = imp1.FLMutableDict Function(
    imp1.FLDict source, int arg1);
typedef NativeFLMutableDict_New = imp1.FLMutableDict Function();
typedef DartFLMutableDict_New = imp1.FLMutableDict Function();
typedef NativeFLMutableDict_GetSource = imp1.FLDict Function(
    imp1.FLMutableDict arg0);
typedef DartFLMutableDict_GetSource = imp1.FLDict Function(
    imp1.FLMutableDict arg0);
typedef NativeFLMutableDict_IsChanged = ffi.Bool Function(
    imp1.FLMutableDict arg0);
typedef DartFLMutableDict_IsChanged = bool Function(imp1.FLMutableDict arg0);
typedef NativeFLMutableDict_SetChanged = ffi.Void Function(
    imp1.FLMutableDict arg0, ffi.Bool arg1);
typedef DartFLMutableDict_SetChanged = void Function(
    imp1.FLMutableDict arg0, bool arg1);
typedef NativeFLMutableDict_Remove = ffi.Void Function(
    imp1.FLMutableDict arg0, imp1.FLString key);
typedef DartFLMutableDict_Remove = void Function(
    imp1.FLMutableDict arg0, imp1.FLString key);
typedef NativeFLMutableDict_RemoveAll = ffi.Void Function(
    imp1.FLMutableDict arg0);
typedef DartFLMutableDict_RemoveAll = void Function(imp1.FLMutableDict arg0);
typedef NativeFLMutableDict_GetMutableArray = imp1.FLMutableArray Function(
    imp1.FLMutableDict arg0, imp1.FLString key);
typedef DartFLMutableDict_GetMutableArray = imp1.FLMutableArray Function(
    imp1.FLMutableDict arg0, imp1.FLString key);
typedef NativeFLMutableDict_GetMutableDict = imp1.FLMutableDict Function(
    imp1.FLMutableDict arg0, imp1.FLString key);
typedef DartFLMutableDict_GetMutableDict = imp1.FLMutableDict Function(
    imp1.FLMutableDict arg0, imp1.FLString key);
typedef NativeFLValue_NewString = imp1.FLValue Function(imp1.FLString arg0);
typedef DartFLValue_NewString = imp1.FLValue Function(imp1.FLString arg0);
typedef NativeFLValue_NewData = imp1.FLValue Function(FLSlice arg0);
typedef DartFLValue_NewData = imp1.FLValue Function(FLSlice arg0);
typedef NativeFLMutableArray_Set = imp1.FLSlot Function(
    imp1.FLMutableArray arg0, ffi.Uint32 index);
typedef DartFLMutableArray_Set = imp1.FLSlot Function(
    imp1.FLMutableArray arg0, int index);
typedef NativeFLMutableArray_Append = imp1.FLSlot Function(
    imp1.FLMutableArray arg0);
typedef DartFLMutableArray_Append = imp1.FLSlot Function(
    imp1.FLMutableArray arg0);
typedef NativeFLMutableDict_Set = imp1.FLSlot Function(
    imp1.FLMutableDict arg0, imp1.FLString key);
typedef DartFLMutableDict_Set = imp1.FLSlot Function(
    imp1.FLMutableDict arg0, imp1.FLString key);
typedef NativeFLSlot_SetNull = ffi.Void Function(imp1.FLSlot arg0);
typedef DartFLSlot_SetNull = void Function(imp1.FLSlot arg0);
typedef NativeFLSlot_SetBool = ffi.Void Function(
    imp1.FLSlot arg0, ffi.Bool arg1);
typedef DartFLSlot_SetBool = void Function(imp1.FLSlot arg0, bool arg1);
typedef NativeFLSlot_SetInt = ffi.Void Function(
    imp1.FLSlot arg0, ffi.Int64 arg1);
typedef DartFLSlot_SetInt = void Function(imp1.FLSlot arg0, int arg1);
typedef NativeFLSlot_SetUInt = ffi.Void Function(
    imp1.FLSlot arg0, ffi.Uint64 arg1);
typedef DartFLSlot_SetUInt = void Function(imp1.FLSlot arg0, int arg1);
typedef NativeFLSlot_SetFloat = ffi.Void Function(
    imp1.FLSlot arg0, ffi.Float arg1);
typedef DartFLSlot_SetFloat = void Function(imp1.FLSlot arg0, double arg1);
typedef NativeFLSlot_SetDouble = ffi.Void Function(
    imp1.FLSlot arg0, ffi.Double arg1);
typedef DartFLSlot_SetDouble = void Function(imp1.FLSlot arg0, double arg1);
typedef NativeFLSlot_SetString = ffi.Void Function(
    imp1.FLSlot arg0, imp1.FLString arg1);
typedef DartFLSlot_SetString = void Function(
    imp1.FLSlot arg0, imp1.FLString arg1);
typedef NativeFLSlot_SetData = ffi.Void Function(
    imp1.FLSlot arg0, FLSlice arg1);
typedef DartFLSlot_SetData = void Function(imp1.FLSlot arg0, FLSlice arg1);
typedef NativeFLSlot_SetValue = ffi.Void Function(
    imp1.FLSlot arg0, imp1.FLValue arg1);
typedef DartFLSlot_SetValue = void Function(
    imp1.FLSlot arg0, imp1.FLValue arg1);
typedef NativeFLCreateJSONDelta = FLSliceResult Function(
    imp1.FLValue old, imp1.FLValue nuu);
typedef DartFLCreateJSONDelta = FLSliceResult Function(
    imp1.FLValue old, imp1.FLValue nuu);
typedef NativeFLEncodeJSONDelta = ffi.Bool Function(
    imp1.FLValue old, imp1.FLValue nuu, imp1.FLEncoder jsonEncoder);
typedef DartFLEncodeJSONDelta = bool Function(
    imp1.FLValue old, imp1.FLValue nuu, imp1.FLEncoder jsonEncoder);
typedef NativeFLApplyJSONDelta = FLSliceResult Function(
    imp1.FLValue old, FLSlice jsonDelta, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLApplyJSONDelta = FLSliceResult Function(
    imp1.FLValue old, FLSlice jsonDelta, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncodeApplyingJSONDelta = ffi.Bool Function(
    imp1.FLValue old, FLSlice jsonDelta, imp1.FLEncoder encoder);
typedef DartFLEncodeApplyingJSONDelta = bool Function(
    imp1.FLValue old, FLSlice jsonDelta, imp1.FLEncoder encoder);
typedef NativeFLSharedKeys_New = imp1.FLSharedKeys Function();
typedef DartFLSharedKeys_New = imp1.FLSharedKeys Function();
typedef NativeFLSharedKeys_NewWithRead = imp1.FLSharedKeys Function(
    imp1.FLSharedKeysReadCallback arg0, ffi.Pointer<ffi.Void> context);
typedef DartFLSharedKeys_NewWithRead = imp1.FLSharedKeys Function(
    imp1.FLSharedKeysReadCallback arg0, ffi.Pointer<ffi.Void> context);
typedef NativeFLSharedKeys_GetStateData = FLSliceResult Function(
    imp1.FLSharedKeys arg0);
typedef DartFLSharedKeys_GetStateData = FLSliceResult Function(
    imp1.FLSharedKeys arg0);
typedef NativeFLSharedKeys_LoadStateData = ffi.Bool Function(
    imp1.FLSharedKeys arg0, FLSlice arg1);
typedef DartFLSharedKeys_LoadStateData = bool Function(
    imp1.FLSharedKeys arg0, FLSlice arg1);
typedef NativeFLSharedKeys_WriteState = ffi.Void Function(
    imp1.FLSharedKeys arg0, imp1.FLEncoder arg1);
typedef DartFLSharedKeys_WriteState = void Function(
    imp1.FLSharedKeys arg0, imp1.FLEncoder arg1);
typedef NativeFLSharedKeys_LoadState = ffi.Bool Function(
    imp1.FLSharedKeys arg0, imp1.FLValue arg1);
typedef DartFLSharedKeys_LoadState = bool Function(
    imp1.FLSharedKeys arg0, imp1.FLValue arg1);
typedef NativeFLSharedKeys_Encode = ffi.Int Function(
    imp1.FLSharedKeys arg0, imp1.FLString arg1, ffi.Bool add);
typedef DartFLSharedKeys_Encode = int Function(
    imp1.FLSharedKeys arg0, imp1.FLString arg1, bool add);
typedef NativeFLSharedKeys_Decode = imp1.FLString Function(
    imp1.FLSharedKeys arg0, ffi.Int key);
typedef DartFLSharedKeys_Decode = imp1.FLString Function(
    imp1.FLSharedKeys arg0, int key);
typedef NativeFLSharedKeys_Count = ffi.UnsignedInt Function(
    imp1.FLSharedKeys arg0);
typedef DartFLSharedKeys_Count = int Function(imp1.FLSharedKeys arg0);
typedef NativeFLSharedKeys_RevertToCount = ffi.Void Function(
    imp1.FLSharedKeys arg0, ffi.UnsignedInt oldCount);
typedef DartFLSharedKeys_RevertToCount = void Function(
    imp1.FLSharedKeys arg0, int oldCount);
typedef NativeFLSharedKeys_DisableCaching = ffi.Void Function(
    imp1.FLSharedKeys arg0);
typedef DartFLSharedKeys_DisableCaching = void Function(imp1.FLSharedKeys arg0);
typedef NativeFLSharedKeys_Retain = imp1.FLSharedKeys Function(
    imp1.FLSharedKeys arg0);
typedef DartFLSharedKeys_Retain = imp1.FLSharedKeys Function(
    imp1.FLSharedKeys arg0);
typedef NativeFLSharedKeys_Release = ffi.Void Function(imp1.FLSharedKeys arg0);
typedef DartFLSharedKeys_Release = void Function(imp1.FLSharedKeys arg0);
typedef NativeFLSharedKeyScope_WithRange = imp1.FLSharedKeyScope Function(
    FLSlice range, imp1.FLSharedKeys arg1);
typedef DartFLSharedKeyScope_WithRange = imp1.FLSharedKeyScope Function(
    FLSlice range, imp1.FLSharedKeys arg1);
typedef NativeFLSharedKeyScope_Free = ffi.Void Function(
    imp1.FLSharedKeyScope arg0);
typedef DartFLSharedKeyScope_Free = void Function(imp1.FLSharedKeyScope arg0);
typedef NativeFLValue_FromData = imp1.FLValue Function(
    FLSlice data, ffi.UnsignedInt trust);
typedef DartFLValue_FromData = imp1.FLValue Function(FLSlice data, int trust);
typedef NativeFLJSON5_ToJSON = imp1.FLStringResult Function(
    imp1.FLString json5,
    ffi.Pointer<imp1.FLStringResult> outErrorMessage,
    ffi.Pointer<ffi.Size> outErrorPos,
    ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLJSON5_ToJSON = imp1.FLStringResult Function(
    imp1.FLString json5,
    ffi.Pointer<imp1.FLStringResult> outErrorMessage,
    ffi.Pointer<ffi.Size> outErrorPos,
    ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLData_ConvertJSON = FLSliceResult Function(
    FLSlice json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef DartFLData_ConvertJSON = FLSliceResult Function(
    FLSlice json, ffi.Pointer<ffi.UnsignedInt> outError);
typedef NativeFLEncoder_Amend = ffi.Void Function(imp1.FLEncoder e,
    FLSlice base, ffi.Bool reuseStrings, ffi.Bool externPointers);
typedef DartFLEncoder_Amend = void Function(
    imp1.FLEncoder e, FLSlice base, bool reuseStrings, bool externPointers);
typedef NativeFLEncoder_GetBase = FLSlice Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_GetBase = FLSlice Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_SuppressTrailer = ffi.Void Function(
    imp1.FLEncoder arg0);
typedef DartFLEncoder_SuppressTrailer = void Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_GetNextWritePos = ffi.Size Function(
    imp1.FLEncoder arg0);
typedef DartFLEncoder_GetNextWritePos = int Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_LastValueWritten = ffi.IntPtr Function(
    imp1.FLEncoder arg0);
typedef DartFLEncoder_LastValueWritten = int Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_WriteValueAgain = ffi.Bool Function(
    imp1.FLEncoder arg0, ffi.IntPtr preWrittenValue);
typedef DartFLEncoder_WriteValueAgain = bool Function(
    imp1.FLEncoder arg0, int preWrittenValue);
typedef NativeFLEncoder_Snip = FLSliceResult Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_Snip = FLSliceResult Function(imp1.FLEncoder arg0);
typedef NativeFLEncoder_FinishItem = ffi.Size Function(imp1.FLEncoder arg0);
typedef DartFLEncoder_FinishItem = int Function(imp1.FLEncoder arg0);
typedef NativeFLJSONEncoder_NextDocument = ffi.Void Function(
    imp1.FLEncoder arg0);
typedef DartFLJSONEncoder_NextDocument = void Function(imp1.FLEncoder arg0);
typedef NativeFLDump = ffi.Pointer<ffi.Char> Function(imp1.FLValue arg0);
typedef DartFLDump = ffi.Pointer<ffi.Char> Function(imp1.FLValue arg0);
typedef NativeFLDumpData = ffi.Pointer<ffi.Char> Function(FLSlice data);
typedef DartFLDumpData = ffi.Pointer<ffi.Char> Function(FLSlice data);
typedef NativeFLData_Dump = imp1.FLStringResult Function(FLSlice data);
typedef DartFLData_Dump = imp1.FLStringResult Function(FLSlice data);

const String CBLITE_VERSION = '3.2.0';

const int CBLITE_VERSION_NUMBER = 3002000;

const int CBLITE_BUILD_NUMBER = 71;

const String CBLITE_SOURCE_ID = '42c42c4+1b8799a';

const String CBLITE_BUILD_TIMESTAMP = '2024-08-29T06:45:08Z';

const String HOTLEVEL = 'Ofast';

const String COLDLEVEL = 'Oz';

const int FLTimestampNone = -9223372036854775808;

const int kFLTrustedDontParse = 4294967295;

const int kFLNoWrittenValue = -9223372036854775808;
