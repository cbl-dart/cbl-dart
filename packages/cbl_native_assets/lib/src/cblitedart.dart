// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:cbl/src/bindings/cblitedart.dart' as imp2;
import 'package:cbl/src/bindings/cblite.dart' as imp1;
import '' as self;

@ffi.Native<NativeCBLDart_FLSliceResult_RetainByBuf>()
external void CBLDart_FLSliceResult_RetainByBuf(
  ffi.Pointer<ffi.Void> buf,
);

@ffi.Native<NativeCBLDart_FLSliceResult_ReleaseByBuf>()
external void CBLDart_FLSliceResult_ReleaseByBuf(
  ffi.Pointer<ffi.Void> buf,
);

@ffi.Native<NativeCBLDart_KnownSharedKeys_New>()
external ffi.Pointer<imp2.KnownSharedKeys> CBLDart_KnownSharedKeys_New();

@ffi.Native<NativeCBLDart_KnownSharedKeys_Delete>()
external void CBLDart_KnownSharedKeys_Delete(
  ffi.Pointer<imp2.KnownSharedKeys> keys,
);

@ffi.Native<NativeCBLDart_GetLoadedFLValue>()
external void CBLDart_GetLoadedFLValue(
  imp1.FLValue value,
  ffi.Pointer<imp2.CBLDart_LoadedFLValue> out,
);

@ffi.Native<NativeCBLDart_FLArray_GetLoadedFLValue>()
external void CBLDart_FLArray_GetLoadedFLValue(
  imp1.FLArray array,
  int index,
  ffi.Pointer<imp2.CBLDart_LoadedFLValue> out,
);

@ffi.Native<NativeCBLDart_FLDict_GetLoadedFLValue>()
external void CBLDart_FLDict_GetLoadedFLValue(
  imp1.FLDict dict,
  imp1.FLString key,
  ffi.Pointer<imp2.CBLDart_LoadedFLValue> out,
);

@ffi.Native<NativeCBLDart_FLDictIterator_Begin>()
external ffi.Pointer<imp2.CBLDart_FLDictIterator> CBLDart_FLDictIterator_Begin(
  imp1.FLDict dict,
  ffi.Pointer<imp2.KnownSharedKeys> knownSharedKeys,
  ffi.Pointer<imp2.CBLDart_LoadedDictKey> keyOut,
  ffi.Pointer<imp2.CBLDart_LoadedFLValue> valueOut,
  bool deleteOnDone,
  bool preLoad,
);

@ffi.Native<NativeCBLDart_FLDictIterator_Delete>()
external void CBLDart_FLDictIterator_Delete(
  ffi.Pointer<imp2.CBLDart_FLDictIterator> iterator,
);

@ffi.Native<NativeCBLDart_FLDictIterator_Next>()
external bool CBLDart_FLDictIterator_Next(
  ffi.Pointer<imp2.CBLDart_FLDictIterator> iterator,
);

@ffi.Native<NativeCBLDart_FLArrayIterator_Begin>()
external ffi.Pointer<imp2.CBLDart_FLArrayIterator>
    CBLDart_FLArrayIterator_Begin(
  imp1.FLArray array,
  ffi.Pointer<imp2.CBLDart_LoadedFLValue> valueOut,
  bool deleteOnDone,
);

@ffi.Native<NativeCBLDart_FLArrayIterator_Delete>()
external void CBLDart_FLArrayIterator_Delete(
  ffi.Pointer<imp2.CBLDart_FLArrayIterator> iterator,
);

@ffi.Native<NativeCBLDart_FLArrayIterator_Next>()
external bool CBLDart_FLArrayIterator_Next(
  ffi.Pointer<imp2.CBLDart_FLArrayIterator> iterator,
);

@ffi.Native<NativeCBLDart_FLEncoder_WriteArrayValue>()
external bool CBLDart_FLEncoder_WriteArrayValue(
  imp1.FLEncoder encoder,
  imp1.FLArray array,
  int index,
);

@ffi.Native<NativeCBLDart_Initialize>()
external int CBLDart_Initialize(
  ffi.Pointer<ffi.Void> dartInitializeDlData,
  ffi.Pointer<ffi.Void> cblInitContext,
  ffi.Pointer<imp2.CBLError> errorOut,
);

@ffi.Native<NativeCBLDart_AsyncCallback_New>()
external imp2.CBLDart_AsyncCallback CBLDart_AsyncCallback_New(
  int id,
  imp2.DartDart_Port sendPort,
  bool debug,
);

@ffi.Native<NativeCBLDart_AsyncCallback_Delete>()
external void CBLDart_AsyncCallback_Delete(
  imp2.CBLDart_AsyncCallback callback,
);

@ffi.Native<NativeCBLDart_AsyncCallback_Close>()
external void CBLDart_AsyncCallback_Close(
  imp2.CBLDart_AsyncCallback callback,
);

@ffi.Native<NativeCBLDart_AsyncCallback_CallForTest>()
external void CBLDart_AsyncCallback_CallForTest(
  imp2.CBLDart_AsyncCallback callback,
  int argument,
);

@ffi.Native<NativeCBLDart_Completer_Complete>()
external void CBLDart_Completer_Complete(
  imp2.CBLDart_Completer completer,
  ffi.Pointer<ffi.Void> result,
);

@ffi.Native<NativeCBLDart_AllocateIsolateId>()
external imp2.DartCBLDart_IsolateId CBLDart_AllocateIsolateId();

@ffi.Native<NativeCBLDart_SetCurrentIsolateId>()
external void CBLDart_SetCurrentIsolateId(
  imp2.DartCBLDart_IsolateId isolateId,
);

@ffi.Native<NativeCBLDart_GetCurrentIsolateId>()
external imp2.DartCBLDart_IsolateId CBLDart_GetCurrentIsolateId();

@ffi.Native<NativeCBLDart_CBLLog_SetCallback>()
external bool CBLDart_CBLLog_SetCallback(
  imp2.CBLDart_AsyncCallback callback,
);

@ffi.Native<NativeCBLDart_CBLLog_SetCallbackLevel>()
external void CBLDart_CBLLog_SetCallbackLevel(
  imp1.DartCBLLogLevel level,
);

@ffi.Native<NativeCBLDart_CBLLog_SetFileConfig>()
external bool CBLDart_CBLLog_SetFileConfig(
  ffi.Pointer<imp2.CBLLogFileConfiguration> config,
  ffi.Pointer<imp2.CBLError> errorOut,
);

@ffi.Native<NativeCBLDart_CBLLog_GetFileConfig>()
external ffi.Pointer<imp2.CBLLogFileConfiguration>
    CBLDart_CBLLog_GetFileConfig();

@ffi.Native<NativeCBLDart_CBLLog_SetSentryBreadcrumbs>()
external bool CBLDart_CBLLog_SetSentryBreadcrumbs(
  bool enabled,
);

@ffi.Native<NativeCBLDart_CBLDatabaseConfiguration_Default>()
external CBLDart_CBLDatabaseConfiguration
    CBLDart_CBLDatabaseConfiguration_Default();

@ffi.Native<NativeCBLDart_CBL_CopyDatabase>()
external bool CBLDart_CBL_CopyDatabase(
  imp1.FLString fromPath,
  imp1.FLString toName,
  ffi.Pointer<CBLDart_CBLDatabaseConfiguration> config,
  ffi.Pointer<imp2.CBLError> outError,
);

@ffi.Native<NativeCBLDart_CBLDatabase_Open>()
external ffi.Pointer<imp2.CBLDatabase> CBLDart_CBLDatabase_Open(
  imp1.FLString name,
  ffi.Pointer<CBLDart_CBLDatabaseConfiguration> config,
  ffi.Pointer<imp2.CBLError> errorOut,
);

@ffi.Native<NativeCBLDart_CBLDatabase_Release>()
external void CBLDart_CBLDatabase_Release(
  ffi.Pointer<imp2.CBLDatabase> database,
);

@ffi.Native<NativeCBLDart_CBLDatabase_Close>()
external bool CBLDart_CBLDatabase_Close(
  ffi.Pointer<imp2.CBLDatabase> database,
  bool andDelete,
  ffi.Pointer<imp2.CBLError> errorOut,
);

@ffi.Native<NativeCBLDart_CBLCollection_AddDocumentChangeListener>()
external void CBLDart_CBLCollection_AddDocumentChangeListener(
  ffi.Pointer<imp2.CBLDatabase> db,
  ffi.Pointer<imp2.CBLCollection> collection,
  imp1.FLString docID,
  imp2.CBLDart_AsyncCallback listener,
);

@ffi.Native<NativeCBLDart_CBLCollection_AddChangeListener>()
external void CBLDart_CBLCollection_AddChangeListener(
  ffi.Pointer<imp2.CBLDatabase> db,
  ffi.Pointer<imp2.CBLCollection> collection,
  imp2.CBLDart_AsyncCallback listener,
);

@ffi.Native<NativeCBLDart_CBLCollection_CreateIndex>()
external bool CBLDart_CBLCollection_CreateIndex(
  ffi.Pointer<imp2.CBLCollection> collection,
  imp1.FLString name,
  imp2.CBLDart_CBLIndexSpec indexSpec,
  ffi.Pointer<imp2.CBLError> errorOut,
);

@ffi.Native<NativeCBLDart_CBLQuery_AddChangeListener>()
external ffi.Pointer<imp2.CBLListenerToken> CBLDart_CBLQuery_AddChangeListener(
  ffi.Pointer<imp2.CBLDatabase> db,
  ffi.Pointer<imp2.CBLQuery> query,
  imp2.CBLDart_AsyncCallback listener,
);

@ffi.Native<NativeCBLDart_PredictiveModel_New>()
external imp2.CBLDart_PredictiveModel CBLDart_PredictiveModel_New(
  imp1.FLString name,
  imp2.DartCBLDart_IsolateId isolateId,
  imp2.CBLDart_PredictiveModel_PredictionSync predictionSync,
  imp2.CBLDart_PredictiveModel_PredictionAsync predictionAsync,
  imp2.CBLDart_PredictiveModel_Unregistered unregistered,
);

@ffi.Native<NativeCBLDart_PredictiveModel_Delete>()
external void CBLDart_PredictiveModel_Delete(
  imp2.CBLDart_PredictiveModel model,
);

@ffi.Native<NativeCBLDart_CBLBlobReader_Read>()
external imp2.FLSliceResult CBLDart_CBLBlobReader_Read(
  ffi.Pointer<imp2.CBLBlobReadStream> stream,
  int bufferSize,
  ffi.Pointer<imp2.CBLError> outError,
);

@ffi.Native<NativeCBLDart_CBLReplicator_Create>()
external ffi.Pointer<imp2.CBLReplicator> CBLDart_CBLReplicator_Create(
  ffi.Pointer<imp2.CBLDart_ReplicatorConfiguration> config,
  ffi.Pointer<imp2.CBLError> errorOut,
);

@ffi.Native<NativeCBLDart_CBLReplicator_Release>()
external void CBLDart_CBLReplicator_Release(
  ffi.Pointer<imp2.CBLReplicator> replicator,
);

@ffi.Native<NativeCBLDart_CBLReplicator_AddChangeListener>()
external void CBLDart_CBLReplicator_AddChangeListener(
  ffi.Pointer<imp2.CBLDatabase> db,
  ffi.Pointer<imp2.CBLReplicator> replicator,
  imp2.CBLDart_AsyncCallback listenerId,
);

@ffi.Native<NativeCBLDart_CBLReplicator_AddDocumentReplicationListener>()
external void CBLDart_CBLReplicator_AddDocumentReplicationListener(
  ffi.Pointer<imp2.CBLDatabase> db,
  ffi.Pointer<imp2.CBLReplicator> replicator,
  imp2.CBLDart_AsyncCallback listenerId,
);

const addresses = _SymbolAddresses();

class _SymbolAddresses {
  const _SymbolAddresses();
  ffi.Pointer<ffi.NativeFunction<NativeCBLDart_FLSliceResult_ReleaseByBuf>>
      get CBLDart_FLSliceResult_ReleaseByBuf =>
          ffi.Native.addressOf(self.CBLDart_FLSliceResult_ReleaseByBuf);
  ffi.Pointer<ffi.NativeFunction<NativeCBLDart_KnownSharedKeys_Delete>>
      get CBLDart_KnownSharedKeys_Delete =>
          ffi.Native.addressOf(self.CBLDart_KnownSharedKeys_Delete);
  ffi.Pointer<ffi.NativeFunction<NativeCBLDart_FLDictIterator_Delete>>
      get CBLDart_FLDictIterator_Delete =>
          ffi.Native.addressOf(self.CBLDart_FLDictIterator_Delete);
  ffi.Pointer<ffi.NativeFunction<NativeCBLDart_FLArrayIterator_Delete>>
      get CBLDart_FLArrayIterator_Delete =>
          ffi.Native.addressOf(self.CBLDart_FLArrayIterator_Delete);
  ffi.Pointer<ffi.NativeFunction<NativeCBLDart_AsyncCallback_Delete>>
      get CBLDart_AsyncCallback_Delete =>
          ffi.Native.addressOf(self.CBLDart_AsyncCallback_Delete);
  ffi.Pointer<ffi.NativeFunction<NativeCBLDart_CBLDatabase_Release>>
      get CBLDart_CBLDatabase_Release =>
          ffi.Native.addressOf(self.CBLDart_CBLDatabase_Release);
  ffi.Pointer<ffi.NativeFunction<NativeCBLDart_PredictiveModel_Delete>>
      get CBLDart_PredictiveModel_Delete =>
          ffi.Native.addressOf(self.CBLDart_PredictiveModel_Delete);
  ffi.Pointer<ffi.NativeFunction<NativeCBLDart_CBLReplicator_Release>>
      get CBLDart_CBLReplicator_Release =>
          ffi.Native.addressOf(self.CBLDart_CBLReplicator_Release);
}

typedef NativeCBLDart_FLSliceResult_RetainByBuf = ffi.Void Function(
    ffi.Pointer<ffi.Void> buf);
typedef DartCBLDart_FLSliceResult_RetainByBuf = void Function(
    ffi.Pointer<ffi.Void> buf);
typedef NativeCBLDart_FLSliceResult_ReleaseByBuf = ffi.Void Function(
    ffi.Pointer<ffi.Void> buf);
typedef DartCBLDart_FLSliceResult_ReleaseByBuf = void Function(
    ffi.Pointer<ffi.Void> buf);
typedef NativeCBLDart_KnownSharedKeys_New = ffi.Pointer<imp2.KnownSharedKeys>
    Function();
typedef DartCBLDart_KnownSharedKeys_New = ffi.Pointer<imp2.KnownSharedKeys>
    Function();
typedef NativeCBLDart_KnownSharedKeys_Delete = ffi.Void Function(
    ffi.Pointer<imp2.KnownSharedKeys> keys);
typedef DartCBLDart_KnownSharedKeys_Delete = void Function(
    ffi.Pointer<imp2.KnownSharedKeys> keys);
typedef NativeCBLDart_GetLoadedFLValue = ffi.Void Function(
    imp1.FLValue value, ffi.Pointer<imp2.CBLDart_LoadedFLValue> out);
typedef DartCBLDart_GetLoadedFLValue = void Function(
    imp1.FLValue value, ffi.Pointer<imp2.CBLDart_LoadedFLValue> out);
typedef NativeCBLDart_FLArray_GetLoadedFLValue = ffi.Void Function(
    imp1.FLArray array,
    ffi.Uint32 index,
    ffi.Pointer<imp2.CBLDart_LoadedFLValue> out);
typedef DartCBLDart_FLArray_GetLoadedFLValue = void Function(
    imp1.FLArray array, int index, ffi.Pointer<imp2.CBLDart_LoadedFLValue> out);
typedef NativeCBLDart_FLDict_GetLoadedFLValue = ffi.Void Function(
    imp1.FLDict dict,
    imp1.FLString key,
    ffi.Pointer<imp2.CBLDart_LoadedFLValue> out);
typedef DartCBLDart_FLDict_GetLoadedFLValue = void Function(imp1.FLDict dict,
    imp1.FLString key, ffi.Pointer<imp2.CBLDart_LoadedFLValue> out);
typedef NativeCBLDart_FLDictIterator_Begin
    = ffi.Pointer<imp2.CBLDart_FLDictIterator> Function(
        imp1.FLDict dict,
        ffi.Pointer<imp2.KnownSharedKeys> knownSharedKeys,
        ffi.Pointer<imp2.CBLDart_LoadedDictKey> keyOut,
        ffi.Pointer<imp2.CBLDart_LoadedFLValue> valueOut,
        ffi.Bool deleteOnDone,
        ffi.Bool preLoad);
typedef DartCBLDart_FLDictIterator_Begin
    = ffi.Pointer<imp2.CBLDart_FLDictIterator> Function(
        imp1.FLDict dict,
        ffi.Pointer<imp2.KnownSharedKeys> knownSharedKeys,
        ffi.Pointer<imp2.CBLDart_LoadedDictKey> keyOut,
        ffi.Pointer<imp2.CBLDart_LoadedFLValue> valueOut,
        bool deleteOnDone,
        bool preLoad);
typedef NativeCBLDart_FLDictIterator_Delete = ffi.Void Function(
    ffi.Pointer<imp2.CBLDart_FLDictIterator> iterator);
typedef DartCBLDart_FLDictIterator_Delete = void Function(
    ffi.Pointer<imp2.CBLDart_FLDictIterator> iterator);
typedef NativeCBLDart_FLDictIterator_Next = ffi.Bool Function(
    ffi.Pointer<imp2.CBLDart_FLDictIterator> iterator);
typedef DartCBLDart_FLDictIterator_Next = bool Function(
    ffi.Pointer<imp2.CBLDart_FLDictIterator> iterator);
typedef NativeCBLDart_FLArrayIterator_Begin
    = ffi.Pointer<imp2.CBLDart_FLArrayIterator> Function(
        imp1.FLArray array,
        ffi.Pointer<imp2.CBLDart_LoadedFLValue> valueOut,
        ffi.Bool deleteOnDone);
typedef DartCBLDart_FLArrayIterator_Begin
    = ffi.Pointer<imp2.CBLDart_FLArrayIterator> Function(imp1.FLArray array,
        ffi.Pointer<imp2.CBLDart_LoadedFLValue> valueOut, bool deleteOnDone);
typedef NativeCBLDart_FLArrayIterator_Delete = ffi.Void Function(
    ffi.Pointer<imp2.CBLDart_FLArrayIterator> iterator);
typedef DartCBLDart_FLArrayIterator_Delete = void Function(
    ffi.Pointer<imp2.CBLDart_FLArrayIterator> iterator);
typedef NativeCBLDart_FLArrayIterator_Next = ffi.Bool Function(
    ffi.Pointer<imp2.CBLDart_FLArrayIterator> iterator);
typedef DartCBLDart_FLArrayIterator_Next = bool Function(
    ffi.Pointer<imp2.CBLDart_FLArrayIterator> iterator);
typedef NativeCBLDart_FLEncoder_WriteArrayValue = ffi.Bool Function(
    imp1.FLEncoder encoder, imp1.FLArray array, ffi.Uint32 index);
typedef DartCBLDart_FLEncoder_WriteArrayValue = bool Function(
    imp1.FLEncoder encoder, imp1.FLArray array, int index);

sealed class CBLDartInitializeResult {
  static const CBLDartInitializeResult_kSuccess = 0;
  static const CBLDartInitializeResult_kIncompatibleDartVM = 1;
  static const CBLDartInitializeResult_kCBLInitError = 2;
}

typedef NativeCBLDart_Initialize = ffi.UnsignedInt Function(
    ffi.Pointer<ffi.Void> dartInitializeDlData,
    ffi.Pointer<ffi.Void> cblInitContext,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef DartCBLDart_Initialize = int Function(
    ffi.Pointer<ffi.Void> dartInitializeDlData,
    ffi.Pointer<ffi.Void> cblInitContext,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef NativeCBLDart_AsyncCallback_New = imp2.CBLDart_AsyncCallback Function(
    ffi.Uint32 id, imp2.Dart_Port sendPort, ffi.Bool debug);
typedef DartCBLDart_AsyncCallback_New = imp2.CBLDart_AsyncCallback Function(
    int id, imp2.Dart_Port sendPort, bool debug);
typedef NativeCBLDart_AsyncCallback_Delete = ffi.Void Function(
    imp2.CBLDart_AsyncCallback callback);
typedef DartCBLDart_AsyncCallback_Delete = void Function(
    imp2.CBLDart_AsyncCallback callback);
typedef NativeCBLDart_AsyncCallback_Close = ffi.Void Function(
    imp2.CBLDart_AsyncCallback callback);
typedef DartCBLDart_AsyncCallback_Close = void Function(
    imp2.CBLDart_AsyncCallback callback);
typedef NativeCBLDart_AsyncCallback_CallForTest = ffi.Void Function(
    imp2.CBLDart_AsyncCallback callback, ffi.Int64 argument);
typedef DartCBLDart_AsyncCallback_CallForTest = void Function(
    imp2.CBLDart_AsyncCallback callback, int argument);
typedef NativeCBLDart_Completer_Complete = ffi.Void Function(
    imp2.CBLDart_Completer completer, ffi.Pointer<ffi.Void> result);
typedef DartCBLDart_Completer_Complete = void Function(
    imp2.CBLDart_Completer completer, ffi.Pointer<ffi.Void> result);
typedef NativeCBLDart_AllocateIsolateId = imp2.CBLDart_IsolateId Function();
typedef DartCBLDart_AllocateIsolateId = imp2.CBLDart_IsolateId Function();
typedef NativeCBLDart_SetCurrentIsolateId = ffi.Void Function(
    imp2.CBLDart_IsolateId isolateId);
typedef DartCBLDart_SetCurrentIsolateId = void Function(
    imp2.CBLDart_IsolateId isolateId);
typedef NativeCBLDart_GetCurrentIsolateId = imp2.CBLDart_IsolateId Function();
typedef DartCBLDart_GetCurrentIsolateId = imp2.CBLDart_IsolateId Function();
typedef NativeCBLDart_CBLLog_SetCallback = ffi.Bool Function(
    imp2.CBLDart_AsyncCallback callback);
typedef DartCBLDart_CBLLog_SetCallback = bool Function(
    imp2.CBLDart_AsyncCallback callback);
typedef NativeCBLDart_CBLLog_SetCallbackLevel = ffi.Void Function(
    imp1.CBLLogLevel level);
typedef DartCBLDart_CBLLog_SetCallbackLevel = void Function(
    imp1.CBLLogLevel level);
typedef NativeCBLDart_CBLLog_SetFileConfig = ffi.Bool Function(
    ffi.Pointer<imp2.CBLLogFileConfiguration> config,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef DartCBLDart_CBLLog_SetFileConfig = bool Function(
    ffi.Pointer<imp2.CBLLogFileConfiguration> config,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef NativeCBLDart_CBLLog_GetFileConfig
    = ffi.Pointer<imp2.CBLLogFileConfiguration> Function();
typedef DartCBLDart_CBLLog_GetFileConfig
    = ffi.Pointer<imp2.CBLLogFileConfiguration> Function();
typedef NativeCBLDart_CBLLog_SetSentryBreadcrumbs = ffi.Bool Function(
    ffi.Bool enabled);
typedef DartCBLDart_CBLLog_SetSentryBreadcrumbs = bool Function(bool enabled);
typedef CBLDart_CBLEncryptionKey = imp2.CBLDart_CBLEncryptionKey;
typedef CBLDart_CBLDatabaseConfiguration
    = imp2.CBLDart_CBLDatabaseConfiguration;
typedef NativeCBLDart_CBLDatabaseConfiguration_Default
    = CBLDart_CBLDatabaseConfiguration Function();
typedef DartCBLDart_CBLDatabaseConfiguration_Default
    = CBLDart_CBLDatabaseConfiguration Function();
typedef NativeCBLDart_CBL_CopyDatabase = ffi.Bool Function(
    imp1.FLString fromPath,
    imp1.FLString toName,
    ffi.Pointer<CBLDart_CBLDatabaseConfiguration> config,
    ffi.Pointer<imp2.CBLError> outError);
typedef DartCBLDart_CBL_CopyDatabase = bool Function(
    imp1.FLString fromPath,
    imp1.FLString toName,
    ffi.Pointer<CBLDart_CBLDatabaseConfiguration> config,
    ffi.Pointer<imp2.CBLError> outError);
typedef NativeCBLDart_CBLDatabase_Open = ffi.Pointer<imp2.CBLDatabase> Function(
    imp1.FLString name,
    ffi.Pointer<CBLDart_CBLDatabaseConfiguration> config,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef DartCBLDart_CBLDatabase_Open = ffi.Pointer<imp2.CBLDatabase> Function(
    imp1.FLString name,
    ffi.Pointer<CBLDart_CBLDatabaseConfiguration> config,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef NativeCBLDart_CBLDatabase_Release = ffi.Void Function(
    ffi.Pointer<imp2.CBLDatabase> database);
typedef DartCBLDart_CBLDatabase_Release = void Function(
    ffi.Pointer<imp2.CBLDatabase> database);
typedef NativeCBLDart_CBLDatabase_Close = ffi.Bool Function(
    ffi.Pointer<imp2.CBLDatabase> database,
    ffi.Bool andDelete,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef DartCBLDart_CBLDatabase_Close = bool Function(
    ffi.Pointer<imp2.CBLDatabase> database,
    bool andDelete,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef NativeCBLDart_CBLCollection_AddDocumentChangeListener
    = ffi.Void Function(
        ffi.Pointer<imp2.CBLDatabase> db,
        ffi.Pointer<imp2.CBLCollection> collection,
        imp1.FLString docID,
        imp2.CBLDart_AsyncCallback listener);
typedef DartCBLDart_CBLCollection_AddDocumentChangeListener = void Function(
    ffi.Pointer<imp2.CBLDatabase> db,
    ffi.Pointer<imp2.CBLCollection> collection,
    imp1.FLString docID,
    imp2.CBLDart_AsyncCallback listener);
typedef NativeCBLDart_CBLCollection_AddChangeListener = ffi.Void Function(
    ffi.Pointer<imp2.CBLDatabase> db,
    ffi.Pointer<imp2.CBLCollection> collection,
    imp2.CBLDart_AsyncCallback listener);
typedef DartCBLDart_CBLCollection_AddChangeListener = void Function(
    ffi.Pointer<imp2.CBLDatabase> db,
    ffi.Pointer<imp2.CBLCollection> collection,
    imp2.CBLDart_AsyncCallback listener);
typedef NativeCBLDart_CBLCollection_CreateIndex = ffi.Bool Function(
    ffi.Pointer<imp2.CBLCollection> collection,
    imp1.FLString name,
    imp2.CBLDart_CBLIndexSpec indexSpec,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef DartCBLDart_CBLCollection_CreateIndex = bool Function(
    ffi.Pointer<imp2.CBLCollection> collection,
    imp1.FLString name,
    imp2.CBLDart_CBLIndexSpec indexSpec,
    ffi.Pointer<imp2.CBLError> errorOut);
typedef NativeCBLDart_CBLQuery_AddChangeListener
    = ffi.Pointer<imp2.CBLListenerToken> Function(
        ffi.Pointer<imp2.CBLDatabase> db,
        ffi.Pointer<imp2.CBLQuery> query,
        imp2.CBLDart_AsyncCallback listener);
typedef DartCBLDart_CBLQuery_AddChangeListener
    = ffi.Pointer<imp2.CBLListenerToken> Function(
        ffi.Pointer<imp2.CBLDatabase> db,
        ffi.Pointer<imp2.CBLQuery> query,
        imp2.CBLDart_AsyncCallback listener);
typedef NativeCBLDart_PredictiveModel_New
    = imp2.CBLDart_PredictiveModel Function(
        imp1.FLString name,
        imp2.CBLDart_IsolateId isolateId,
        imp2.CBLDart_PredictiveModel_PredictionSync predictionSync,
        imp2.CBLDart_PredictiveModel_PredictionAsync predictionAsync,
        imp2.CBLDart_PredictiveModel_Unregistered unregistered);
typedef DartCBLDart_PredictiveModel_New = imp2.CBLDart_PredictiveModel Function(
    imp1.FLString name,
    imp2.CBLDart_IsolateId isolateId,
    imp2.CBLDart_PredictiveModel_PredictionSync predictionSync,
    imp2.CBLDart_PredictiveModel_PredictionAsync predictionAsync,
    imp2.CBLDart_PredictiveModel_Unregistered unregistered);
typedef NativeCBLDart_PredictiveModel_Delete = ffi.Void Function(
    imp2.CBLDart_PredictiveModel model);
typedef DartCBLDart_PredictiveModel_Delete = void Function(
    imp2.CBLDart_PredictiveModel model);
typedef NativeCBLDart_CBLBlobReader_Read = imp2.FLSliceResult Function(
    ffi.Pointer<imp2.CBLBlobReadStream> stream,
    ffi.Uint64 bufferSize,
    ffi.Pointer<imp2.CBLError> outError);
typedef DartCBLDart_CBLBlobReader_Read = imp2.FLSliceResult Function(
    ffi.Pointer<imp2.CBLBlobReadStream> stream,
    int bufferSize,
    ffi.Pointer<imp2.CBLError> outError);
typedef NativeCBLDart_CBLReplicator_Create
    = ffi.Pointer<imp2.CBLReplicator> Function(
        ffi.Pointer<imp2.CBLDart_ReplicatorConfiguration> config,
        ffi.Pointer<imp2.CBLError> errorOut);
typedef DartCBLDart_CBLReplicator_Create
    = ffi.Pointer<imp2.CBLReplicator> Function(
        ffi.Pointer<imp2.CBLDart_ReplicatorConfiguration> config,
        ffi.Pointer<imp2.CBLError> errorOut);
typedef NativeCBLDart_CBLReplicator_Release = ffi.Void Function(
    ffi.Pointer<imp2.CBLReplicator> replicator);
typedef DartCBLDart_CBLReplicator_Release = void Function(
    ffi.Pointer<imp2.CBLReplicator> replicator);
typedef NativeCBLDart_CBLReplicator_AddChangeListener = ffi.Void Function(
    ffi.Pointer<imp2.CBLDatabase> db,
    ffi.Pointer<imp2.CBLReplicator> replicator,
    imp2.CBLDart_AsyncCallback listenerId);
typedef DartCBLDart_CBLReplicator_AddChangeListener = void Function(
    ffi.Pointer<imp2.CBLDatabase> db,
    ffi.Pointer<imp2.CBLReplicator> replicator,
    imp2.CBLDart_AsyncCallback listenerId);
typedef NativeCBLDart_CBLReplicator_AddDocumentReplicationListener
    = ffi.Void Function(
        ffi.Pointer<imp2.CBLDatabase> db,
        ffi.Pointer<imp2.CBLReplicator> replicator,
        imp2.CBLDart_AsyncCallback listenerId);
typedef DartCBLDart_CBLReplicator_AddDocumentReplicationListener
    = void Function(
        ffi.Pointer<imp2.CBLDatabase> db,
        ffi.Pointer<imp2.CBLReplicator> replicator,
        imp2.CBLDart_AsyncCallback listenerId);

const int kCBLDartInvalidIsolateId = -1;
