name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - docs/**
  pull_request:
    branches:
      - main
    paths-ignore:
      - docs/**
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  flutter-channel: stable
  # Use 3.0 until bug in 3.1 is fixed.
  # https://github.com/dart-lang/sdk/issues/53267
  dart-version-stable: 3.0.7
  dart-version-beta: beta

jobs:
  formatting-dart:
    name: Formatting - Dart
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1

      - name: Setup Melos
        run: dart pub global activate melos

      - name: Install daco
        run: dart pub global activate daco

      - name: Get dependencies
        run: dart pub get

      - name: Check formatting
        run: melos formatting:check

      - name: Print diff
        if: failure()
        run: git diff

  formatting-clang:
    name: Formatting - Clang
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check formatting
        uses: jidicula/clang-format-action@v4.11.0
        with:
          check-path: 'native/couchbase-lite-dart'

  analyze-dart:
    name: Analyze Dart code
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        dart: [stable, beta]
    continue-on-error: ${{ matrix.dart != 'stable' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.flutter-channel }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env[format('dart-version-{0}', matrix.dart)] }}

      - name: Setup Melos
        run: dart pub global activate melos

      - name: Bootstrap Dart packages
        run: ./tools/dev-tools.sh bootstrap

      - name: Analyze Dart code
        run: melos analyze

  test-dart-unit:
    name: Dart unit tests
    strategy:
      fail-fast: false
      matrix:
        package: [cbl, cbl_sentry, cbl_generator]
        dart: [stable, beta]
        embedder: [standalone]
        os: [Ubuntu]
    env:
      EMBEDDER: ${{ matrix.embedder }}
      TARGET_OS: ${{ matrix.os }}
      TEST_PACKAGE: ${{ matrix.package }}
    continue-on-error: ${{ matrix.dart != 'stable' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env[format('dart-version-{0}', matrix.dart)] }}

      - name: Setup Melos
        run: dart pub global activate melos

      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Build native libraries
        shell: bash
        run: ./tools/ci-steps.sh buildNativeLibraries

      - name: Bootstrap Dart package
        run: ./tools/ci-steps.sh bootstrapPackage

      - name: Run build_runner
        if: ${{ matrix.package == 'cbl_generator' }}
        run: ./tools/ci-steps.sh checkBuildRunnerOutput

      - name: Run tests
        run: ./tools/ci-steps.sh runUnitTests

      - name: Upload coverage data
        if: ${{ matrix.dart == 'stable' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          ./tools/ci-steps.sh uploadCoverageData "unit.${{ matrix.package }}"

  test-e2e:
    name: E2E tests
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        embedder: [standalone, flutter]
        os:
          - iOS
          - macOS
          - Android
          - Ubuntu
          - Windows
        exclude:
          - embedder: standalone
            os: iOS
          - embedder: standalone
            os: Android
          # TODO: Get macOS and iOS tests to launch again in CI
          - embedder: flutter
            os: macOS
          - embedder: flutter
            os: iOS
    # Flutter + Ubuntu is flaky, likely because of a bug in CBL C, so we allow it to fail for now.
    continue-on-error:
      ${{ matrix.embedder == 'flutter' && matrix.os == 'Ubuntu' }}
    runs-on: >-
      ${{ fromJSON('{
        "iOS":"macos-12",
        "macOS":"macos-12",
        "Android":"macos-12",
        "Ubuntu":"ubuntu-20.04",
        "Windows":"windows-2019"
      }')[matrix.os] }}
    env:
      EMBEDDER: ${{ matrix.embedder }}
      TARGET_OS: ${{ matrix.os }}
      TEST_PACKAGE: >-
        ${{ fromJSON('{
          "standalone":"cbl_e2e_tests_standalone_dart",
          "flutter":"cbl_e2e_tests_flutter"
        }')[matrix.embedder] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Select Java 11
        if: ${{ matrix.os == 'Android' }}
        run: echo "JAVA_HOME=$JAVA_HOME_11_X64" >> $GITHUB_ENV

      - name: Install Android Native Toolchain
        if: ${{ matrix.os == 'Android' }}
        run: ./native/tools/android-sdk.sh installNativeToolchain

      - name: Build native libraries
        shell: bash
        run: ./tools/ci-steps.sh buildNativeLibraries

      - name: Install Fluter Linux Desktop dependencies
        if: matrix.os == 'Ubuntu' && matrix.embedder == 'flutter'
        run: |
          sudo apt-get update
          sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev

      - name: Setup Flutter
        if: matrix.embedder == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.flutter-channel }}

      - name: Configure flutter
        if: matrix.embedder == 'flutter'
        shell: bash
        run: ./tools/ci-steps.sh configureFlutter

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        if: matrix.embedder == 'standalone'
        with:
          sdk: ${{ env.dart-version-stable }}

      - name: Setup Melos
        run: dart pub global activate melos

      - name: Bootstrap Dart package
        shell: bash
        run: ./tools/ci-steps.sh bootstrapPackage

      - name: Start Couchbase services
        shell: bash
        run: ./tools/ci-steps.sh startCouchbaseServices

      - name: Start virtual devices
        if: matrix.embedder == 'flutter'
        shell: bash
        run: ./tools/ci-steps.sh startVirtualDevices

      - name: Run tests
        shell: bash
        run: ./tools/ci-steps.sh runE2ETests

      - name: Collect test results
        if: failure()
        shell: bash
        run: ./tools/ci-steps.sh collectTestResults

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.embedder }}
          path: test-results

      - name: Upload coverage data
        # Disabled until we figure out how to get coverage data from flutter tests
        if: ${{ matrix.embedder != 'flutter' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        shell: bash
        run: |
          ./tools/ci-steps.sh uploadCoverageData "e2e.cbl"

  test-e2e-cbl_flutter_prebuilt:
    name: cbl_flutter_prebuilt E2E tests
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        embedder: [flutter]
        os:
          - iOS
          - macOS
          - Android
          - Ubuntu
          - Windows
        exclude:
          # TODO: Get macOS and iOS tests to launch again in CI
          - embedder: flutter
            os: macOS
          - embedder: flutter
            os: iOS
    runs-on: >-
      ${{ fromJSON('{
        "iOS":"macos-12",
        "macOS":"macos-12",
        "Android":"macos-12",
        "Ubuntu":"ubuntu-20.04",
         "Windows":"windows-2019"
      }')[matrix.os] }}
    env:
      EMBEDDER: ${{ matrix.embedder }}
      TARGET_OS: ${{ matrix.os }}
      TEST_PACKAGE: cbl_flutter_prebuilt_e2e_tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Select Java 11
        if: ${{ matrix.os == 'Android' }}
        run: echo "JAVA_HOME=$JAVA_HOME_11_X64" >> $GITHUB_ENV

      - name: Install Fluter Linux Desktop dependencies
        if: matrix.os == 'Ubuntu'
        run: |
          sudo apt-get update
          sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.flutter-channel }}

      - name: Configure flutter
        shell: bash
        run: ./tools/ci-steps.sh configureFlutter

      - name: Setup Melos
        run: dart pub global activate melos

      - name: Bootstrap Dart package
        shell: bash
        run: ./tools/ci-steps.sh bootstrapPackage

      - name: Start virtual devices
        shell: bash
        run: ./tools/ci-steps.sh startVirtualDevices

      - name: Run tests
        shell: bash
        run: ./tools/ci-steps.sh runE2ETests

      - name: Collect test results
        if: failure()
        shell: bash
        run: ./tools/ci-steps.sh collectTestResults

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-cbl_flutter_prebuilt-${{ matrix.os }}
          path: test-results

      - name: Upload coverage data
        # Disabled until we figure out how to get coverage data from flutter tests
        if: ${{ false }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        shell: bash
        run: |
          ./tools/ci-steps.sh uploadCoverageData "e2e.prebuilt"

  test-cbl_dart:
    name: cbl_dart unit tests
    strategy:
      fail-fast: false
      matrix:
        package: [cbl_dart]
        dart: [stable]
        embedder: [standalone]
        os: [macOS, Ubuntu, Windows]
    env:
      EMBEDDER: ${{ matrix.embedder }}
      TARGET_OS: ${{ matrix.os }}
      TEST_PACKAGE: ${{ matrix.package }}
    continue-on-error: ${{ matrix.dart != 'stable' }}
    runs-on: >-
      ${{ fromJSON('{
        "macOS":"macos-12",
        "Ubuntu":"ubuntu-20.04",
        "Windows":"windows-2019"
      }')[matrix.os] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env[format('dart-version-{0}', matrix.dart)] }}

      - name: Setup Melos
        run: dart pub global activate melos

      - name: Bootstrap Dart package
        shell: bash
        run: ./tools/ci-steps.sh bootstrapPackage

      - name: Run tests
        shell: bash
        run: ./tools/ci-steps.sh runUnitTests

      - name: Upload coverage data
        if: ${{ matrix.dart == 'stable' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        shell: bash
        run: |
          ./tools/ci-steps.sh uploadCoverageData "unit.${{ matrix.package }}"
