name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  flutter-version-stable: '2.5.0'
  flutter-version-beta: beta
  dart-version-stable: '2.14.0'
  dart-version-beta: beta
  melos-version: '1.0.0-dev.3'

jobs:
  formatting-dart:
    name: Formatting - Dart
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        dart: [stable, beta]
    continue-on-error: ${{ matrix.dart != 'stable' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env[format('dart-version-{0}', matrix.dart)] }}

      - name: Setup Melos
        run: dart pub global activate melos ${{ env.melos-version }}

      - name: Check formatting
        run: melos run formatting:check

      - name: Show formatting changes
        if: failure()
        run: git diff

  formatting-clang:
    name: Formatting - Clang
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check formatting
        uses: jidicula/clang-format-action@v3.1.0
        with:
          check-path: 'native/couchbase-lite-dart'

  analyze-dart:
    name: Analyze Dart code
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        dart: [stable, beta]
    continue-on-error: ${{ matrix.dart != 'stable' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.flutter-version-stable }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env[format('dart-version-{0}', matrix.dart)] }}

      - name: Setup Melos
        run: dart pub global activate melos ${{ env.melos-version }}

      - name: Bootstrap Dart packages
        run: melos bootstrap

      - name: Analyze code
        run: melos run analyze

  test-dart-unit:
    name: Dart unit tests
    strategy:
      matrix:
        package: [cbl]
        dart: [stable, beta]
    continue-on-error: ${{ matrix.dart != 'stable' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.flutter-version-stable }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env[format('dart-version-{0}', matrix.dart)] }}

      - name: Setup Melos
        run: dart pub global activate melos ${{ env.melos-version }}

      - name: Bootstrap Dart packages
        run: melos bootstrap

      - name: Run tests
        run: melos run test:${{ matrix.package }}

  test-e2e:
    name: E2E tests
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        embedder: [standalone, flutter]
        os: [iOS, macOS, Android, Ubuntu]
        exclude:
          - embedder: standalone
            os: iOS
          - embedder: standalone
            os: Android
    runs-on: >-
      ${{ fromJSON('{ 
        "iOS":"macos-11",
        "macOS":"macos-11",
        "Android":"macos-11",
        "Ubuntu":"ubuntu-20.04"
      }')[matrix.os] }}
    env:
      MATRIX_EMBEDDER: ${{ matrix.embedder }}
      MATRIX_OS: ${{ matrix.os }}
    # TODO: Fully enable Flutter/Linux tests 
    # Flutter for linux is breaking tests (exposes symbols from statically linked std c++ lib) 
    continue-on-error: ${{ matrix.os == 'Ubuntu' && matrix.embedder == 'flutter' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      # bash >=4 is needed by scripts
      - name: Install bash
        if: runner.os == 'macOS'
        run: brew install bash

      - name: Build native libraries
        run: ./tool/ci-steps.sh buildNativeLibraries

      - name: Install Fluter Linux Desktop dependencies
        if: matrix.os == 'Ubuntu' && matrix.embedder == 'flutter'
        run: |
          sudo apt-get update
          sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.flutter-version-stable }}

      - name: Configure flutter
        if: matrix.embedder == 'flutter'
        run: ./tool/ci-steps.sh configureFlutter

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        if: matrix.embedder == 'standalone'
        with:
          sdk: ${{ env.dart-version-stable }}

      - name: Setup Melos
        run: dart pub global activate melos ${{ env.melos-version }}

      - name: Bootstrap Dart packages
        run: ./tool/ci-steps.sh bootstrapPackages

      - name: Start test Couchbase cluster
        run: |
          case ${{ runner.os }} in
            macOS)
              melos run test:setupCouchbaseClusterMacOS
            ;;
            *)
              melos run test:setupCouchbaseClusterDocker
            ;;
          esac

      - name: Start virtual devices
        if: matrix.embedder == 'flutter'
        run: ./tool/ci-steps.sh startVirtualDevices

      - name: Run tests
        run: ./tool/ci-steps.sh runE2ETests

      - name: Collect test results
        if: failure()
        run: ./tool/ci-steps.sh collectTestResults

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.embedder }}
          path: test-results
